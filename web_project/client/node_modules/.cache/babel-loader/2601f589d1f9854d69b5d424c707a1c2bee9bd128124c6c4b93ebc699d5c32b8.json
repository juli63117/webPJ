{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst HasOne = require(\"./has-one\");\nconst HasMany = require(\"./has-many\");\nconst BelongsToMany = require(\"./belongs-to-many\");\nconst BelongsTo = require(\"./belongs-to\");\nfunction isModel(model, sequelize) {\n  return model && model.prototype && model.prototype instanceof sequelize.Sequelize.Model;\n}\nconst Mixin = {\n  hasMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    }\n    const source = this;\n    options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    Object.assign(options, _.omit(source.options, [\"hooks\"]));\n    if (options.useHooks) {\n      this.runHooks(\"beforeAssociate\", {\n        source,\n        target,\n        type: HasMany\n      }, options);\n    }\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n    association._injectAttributes();\n    association.mixin(source.prototype);\n    if (options.useHooks) {\n      this.runHooks(\"afterAssociate\", {\n        source,\n        target,\n        type: HasMany,\n        association\n      }, options);\n    }\n    return association;\n  },\n  belongsToMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    }\n    const source = this;\n    options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === void 0 ? this.sequelize.options.timestamps : options.timestamps;\n    Object.assign(options, _.omit(source.options, [\"hooks\", \"timestamps\", \"scopes\", \"defaultScope\"]));\n    if (options.useHooks) {\n      this.runHooks(\"beforeAssociate\", {\n        source,\n        target,\n        type: BelongsToMany\n      }, options);\n    }\n    const association = new BelongsToMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n    association._injectAttributes();\n    association.mixin(source.prototype);\n    if (options.useHooks) {\n      this.runHooks(\"afterAssociate\", {\n        source,\n        target,\n        type: BelongsToMany,\n        association\n      }, options);\n    }\n    return association;\n  },\n  getAssociations(target) {\n    return Object.values(this.associations).filter(association => association.target.name === target.name);\n  },\n  getAssociationForAlias(target, alias) {\n    return this.getAssociations(target).find(association => association.verifyAssociationAlias(alias)) || null;\n  }\n};\nfunction singleLinked(Type) {\n  return function (target, options = {}) {\n    const source = this;\n    if (!isModel(target, source.sequelize)) {\n      throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);\n    }\n    options.hooks = options.hooks === void 0 ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    if (options.useHooks) {\n      source.runHooks(\"beforeAssociate\", {\n        source,\n        target,\n        type: Type\n      }, options);\n    }\n    const association = new Type(source, target, Object.assign(options, source.options));\n    source.associations[association.associationAccessor] = association;\n    association._injectAttributes();\n    association.mixin(source.prototype);\n    if (options.useHooks) {\n      source.runHooks(\"afterAssociate\", {\n        source,\n        target,\n        type: Type,\n        association\n      }, options);\n    }\n    return association;\n  };\n}\nMixin.hasOne = singleLinked(HasOne);\nMixin.belongsTo = singleLinked(BelongsTo);\nmodule.exports = Mixin;\nmodule.exports.Mixin = Mixin;\nmodule.exports.default = Mixin;","map":{"version":3,"names":["_","require","HasOne","HasMany","BelongsToMany","BelongsTo","isModel","model","sequelize","prototype","Sequelize","Model","Mixin","hasMany","target","options","Error","name","source","hooks","Boolean","useHooks","Object","assign","omit","runHooks","type","association","associations","associationAccessor","_injectAttributes","mixin","belongsToMany","timestamps","getAssociations","values","filter","getAssociationForAlias","alias","find","verifyAssociationAlias","singleLinked","Type","lowerFirst","hasOne","belongsTo","module","exports","default"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\associations\\mixin.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst HasOne = require('./has-one');\nconst HasMany = require('./has-many');\nconst BelongsToMany = require('./belongs-to-many');\nconst BelongsTo = require('./belongs-to');\n\nfunction isModel(model, sequelize) {\n  return model\n    && model.prototype\n    && model.prototype instanceof sequelize.Sequelize.Model;\n}\n\nconst Mixin = {\n  hasMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.hasMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    Object.assign(options, _.omit(source.options, ['hooks']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: HasMany }, options);\n    }\n\n    // the id is in the foreign table or in a connecting table\n    const association = new HasMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: HasMany, association }, options);\n    }\n\n    return association;\n  },\n\n  belongsToMany(target, options = {}) {\n    if (!isModel(target, this.sequelize)) {\n      throw new Error(`${this.name}.belongsToMany called with something that's not a subclass of Sequelize.Model`);\n    }\n\n    const source = this;\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n    options.timestamps = options.timestamps === undefined ? this.sequelize.options.timestamps : options.timestamps;\n    Object.assign(options, _.omit(source.options, ['hooks', 'timestamps', 'scopes', 'defaultScope']));\n\n    if (options.useHooks) {\n      this.runHooks('beforeAssociate', { source, target, type: BelongsToMany }, options);\n    }\n    // the id is in the foreign table or in a connecting table\n    const association = new BelongsToMany(source, target, options);\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      this.runHooks('afterAssociate', { source, target, type: BelongsToMany, association }, options);\n    }\n\n    return association;\n  },\n\n  getAssociations(target) {\n    return Object.values(this.associations).filter(association => association.target.name === target.name);\n  },\n\n  getAssociationForAlias(target, alias) {\n    // Two associations cannot have the same alias, so we can use find instead of filter\n    return this.getAssociations(target).find(association => association.verifyAssociationAlias(alias)) || null;\n  }\n};\n\n// The logic for hasOne and belongsTo is exactly the same\nfunction singleLinked(Type) {\n  return function(target, options = {}) {\n    // eslint-disable-next-line no-invalid-this\n    const source = this;\n    if (!isModel(target, source.sequelize)) {\n      throw new Error(`${source.name}.${_.lowerFirst(Type.name)} called with something that's not a subclass of Sequelize.Model`);\n    }\n\n\n    // Since this is a mixin, we'll need a unique letiable name for hooks (since Model will override our hooks option)\n    options.hooks = options.hooks === undefined ? false : Boolean(options.hooks);\n    options.useHooks = options.hooks;\n\n    if (options.useHooks) {\n      source.runHooks('beforeAssociate', { source, target, type: Type }, options);\n    }\n    // the id is in the foreign table\n    const association = new Type(source, target, Object.assign(options, source.options));\n    source.associations[association.associationAccessor] = association;\n\n    association._injectAttributes();\n    association.mixin(source.prototype);\n\n    if (options.useHooks) {\n      source.runHooks('afterAssociate', { source, target, type: Type, association }, options);\n    }\n\n    return association;\n  };\n}\n\nMixin.hasOne = singleLinked(HasOne);\nMixin.belongsTo = singleLinked(BelongsTo);\n\nmodule.exports = Mixin;\nmodule.exports.Mixin = Mixin;\nmodule.exports.default = Mixin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}