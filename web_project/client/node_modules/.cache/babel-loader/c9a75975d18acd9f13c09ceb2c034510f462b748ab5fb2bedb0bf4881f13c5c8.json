{"ast":null,"code":"\"use strict\";\n\nconst momentTz = require(\"moment-timezone\");\nconst moment = require(\"moment\");\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = \"https://dev.snowflake.com/doc/refman/5.7/en/data-types.html\";\n  BaseTypes.DATE.types.snowflake = [\"DATETIME\"];\n  BaseTypes.STRING.types.snowflake = [\"VAR_STRING\"];\n  BaseTypes.CHAR.types.snowflake = [\"STRING\"];\n  BaseTypes.TEXT.types.snowflake = [\"BLOB\"];\n  BaseTypes.TINYINT.types.snowflake = [\"TINY\"];\n  BaseTypes.SMALLINT.types.snowflake = [\"SHORT\"];\n  BaseTypes.MEDIUMINT.types.snowflake = [\"INT24\"];\n  BaseTypes.INTEGER.types.snowflake = [\"LONG\"];\n  BaseTypes.BIGINT.types.snowflake = [\"LONGLONG\"];\n  BaseTypes.FLOAT.types.snowflake = [\"FLOAT\"];\n  BaseTypes.TIME.types.snowflake = [\"TIME\"];\n  BaseTypes.DATEONLY.types.snowflake = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.snowflake = [\"TINY\"];\n  BaseTypes.BLOB.types.snowflake = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.snowflake = [\"NEWDECIMAL\"];\n  BaseTypes.UUID.types.snowflake = false;\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.DOUBLE.types.snowflake = [\"DOUBLE\"];\n  BaseTypes.GEOMETRY.types.snowflake = [\"GEOMETRY\"];\n  BaseTypes.JSON.types.snowflake = [\"JSON\"];\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return \"TIMESTAMP\";\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format(\"YYYY-MM-DD HH:mm:ss.SSS\");\n      }\n      return date.format(\"YYYY-MM-DD HH:mm:ss\");\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      } else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return \"VARCHAR(36)\";\n    }\n  }\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return \"TEXT\";\n    }\n  }\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return \"BOOLEAN\";\n    }\n  }\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === \"where\" && typeof value === \"string\" ? value : JSON.stringify(value);\n    }\n  }\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};","map":{"version":3,"names":["momentTz","require","moment","module","exports","BaseTypes","ABSTRACT","prototype","dialectTypes","DATE","types","snowflake","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","toSql","_stringify","date","options","isMoment","_applyTimezone","_length","format","parse","value","string","tz","zone","timezone","toDate","Date","JSONTYPE","operation","stringify"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\snowflake\\data-types.js"],"sourcesContent":["'use strict';\n\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.snowflake.com/doc/refman/5.7/en/data-types.html';\n\n  /**\n   * types: [buffer_type, ...]\n   *\n   * @see buffer_type here https://dev.snowflake.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\n   */\n\n  BaseTypes.DATE.types.snowflake = ['DATETIME'];\n  BaseTypes.STRING.types.snowflake = ['VAR_STRING'];\n  BaseTypes.CHAR.types.snowflake = ['STRING'];\n  BaseTypes.TEXT.types.snowflake = ['BLOB'];\n  BaseTypes.TINYINT.types.snowflake = ['TINY'];\n  BaseTypes.SMALLINT.types.snowflake = ['SHORT'];\n  BaseTypes.MEDIUMINT.types.snowflake = ['INT24'];\n  BaseTypes.INTEGER.types.snowflake = ['LONG'];\n  BaseTypes.BIGINT.types.snowflake = ['LONGLONG'];\n  BaseTypes.FLOAT.types.snowflake = ['FLOAT'];\n  BaseTypes.TIME.types.snowflake = ['TIME'];\n  BaseTypes.DATEONLY.types.snowflake = ['DATE'];\n  BaseTypes.BOOLEAN.types.snowflake = ['TINY'];\n  BaseTypes.BLOB.types.snowflake = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.snowflake = ['NEWDECIMAL'];\n  BaseTypes.UUID.types.snowflake = false;\n  // Enum is not supported\n  // https://docs.snowflake.com/en/sql-reference/data-types-unsupported.html\n  BaseTypes.ENUM.types.snowflake = false;\n  BaseTypes.REAL.types.snowflake = ['DOUBLE'];\n  BaseTypes.DOUBLE.types.snowflake = ['DOUBLE'];\n  BaseTypes.GEOMETRY.types.snowflake = ['GEOMETRY'];\n  BaseTypes.JSON.types.snowflake = ['JSON'];\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP';\n    }\n    _stringify(date, options) {\n      if (!moment.isMoment(date)) {\n        date = this._applyTimezone(date, options);\n      }\n      if (this._length) {\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n      }\n      return date.format('YYYY-MM-DD HH:mm:ss');\n    }\n    static parse(value, options) {\n      value = value.string();\n      if (value === null) {\n        return value;\n      }\n      if (momentTz.tz.zone(options.timezone)) {\n        value = momentTz.tz(value, options.timezone).toDate();\n      }\n      else {\n        value = new Date(`${value} ${options.timezone}`);\n      }\n      return value;\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(value) {\n      return value.string();\n    }\n  }\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      // https://community.snowflake.com/s/question/0D50Z00009LH2fl/what-is-the-best-way-to-store-uuids\n      return 'VARCHAR(36)';\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'BOOLEAN';\n    }\n  }\n\n  class JSONTYPE extends BaseTypes.JSON {\n    _stringify(value, options) {\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\n    }\n  }\n\n  return {\n    TEXT,\n    DATE,\n    BOOLEAN,\n    DATEONLY,\n    UUID,\n    JSON: JSONTYPE\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}