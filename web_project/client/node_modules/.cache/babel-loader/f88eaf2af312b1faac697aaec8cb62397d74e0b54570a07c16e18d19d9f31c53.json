{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst Op = require(\"../../../operators\");\nconst Utils = require(\"../../../utils\");\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: \"=\",\n    [Op.ne]: \"!=\",\n    [Op.gte]: \">=\",\n    [Op.gt]: \">\",\n    [Op.lte]: \"<=\",\n    [Op.lt]: \"<\",\n    [Op.not]: \"IS NOT\",\n    [Op.is]: \"IS\",\n    [Op.in]: \"IN\",\n    [Op.notIn]: \"NOT IN\",\n    [Op.like]: \"LIKE\",\n    [Op.notLike]: \"NOT LIKE\",\n    [Op.iLike]: \"ILIKE\",\n    [Op.notILike]: \"NOT ILIKE\",\n    [Op.startsWith]: \"LIKE\",\n    [Op.endsWith]: \"LIKE\",\n    [Op.substring]: \"LIKE\",\n    [Op.regexp]: \"~\",\n    [Op.notRegexp]: \"!~\",\n    [Op.iRegexp]: \"~*\",\n    [Op.notIRegexp]: \"!~*\",\n    [Op.between]: \"BETWEEN\",\n    [Op.notBetween]: \"NOT BETWEEN\",\n    [Op.overlap]: \"&&\",\n    [Op.contains]: \"@>\",\n    [Op.contained]: \"<@\",\n    [Op.adjacent]: \"-|-\",\n    [Op.strictLeft]: \"<<\",\n    [Op.strictRight]: \">>\",\n    [Op.noExtendRight]: \"&<\",\n    [Op.noExtendLeft]: \"&>\",\n    [Op.any]: \"ANY\",\n    [Op.all]: \"ALL\",\n    [Op.and]: \" AND \",\n    [Op.or]: \" OR \",\n    [Op.col]: \"COL\",\n    [Op.placeholder]: \"$$PLACEHOLDER$$\",\n    [Op.match]: \"@@\"\n  },\n  OperatorsAliasMap: {},\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = __spreadValues({}, aliases);\n    }\n  },\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  }\n};\nmodule.exports = OperatorHelpers;","map":{"version":3,"names":["_","require","Op","Utils","OperatorHelpers","OperatorMap","eq","ne","gte","gt","lte","lt","not","is","in","notIn","like","notLike","iLike","notILike","startsWith","endsWith","substring","regexp","notRegexp","iRegexp","notIRegexp","between","notBetween","overlap","contains","contained","adjacent","strictLeft","strictRight","noExtendRight","noExtendLeft","any","all","and","or","col","placeholder","match","OperatorsAliasMap","setOperatorsAliases","aliases","isEmpty","__spreadValues","_replaceAliases","orig","obj","getOperators","forEach","op","item","isPlainObject","forOwn","prop","module","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\abstract\\query-generator\\operators.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Op = require('../../../operators');\nconst Utils = require('../../../utils');\n\nconst OperatorHelpers = {\n  OperatorMap: {\n    [Op.eq]: '=',\n    [Op.ne]: '!=',\n    [Op.gte]: '>=',\n    [Op.gt]: '>',\n    [Op.lte]: '<=',\n    [Op.lt]: '<',\n    [Op.not]: 'IS NOT',\n    [Op.is]: 'IS',\n    [Op.in]: 'IN',\n    [Op.notIn]: 'NOT IN',\n    [Op.like]: 'LIKE',\n    [Op.notLike]: 'NOT LIKE',\n    [Op.iLike]: 'ILIKE',\n    [Op.notILike]: 'NOT ILIKE',\n    [Op.startsWith]: 'LIKE',\n    [Op.endsWith]: 'LIKE',\n    [Op.substring]: 'LIKE',\n    [Op.regexp]: '~',\n    [Op.notRegexp]: '!~',\n    [Op.iRegexp]: '~*',\n    [Op.notIRegexp]: '!~*',\n    [Op.between]: 'BETWEEN',\n    [Op.notBetween]: 'NOT BETWEEN',\n    [Op.overlap]: '&&',\n    [Op.contains]: '@>',\n    [Op.contained]: '<@',\n    [Op.adjacent]: '-|-',\n    [Op.strictLeft]: '<<',\n    [Op.strictRight]: '>>',\n    [Op.noExtendRight]: '&<',\n    [Op.noExtendLeft]: '&>',\n    [Op.any]: 'ANY',\n    [Op.all]: 'ALL',\n    [Op.and]: ' AND ',\n    [Op.or]: ' OR ',\n    [Op.col]: 'COL',\n    [Op.placeholder]: '$$PLACEHOLDER$$',\n    [Op.match]: '@@'\n  },\n\n  OperatorsAliasMap: {},\n\n  setOperatorsAliases(aliases) {\n    if (!aliases || _.isEmpty(aliases)) {\n      this.OperatorsAliasMap = false;\n    } else {\n      this.OperatorsAliasMap = { ...aliases };\n    }\n  },\n\n  _replaceAliases(orig) {\n    const obj = {};\n    if (!this.OperatorsAliasMap) {\n      return orig;\n    }\n\n    Utils.getOperators(orig).forEach(op => {\n      const item = orig[op];\n      if (_.isPlainObject(item)) {\n        obj[op] = this._replaceAliases(item);\n      } else {\n        obj[op] = item;\n      }\n    });\n\n    _.forOwn(orig, (item, prop) => {\n      prop = this.OperatorsAliasMap[prop] || prop;\n      if (_.isPlainObject(item)) {\n        item = this._replaceAliases(item);\n      }\n      obj[prop] = item;\n    });\n    return obj;\n  }\n};\n\nmodule.exports = OperatorHelpers;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}