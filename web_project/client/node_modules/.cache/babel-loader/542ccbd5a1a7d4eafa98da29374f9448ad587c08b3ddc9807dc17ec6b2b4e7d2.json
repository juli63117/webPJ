{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst Utils = require(\"../../utils\");\nconst util = require(\"util\");\nconst DataTypes = require(\"../../data-types\");\nconst AbstractQueryGenerator = require(\"../abstract/query-generator\");\nconst semver = require(\"semver\");\nconst _ = require(\"lodash\");\nconst POSTGRES_RESERVED_WORDS = \"all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with\".split(\",\");\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n  createDatabaseQuery(databaseName, options) {\n    options = __spreadValues({\n      encoding: null,\n      collate: null\n    }, options);\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : \"\",\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : \"\",\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : \"\",\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : \"\"\n    };\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n  createSchema(schema) {\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n    if (databaseVersion && semver.gte(databaseVersion, \"9.2.0\")) {\n      return `CREATE SCHEMA IF NOT EXISTS ${this.quoteIdentifier(schema)};`;\n    }\n    return `CREATE SCHEMA ${this.quoteIdentifier(schema)};`;\n  }\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)} CASCADE;`;\n  }\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n  versionQuery() {\n    return \"SHOW SERVER_VERSION\";\n  }\n  createTableQuery(tableName, attributes, options) {\n    options = __spreadValues({}, options);\n    const databaseVersion = _.get(this, \"sequelize.options.databaseVersion\", 0);\n    const attrStr = [];\n    let comments = \"\";\n    let columnComments = \"\";\n    const quotedTable = this.quoteTable(tableName);\n    if (options.comment && typeof options.comment === \"string\") {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf(\"COMMENT \");\n      if (i !== -1) {\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n    let attributesClause = attrStr.join(\", \");\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(\", \")})`;\n        }\n      });\n    }\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes(\"PRIMARY KEY\")) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(\",\");\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, \"9.1.0\") ? \"IF NOT EXISTS \" : \"\"}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? \" CASCADE\" : \"\"};`;\n  }\n  showTablesQuery() {\n    const schema = this.options.schema || \"public\";\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';`;\n  }\n  tableExistsQuery(tableName) {\n    const table = tableName.tableName || tableName;\n    const schema = tableName.schema || \"public\";\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_name = ${this.escape(table)}`;\n  }\n  describeTableQuery(tableName, schema) {\n    schema = schema || this.options.schema || \"public\";\n    return `SELECT pk.constraint_type as \"Constraint\",c.column_name as \"Field\", c.column_default as \"Default\",c.is_nullable as \"Null\", (CASE WHEN c.udt_name = 'hstore' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN '(' || c.character_maximum_length || ')' ELSE '' END) as \"Type\", (SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", (SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" FROM information_schema.columns c LEFT JOIN (SELECT tc.table_schema, tc.table_name, cu.column_name, tc.constraint_type FROM information_schema.TABLE_CONSTRAINTS tc JOIN information_schema.KEY_COLUMN_USAGE  cu ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name and tc.constraint_name=cu.constraint_name and tc.constraint_type='PRIMARY KEY') pk ON pk.table_schema=c.table_schema AND pk.table_name=c.table_name AND pk.column_name=c.column_name WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)}`;\n  }\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== \"string\") {\n      return false;\n    }\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf(\"(\");\n        hasJsonFunction = true;\n        continue;\n      }\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === \"(\") {\n          openingBrackets++;\n        } else if (capturedToken === \")\") {\n          closingBrackets++;\n        } else if (capturedToken === \";\") {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n      break;\n    }\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n    return hasJsonFunction;\n  }\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\n        return conditions.join(\" AND \");\n      }\n      if (smth.path) {\n        let str;\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n        if (smth.value) {\n          str += util.format(\" = %s\", this.escape(smth.value));\n        }\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, {\n      context: \"addColumn\",\n      table,\n      key\n    });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n    return query;\n  }\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = \"\";\n      if (definition.includes(\"NOT NULL\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n        definition = definition.replace(\"NOT NULL\", \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n      if (definition.includes(\"DEFAULT\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n        definition = definition.replace(/(DEFAULT[^;]+)/, \"\").trim();\n      } else if (!definition.includes(\"REFERENCES\")) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n      if (attributes[attributeName].startsWith(\"ENUM(\")) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, {\n          schema: false\n        }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, \"\");\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace(\"ALTER COLUMN\", \"\");\n      }\n      if (definition.includes(\"REFERENCES\")) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, \"\");\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace(\"ALTER COLUMN\", \"\");\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n      sql.push(attrSql);\n    }\n    return sql.join(\"\");\n  }\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(\", \")};`;\n  }\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || \"testfunc\";\n    language = language || \"plpgsql\";\n    returns = returns ? `RETURNS ${returns}` : \"\";\n    parameters = parameters || \"\";\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n  truncateTableQuery(tableName, options = {}) {\n    return [`TRUNCATE ${this.quoteTable(tableName)}`, options.restartIdentity ? \" RESTART IDENTITY\" : \"\", options.cascade ? \" CASCADE\" : \"\"].join(\"\");\n  }\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : \"\";\n    let primaryKeys = \"\";\n    let primaryKeysSelection = \"\";\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n    if (options.limit) {\n      if (!model) {\n        throw new Error(\"Cannot LIMIT delete without a model.\");\n      }\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(\",\");\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n  showIndexesQuery(tableName) {\n    let schemaJoin = \"\";\n    let schemaWhere = \"\";\n    if (typeof tableName !== \"string\") {\n      schemaJoin = \", pg_namespace s\";\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n    return `SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;`;\n  }\n  showConstraintsQuery(tableName) {\n    return ['SELECT constraint_catalog AS \"constraintCatalog\",', 'constraint_schema AS \"constraintSchema\",', 'constraint_name AS \"constraintName\",', 'table_catalog AS \"tableCatalog\",', 'table_schema AS \"tableSchema\",', 'table_name AS \"tableName\",', 'constraint_type AS \"constraintType\",', 'is_deferrable AS \"isDeferrable\",', 'initially_deferred AS \"initiallyDeferred\"', \"from INFORMATION_SCHEMA.table_constraints\", `WHERE table_name='${tableName}';`].join(\" \");\n  }\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n    if (typeof indexName !== \"string\") {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join(\"_\")}`);\n    }\n    return [\"DROP INDEX\", options && options.concurrently && \"CONCURRENTLY\", `IF EXISTS ${this.quoteIdentifiers(indexName)}`].filter(Boolean).join(\" \");\n  }\n  addLimitAndOffset(options) {\n    let fragment = \"\";\n    if (options.limit != null) {\n      fragment += \" LIMIT \" + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += \" OFFSET \" + this.escape(options.offset);\n    }\n    return fragment;\n  }\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    let type;\n    if (attribute.type instanceof DataTypes.ENUM || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(\", \")})`;\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += \"[]\";\n        }\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n    if (!type) {\n      type = attribute.type;\n    }\n    let sql = type.toString();\n    if (Object.prototype.hasOwnProperty.call(attribute, \"allowNull\") && !attribute.allowNull) {\n      sql += \" NOT NULL\";\n    }\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += \" GENERATED BY DEFAULT AS IDENTITY\";\n      } else {\n        sql += \" SERIAL\";\n      }\n    }\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n    if (attribute.unique === true) {\n      sql += \" UNIQUE\";\n    }\n    if (attribute.primaryKey) {\n      sql += \" PRIMARY KEY\";\n    }\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n      if (options.schema) {\n        schema = options.schema;\n      } else if ((!attribute.references.model || typeof attribute.references.model == \"string\") && options.table && options.table.schema) {\n        schema = options.table.schema;\n      }\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n      let referencesKey;\n      if (!options.withoutForeignKeyConstraints) {\n        if (attribute.references.key) {\n          referencesKey = this.quoteIdentifiers(attribute.references.key);\n        } else {\n          referencesKey = this.quoteIdentifier(\"id\");\n        }\n        sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n        if (attribute.onDelete) {\n          sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n        }\n        if (attribute.onUpdate) {\n          sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n        }\n        if (attribute.references.deferrable) {\n          sql += ` ${attribute.references.deferrable.toString(this)}`;\n        }\n      }\n    }\n    if (attribute.comment && typeof attribute.comment === \"string\") {\n      if (options && [\"addColumn\", \"changeColumn\"].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n    return sql;\n  }\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n  setConstraintQuery(columns, type) {\n    let columnFragment = \"ALL\";\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(\", \");\n    }\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, \"DEFERRED\");\n  }\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, \"IMMEDIATE\");\n  }\n  attributesToSQL(attributes, options) {\n    const result = {};\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, __spreadValues({\n        key\n      }, options));\n    }\n    return result;\n  }\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : \"\"} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error(\"createFunction missing some parameters. Did you pass functionName, returnType, language and body?\");\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : \"\";\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n    const statement = options && options.force ? \"CREATE OR REPLACE FUNCTION\" : \"CREATE FUNCTION\";\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error(\"requires functionName\");\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n  _expandFunctionParamList(params) {\n    if (params === void 0 || !Array.isArray(params)) {\n      throw new Error(\"_expandFunctionParamList: function parameters array required, including an empty one for no arguments\");\n    }\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) {\n          paramDef.push(curParam.direction);\n        }\n        if (curParam.name) {\n          paramDef.push(curParam.name);\n        }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error(\"function or trigger used with a parameter without any type\");\n      }\n      const joined = paramDef.join(\" \");\n      if (joined) paramList.push(joined);\n    });\n    return paramList.join(\", \");\n  }\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error(\"_expandFunctionVariableList: function variables must be an array\");\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error(\"function variable must have a name and type\");\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += \";\";\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(\" \");\n  }\n  expandOptions(options) {\n    return options === void 0 || _.isEmpty(options) ? \"\" : options.join(\" \");\n  }\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      \"after\": \"AFTER\",\n      \"before\": \"BEFORE\",\n      \"instead_of\": \"INSTEAD OF\",\n      \"after_constraint\": \"AFTER\"\n    };\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n    return EVENT_DECODER[eventSpecifier];\n  }\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === \"after_constraint\" ? \"CONSTRAINT \" : \"\";\n  }\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error(\"no table change events specified to trigger on\");\n    }\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        \"insert\": \"INSERT\",\n        \"update\": \"UPDATE\",\n        \"delete\": \"DELETE\",\n        \"truncate\": \"TRUNCATE\"\n      };\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === \"UPDATE\") {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(\", \")}`;\n        }\n      }\n      return eventSpec;\n    }).join(\" OR \");\n  }\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n    return enumName;\n  }\n  pgListEnums(tableName, attrName, options) {\n    let enumName = \"\";\n    const tableDetails = this.extractTableDetails(tableName, options);\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, {\n        schema: false\n      }).replace(/\"/g, \"'\")}`;\n    }\n    return `SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t JOIN pg_enum e ON t.oid = e.enumtypid JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(\", \")})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n    let sql = `DO ${this.escape(`BEGIN CREATE TYPE ${enumName} AS ${values}; EXCEPTION WHEN duplicate_object THEN null; END`)};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n    if (semver.gte(this.sequelize.options.databaseVersion, \"9.3.0\")) {\n      sql += \"IF NOT EXISTS \";\n    }\n    sql += this.escape(value);\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n    return sql;\n  }\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n  fromArray(text) {\n    text = text.replace(/^{/, \"\").replace(/}$/, \"\");\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n    if (matches.length < 1) {\n      return [];\n    }\n    matches = matches.map(m => m.replace(/\",$/, \"\").replace(/,$/, \"\").replace(/(^\"|\"$)/g, \"\"));\n    return matches.slice(0, -1);\n  }\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes(\"PRIMARY KEY\")) {\n      dataType = dataType.replace(\"PRIMARY KEY\", \"\");\n    }\n    if (dataType.includes(\"SERIAL\")) {\n      if (dataType.includes(\"BIGINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"BIGSERIAL\");\n        dataType = dataType.replace(\"BIGINT\", \"\");\n      } else if (dataType.includes(\"SMALLINT\")) {\n        dataType = dataType.replace(\"SERIAL\", \"SMALLSERIAL\");\n        dataType = dataType.replace(\"SMALLINT\", \"\");\n      } else {\n        dataType = dataType.replace(\"INTEGER\", \"\");\n      }\n      dataType = dataType.replace(\"NOT NULL\", \"\");\n    }\n    if (dataType.startsWith(\"ENUM(\")) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n    return dataType;\n  }\n  getForeignKeysQuery(tableName) {\n    return `SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n  _getForeignKeyReferencesQueryPrefix() {\n    return \"SELECT DISTINCT tc.constraint_name as constraint_name, tc.constraint_schema as constraint_schema, tc.constraint_catalog as constraint_catalog, tc.table_name as table_name,tc.table_schema as table_schema,tc.table_catalog as table_catalog,tc.initially_deferred as initially_deferred,tc.is_deferrable as is_deferrable,kcu.column_name as column_name,ccu.table_schema  AS referenced_table_schema,ccu.table_catalog  AS referenced_table_catalog,ccu.table_name  AS referenced_table_name,ccu.column_name AS referenced_column_name FROM information_schema.table_constraints AS tc JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name \";\n  }\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${catalogName ? ` AND tc.table_catalog = '${catalogName}'` : \"\"}${schemaName ? ` AND tc.table_schema = '${schemaName}'` : \"\"}`;\n  }\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()}WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${schema ? ` AND tc.table_schema = '${schema}'` : \"\"}`;\n  }\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n    if (optForceQuote === true || optQuoteIdentifiers !== false || identifier.includes(\".\") || identifier.includes(\"->\") || POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())) {\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\nmodule.exports = PostgresQueryGenerator;","map":{"version":3,"names":["Utils","require","util","DataTypes","AbstractQueryGenerator","semver","_","POSTGRES_RESERVED_WORDS","split","PostgresQueryGenerator","setSearchPath","searchPath","createDatabaseQuery","databaseName","options","__spreadValues","encoding","collate","values","database","quoteTable","escape","collation","ctype","template","dropDatabaseQuery","createSchema","schema","databaseVersion","get","gte","quoteIdentifier","dropSchema","showSchemasQuery","versionQuery","createTableQuery","tableName","attributes","attrStr","comments","columnComments","quotedTable","comment","attr","quotedAttr","i","indexOf","escapedCommentText","substring","dataType","dataTypeMapping","push","attributesClause","join","uniqueKeys","each","columns","customIndex","fields","map","field","pks","reduce","acc","attribute","key","includes","length","dropTableQuery","cascade","showTablesQuery","tableExistsQuery","table","describeTableQuery","_checkValidJsonStatement","stmt","jsonFunctionRegex","jsonOperatorRegex","tokenCaptureRegex","currentIndex","openingBrackets","closingBrackets","hasJsonFunction","hasInvalidToken","string","substr","functionMatches","exec","operatorMatches","tokenMatches","capturedToken","Error","handleSequelizeMethod","smth","factory","prepend","Json","conditions","parseConditionObject","condition","jsonPathExtractionQuery","path","tail","value","str","paths","toPath","column","shift","format","call","addColumnQuery","dbDataType","attributeToSQL","context","type","definition","quotedKey","extractTableDetails","query","ENUM","pgEnum","removeColumnQuery","attributeName","quotedTableName","quotedAttributeName","changeColumnQuery","subQuery","sql","attrSql","replace","trim","match","startsWith","pgEnumName","renameColumnQuery","attrBefore","attrString","fn","fnName","parameters","body","returns","language","truncateTableQuery","restartIdentity","deleteQuery","where","model","whereClause","getWhereConditions","limit","primaryKeys","primaryKeysSelection","Object","pk","primaryKeyAttributes","showIndexesQuery","schemaJoin","schemaWhere","showConstraintsQuery","removeIndexQuery","indexNameOrAttributes","indexName","underscore","concurrently","quoteIdentifiers","filter","Boolean","addLimitAndOffset","fragment","offset","isPlainObject","ARRAY","enumType","Array","isArray","toString","prototype","hasOwnProperty","allowNull","autoIncrement","autoIncrementIdentity","defaultValueSchemable","defaultValue","unique","primaryKey","references","referencesTable","addSchema","_schema","referencesKey","withoutForeignKeyConstraints","onDelete","toUpperCase","onUpdate","deferrable","deferConstraintsQuery","setConstraintQuery","columnFragment","setDeferredQuery","setImmediateQuery","attributesToSQL","result","createTrigger","triggerName","eventType","fireOnSpec","functionName","functionParams","optionsArray","decodedEventType","decodeTriggerEventType","eventSpec","expandTriggerEventSpec","expandedOptions","expandOptions","paramList","_expandFunctionParamList","triggerEventTypeIsConstraint","dropTrigger","renameTrigger","oldTriggerName","newTriggerName","createFunction","params","returnType","variableList","variables","_expandFunctionVariableList","expandedOptionsArray","statement","force","dropFunction","renameFunction","oldFunctionName","newFunctionName","pgEscapeAndQuote","val","removeTicks","forEach","curParam","paramDef","direction","name","joined","variableDefinitions","variable","variableDefinition","default","isEmpty","eventSpecifier","EVENT_DECODER","fireValue","fireKey","EVENT_MAP","tableDetails","enumName","addTicks","generateEnumName","delimiter","pgListEnums","attrName","pgEnumDrop","pgEnumAdd","sequelize","before","after","fromArray","text","matches","m","slice","getForeignKeysQuery","_getForeignKeyReferencesQueryPrefix","getForeignKeyReferencesQuery","catalogName","schemaName","getForeignKeyReferenceQuery","columnName","dropForeignKeyQuery","foreignKey","identifier","optForceQuote","optQuoteIdentifiers","rawIdentifier","toLowerCase","module","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\postgres\\query-generator.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst DataTypes = require('../../data-types');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst semver = require('semver');\nconst _ = require('lodash');\n\n/**\n * list of reserved words in PostgreSQL 10\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\n *\n * @private\n */\nconst POSTGRES_RESERVED_WORDS = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\n\nclass PostgresQueryGenerator extends AbstractQueryGenerator {\n  setSearchPath(searchPath) {\n    return `SET search_path to ${searchPath};`;\n  }\n\n  createDatabaseQuery(databaseName, options) {\n    options = {\n      encoding: null,\n      collate: null,\n      ...options\n    };\n\n    const values = {\n      database: this.quoteTable(databaseName),\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : ''\n    };\n\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\n  }\n\n  dropDatabaseQuery(databaseName) {\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\n  }\n\n  createSchema(schema) {\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\n      return `CREATE SCHEMA IF NOT EXISTS ${this.quoteIdentifier(schema)};`;\n    }\n\n    return `CREATE SCHEMA ${this.quoteIdentifier(schema)};`;\n  }\n\n  dropSchema(schema) {\n    return `DROP SCHEMA IF EXISTS ${this.quoteIdentifier(schema)} CASCADE;`;\n  }\n\n  showSchemasQuery() {\n    return \"SELECT schema_name FROM information_schema.schemata WHERE schema_name <> 'information_schema' AND schema_name != 'public' AND schema_name !~ E'^pg_';\";\n  }\n\n  versionQuery() {\n    return 'SHOW SERVER_VERSION';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    options = { ...options };\n\n    //Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\n    const attrStr = [];\n    let comments = '';\n    let columnComments = '';\n\n    const quotedTable = this.quoteTable(tableName);\n\n    if (options.comment && typeof options.comment === 'string') {\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\n    }\n\n    for (const attr in attributes) {\n      const quotedAttr = this.quoteIdentifier(attr);\n      const i = attributes[attr].indexOf('COMMENT ');\n      if (i !== -1) {\n        // Move comment to a separate query\n        const escapedCommentText = this.escape(attributes[attr].substring(i + 8));\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\n        attributes[attr] = attributes[attr].substring(0, i);\n      }\n\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\n      attrStr.push(`${quotedAttr} ${dataType}`);\n    }\n\n\n    let attributesClause = attrStr.join(', ');\n\n    if (options.uniqueKeys) {\n      _.each(options.uniqueKeys, columns => {\n        if (columns.customIndex) {\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\n      if (attribute.includes('PRIMARY KEY')) {\n        acc.push(this.quoteIdentifier(key));\n      }\n      return acc;\n    }, []).join(',');\n\n    if (pks.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pks})`;\n    }\n\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\n  }\n\n  dropTableQuery(tableName, options) {\n    options = options || {};\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\n  }\n\n  showTablesQuery() {\n    const schema = this.options.schema || 'public';\n\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_type LIKE '%TABLE' AND table_name != 'spatial_ref_sys';`;\n  }\n\n  tableExistsQuery(tableName) {\n    const table = tableName.tableName || tableName;\n    const schema = tableName.schema || 'public';\n\n    return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${this.escape(schema)} AND table_name = ${this.escape(table)}`;\n  }\n\n  describeTableQuery(tableName, schema) {\n    schema = schema || this.options.schema || 'public';\n\n    return 'SELECT ' +\n      'pk.constraint_type as \"Constraint\",' +\n      'c.column_name as \"Field\", ' +\n      'c.column_default as \"Default\",' +\n      'c.is_nullable as \"Null\", ' +\n      '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", ' +\n      '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", ' +\n      '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" ' +\n      'FROM information_schema.columns c ' +\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ' +\n      'cu.column_name, tc.constraint_type ' +\n      'FROM information_schema.TABLE_CONSTRAINTS tc ' +\n      'JOIN information_schema.KEY_COLUMN_USAGE  cu ' +\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ' +\n      'and tc.constraint_name=cu.constraint_name ' +\n      'and tc.constraint_type=\\'PRIMARY KEY\\') pk ' +\n      'ON pk.table_schema=c.table_schema ' +\n      'AND pk.table_name=c.table_name ' +\n      'AND pk.column_name=c.column_name ' +\n      `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)}`;\n  }\n\n  /**\n   * Check whether the statmement is json function or simple path\n   *\n   * @param   {string}  stmt  The statement to validate\n   * @returns {boolean}       true if the given statement is json function\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\n   */\n  _checkValidJsonStatement(stmt) {\n    if (typeof stmt !== 'string') {\n      return false;\n    }\n\n    // https://www.postgresql.org/docs/current/static/functions-json.html\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[|&]?|\\|{2}|#-)/i;\n    const tokenCaptureRegex = /^\\s*((?:([`\"'])(?:(?!\\2).|\\2{2})*\\2)|[\\w\\d\\s]+|[().,;+-])/i;\n\n    let currentIndex = 0;\n    let openingBrackets = 0;\n    let closingBrackets = 0;\n    let hasJsonFunction = false;\n    let hasInvalidToken = false;\n\n    while (currentIndex < stmt.length) {\n      const string = stmt.substr(currentIndex);\n      const functionMatches = jsonFunctionRegex.exec(string);\n      if (functionMatches) {\n        currentIndex += functionMatches[0].indexOf('(');\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const operatorMatches = jsonOperatorRegex.exec(string);\n      if (operatorMatches) {\n        currentIndex += operatorMatches[0].length;\n        hasJsonFunction = true;\n        continue;\n      }\n\n      const tokenMatches = tokenCaptureRegex.exec(string);\n      if (tokenMatches) {\n        const capturedToken = tokenMatches[1];\n        if (capturedToken === '(') {\n          openingBrackets++;\n        } else if (capturedToken === ')') {\n          closingBrackets++;\n        } else if (capturedToken === ';') {\n          hasInvalidToken = true;\n          break;\n        }\n        currentIndex += tokenMatches[0].length;\n        continue;\n      }\n\n      break;\n    }\n\n    // Check invalid json statement\n    hasInvalidToken |= openingBrackets !== closingBrackets;\n    if (hasJsonFunction && hasInvalidToken) {\n      throw new Error(`Invalid json statement: ${stmt}`);\n    }\n\n    // return true if the statement has valid json function\n    return hasJsonFunction;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition =>\n          `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`\n        );\n\n        return conditions.join(' AND ');\n      }\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the postgres json syntax\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json property accessors\n          const paths = _.toPath(smth.path);\n          const column = paths.shift();\n          str = this.jsonPathExtractionQuery(column, paths);\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    }\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\n  }\n\n  addColumnQuery(table, key, attribute) {\n    const dbDataType = this.attributeToSQL(attribute, { context: 'addColumn', table, key });\n    const dataType = attribute.type || attribute;\n    const definition = this.dataTypeMapping(table, key, dbDataType);\n    const quotedKey = this.quoteIdentifier(key);\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\n\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\n\n    if (dataType instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType) + query;\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\n      query = this.pgEnum(table, key, dataType.type) + query;\n    }\n\n    return query;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\n    const sql = [];\n    for (const attributeName in attributes) {\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\n      let attrSql = '';\n\n      if (definition.includes('NOT NULL')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\n\n        definition = definition.replace('NOT NULL', '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\n      }\n\n      if (definition.includes('DEFAULT')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\n\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\n      } else if (!definition.includes('REFERENCES')) {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\n      }\n\n      if (attributes[attributeName].startsWith('ENUM(')) {\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\n      }\n\n      if (definition.match(/UNIQUE;*$/)) {\n        definition = definition.replace(/UNIQUE;*$/, '');\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\n      }\n\n      if (definition.includes('REFERENCES')) {\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\n      } else {\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\n      }\n\n      sql.push(attrSql);\n    }\n\n    return sql.join('');\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n\n    const attrString = [];\n\n    for (const attributeName in attributes) {\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  fn(fnName, tableName, parameters, body, returns, language) {\n    fnName = fnName || 'testfunc';\n    language = language || 'plpgsql';\n    returns = returns ? `RETURNS ${returns}` : '';\n    parameters = parameters || '';\n\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\n  }\n\n  truncateTableQuery(tableName, options = {}) {\n    return [\n      `TRUNCATE ${this.quoteTable(tableName)}`,\n      options.restartIdentity ? ' RESTART IDENTITY' : '',\n      options.cascade ? ' CASCADE' : ''\n    ].join('');\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let whereClause = this.getWhereConditions(where, null, model, options);\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit)}` : '';\n    let primaryKeys = '';\n    let primaryKeysSelection = '';\n\n    if (whereClause) {\n      whereClause = ` WHERE ${whereClause}`;\n    }\n\n    if (options.limit) {\n      if (!model) {\n        throw new Error('Cannot LIMIT delete without a model.');\n      }\n\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\n\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\n      primaryKeysSelection = pks;\n\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\n    }\n    return `DELETE FROM ${table}${whereClause}`;\n  }\n\n  showIndexesQuery(tableName) {\n    let schemaJoin = '';\n    let schemaWhere = '';\n    if (typeof tableName !== 'string') {\n      schemaJoin = ', pg_namespace s';\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\n      tableName = tableName.tableName;\n    }\n\n    // This is ARCANE!\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, ' +\n      'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) ' +\n      `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} ` +\n      'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND ' +\n      `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} ` +\n      'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\n  }\n\n  showConstraintsQuery(tableName) {\n    //Postgres converts camelCased alias to lowercase unless quoted\n    return [\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\n      'constraint_schema AS \"constraintSchema\",',\n      'constraint_name AS \"constraintName\",',\n      'table_catalog AS \"tableCatalog\",',\n      'table_schema AS \"tableSchema\",',\n      'table_name AS \"tableName\",',\n      'constraint_type AS \"constraintType\",',\n      'is_deferrable AS \"isDeferrable\",',\n      'initially_deferred AS \"initiallyDeferred\"',\n      'from INFORMATION_SCHEMA.table_constraints',\n      `WHERE table_name='${tableName}';`\n    ].join(' ');\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return [\n      'DROP INDEX',\n      options && options.concurrently && 'CONCURRENTLY',\n      `IF EXISTS ${this.quoteIdentifiers(indexName)}`\n    ].filter(Boolean).join(' ');\n  }\n\n  addLimitAndOffset(options) {\n    let fragment = '';\n    /* eslint-disable */\n    if (options.limit != null) {\n      fragment += ' LIMIT ' + this.escape(options.limit);\n    }\n    if (options.offset != null) {\n      fragment += ' OFFSET ' + this.escape(options.offset);\n    }\n    /* eslint-enable */\n\n    return fragment;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n\n    let type;\n    if (\n      attribute.type instanceof DataTypes.ENUM ||\n      attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM\n    ) {\n      const enumType = attribute.type.type || attribute.type;\n      let values = attribute.values;\n\n      if (enumType.values && !attribute.values) {\n        values = enumType.values;\n      }\n\n      if (Array.isArray(values) && values.length > 0) {\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\n\n        if (attribute.type instanceof DataTypes.ARRAY) {\n          type += '[]';\n        }\n\n      } else {\n        throw new Error(\"Values for ENUM haven't been defined.\");\n      }\n    }\n\n    if (!type) {\n      type = attribute.type;\n    }\n\n    let sql = type.toString();\n\n    if (Object.prototype.hasOwnProperty.call(attribute, 'allowNull') && !attribute.allowNull) {\n      sql += ' NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      if (attribute.autoIncrementIdentity) {\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\n      } else {\n        sql += ' SERIAL';\n      }\n    }\n\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\n    }\n\n    if (attribute.unique === true) {\n      sql += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      sql += ' PRIMARY KEY';\n    }\n\n    if (attribute.references) {\n      let referencesTable = this.quoteTable(attribute.references.model);\n      let schema;\n\n      if (options.schema) {\n        schema = options.schema;\n      } else if (\n        (!attribute.references.model || typeof attribute.references.model == 'string')\n        && options.table\n        && options.table.schema\n      ) {\n        schema = options.table.schema;\n      }\n\n      if (schema) {\n        referencesTable = this.quoteTable(this.addSchema({\n          tableName: referencesTable,\n          _schema: schema\n        }));\n      }\n\n      let referencesKey;\n\n      if (!options.withoutForeignKeyConstraints) {\n        if (attribute.references.key) {\n          referencesKey = this.quoteIdentifiers(attribute.references.key);\n        } else {\n          referencesKey = this.quoteIdentifier('id');\n        }\n\n        sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\n\n        if (attribute.onDelete) {\n          sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n        }\n\n        if (attribute.onUpdate) {\n          sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n        }\n\n        if (attribute.references.deferrable) {\n          sql += ` ${attribute.references.deferrable.toString(this)}`;\n        }\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      if (options && ['addColumn', 'changeColumn'].includes(options.context)) {\n        const quotedAttr = this.quoteIdentifier(options.key);\n        const escapedCommentText = this.escape(attribute.comment);\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\n      } else {\n        // for createTable event which does it's own parsing\n        // TODO: centralize creation of comment statements here\n        sql += ` COMMENT ${attribute.comment}`;\n      }\n    }\n\n    return sql;\n  }\n\n  deferConstraintsQuery(options) {\n    return options.deferrable.toString(this);\n  }\n\n  setConstraintQuery(columns, type) {\n    let columnFragment = 'ALL';\n\n    if (columns) {\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\n    }\n\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\n  }\n\n  setDeferredQuery(columns) {\n    return this.setConstraintQuery(columns, 'DEFERRED');\n  }\n\n  setImmediateQuery(columns) {\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });\n    }\n\n    return result;\n  }\n\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\n    const decodedEventType = this.decodeTriggerEventType(eventType);\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\n    const expandedOptions = this.expandOptions(optionsArray);\n    const paramList = this._expandFunctionParamList(functionParams);\n\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${\n      eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\n  }\n\n  dropTrigger(tableName, triggerName) {\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\n  }\n\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\n  }\n\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\n    if (!functionName || !returnType || !language || !body) throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\n\n    const paramList = this._expandFunctionParamList(params);\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\n    const expandedOptionsArray = this.expandOptions(optionsArray);\n\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\n\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\n  }\n\n  dropFunction(functionName, params) {\n    if (!functionName) throw new Error('requires functionName');\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\n    const paramList = this._expandFunctionParamList(params);\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\n  }\n\n  renameFunction(oldFunctionName, params, newFunctionName) {\n    const paramList = this._expandFunctionParamList(params);\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\n  }\n\n  pgEscapeAndQuote(val) {\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), \"'\"));\n  }\n\n  _expandFunctionParamList(params) {\n    if (params === undefined || !Array.isArray(params)) {\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\n    }\n\n    const paramList = [];\n    params.forEach(curParam => {\n      const paramDef = [];\n      if (curParam.type) {\n        if (curParam.direction) { paramDef.push(curParam.direction); }\n        if (curParam.name) { paramDef.push(curParam.name); }\n        paramDef.push(curParam.type);\n      } else {\n        throw new Error('function or trigger used with a parameter without any type');\n      }\n\n      const joined = paramDef.join(' ');\n      if (joined) paramList.push(joined);\n\n    });\n\n    return paramList.join(', ');\n  }\n\n  _expandFunctionVariableList(variables) {\n    if (!Array.isArray(variables)) {\n      throw new Error('_expandFunctionVariableList: function variables must be an array');\n    }\n    const variableDefinitions = [];\n    variables.forEach(variable => {\n      if (!variable.name || !variable.type) {\n        throw new Error('function variable must have a name and type');\n      }\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\n      if (variable.default) {\n        variableDefinition += ` := ${variable.default}`;\n      }\n      variableDefinition += ';';\n      variableDefinitions.push(variableDefinition);\n    });\n    return variableDefinitions.join(' ');\n  }\n\n  expandOptions(options) {\n    return options === undefined || _.isEmpty(options) ?\n      '' : options.join(' ');\n  }\n\n  decodeTriggerEventType(eventSpecifier) {\n    const EVENT_DECODER = {\n      'after': 'AFTER',\n      'before': 'BEFORE',\n      'instead_of': 'INSTEAD OF',\n      'after_constraint': 'AFTER'\n    };\n\n    if (!EVENT_DECODER[eventSpecifier]) {\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\n    }\n\n    return EVENT_DECODER[eventSpecifier];\n  }\n\n  triggerEventTypeIsConstraint(eventSpecifier) {\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\n  }\n\n  expandTriggerEventSpec(fireOnSpec) {\n    if (_.isEmpty(fireOnSpec)) {\n      throw new Error('no table change events specified to trigger on');\n    }\n\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\n      const EVENT_MAP = {\n        'insert': 'INSERT',\n        'update': 'UPDATE',\n        'delete': 'DELETE',\n        'truncate': 'TRUNCATE'\n      };\n\n      if (!EVENT_MAP[fireValue]) {\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\n      }\n\n      let eventSpec = EVENT_MAP[fireValue];\n      if (eventSpec === 'UPDATE') {\n        if (Array.isArray(fireValue) && fireValue.length > 0) {\n          eventSpec += ` OF ${fireValue.join(', ')}`;\n        }\n      }\n\n      return eventSpec;\n    }).join(' OR ');\n  }\n\n  pgEnumName(tableName, attr, options) {\n    options = options || {};\n\n    const tableDetails = this.extractTableDetails(tableName, options);\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\n\n    // pgListEnums requires the enum name only, without the schema\n    if (options.schema !== false && tableDetails.schema) {\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\n    }\n\n    return enumName;\n  }\n\n  pgListEnums(tableName, attrName, options) {\n    let enumName = '';\n    const tableDetails = this.extractTableDetails(tableName, options);\n\n    if (tableDetails.tableName && attrName) {\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, \"'\")}`;\n    }\n\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t ' +\n      'JOIN pg_enum e ON t.oid = e.enumtypid ' +\n      'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace ' +\n      `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\n  }\n\n  pgEnum(tableName, attr, dataType, options) {\n    const enumName = this.pgEnumName(tableName, attr, options);\n    let values;\n\n    if (dataType.values) {\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\n    } else {\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\n    }\n\n    let sql = `DO ${this.escape(`BEGIN CREATE TYPE ${enumName} AS ${values}; EXCEPTION WHEN duplicate_object THEN null; END`)};`;\n    if (!!options && options.force === true) {\n      sql = this.pgEnumDrop(tableName, attr) + sql;\n    }\n    return sql;\n  }\n\n  pgEnumAdd(tableName, attr, value, options) {\n    const enumName = this.pgEnumName(tableName, attr);\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\n\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\n      sql += 'IF NOT EXISTS ';\n    }\n    sql += this.escape(value);\n\n    if (options.before) {\n      sql += ` BEFORE ${this.escape(options.before)}`;\n    } else if (options.after) {\n      sql += ` AFTER ${this.escape(options.after)}`;\n    }\n\n    return sql;\n  }\n\n  pgEnumDrop(tableName, attr, enumName) {\n    enumName = enumName || this.pgEnumName(tableName, attr);\n    return `DROP TYPE IF EXISTS ${enumName}; `;\n  }\n\n  fromArray(text) {\n    text = text.replace(/^{/, '').replace(/}$/, '');\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/ig);\n\n    if (matches.length < 1) {\n      return [];\n    }\n\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\n\n    return matches.slice(0, -1);\n  }\n\n  dataTypeMapping(tableName, attr, dataType) {\n    if (dataType.includes('PRIMARY KEY')) {\n      dataType = dataType.replace('PRIMARY KEY', '');\n    }\n\n    if (dataType.includes('SERIAL')) {\n      if (dataType.includes('BIGINT')) {\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\n        dataType = dataType.replace('BIGINT', '');\n      } else if (dataType.includes('SMALLINT')) {\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\n        dataType = dataType.replace('SMALLINT', '');\n      } else {\n        dataType = dataType.replace('INTEGER', '');\n      }\n      dataType = dataType.replace('NOT NULL', '');\n    }\n\n    if (dataType.startsWith('ENUM(')) {\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\n    }\n\n    return dataType;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(tableName) {\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r ' +\n      `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\n  }\n\n  /**\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\n   *\n   * @returns {string}\n   */\n  _getForeignKeyReferencesQueryPrefix() {\n    return 'SELECT ' +\n      'DISTINCT tc.constraint_name as constraint_name, ' +\n      'tc.constraint_schema as constraint_schema, ' +\n      'tc.constraint_catalog as constraint_catalog, ' +\n      'tc.table_name as table_name,' +\n      'tc.table_schema as table_schema,' +\n      'tc.table_catalog as table_catalog,' +\n      'tc.initially_deferred as initially_deferred,' +\n      'tc.is_deferrable as is_deferrable,' +\n      'kcu.column_name as column_name,' +\n      'ccu.table_schema  AS referenced_table_schema,' +\n      'ccu.table_catalog  AS referenced_table_catalog,' +\n      'ccu.table_name  AS referenced_table_name,' +\n      'ccu.column_name AS referenced_column_name ' +\n      'FROM information_schema.table_constraints AS tc ' +\n      'JOIN information_schema.key_column_usage AS kcu ' +\n      'ON tc.constraint_name = kcu.constraint_name ' +\n      'JOIN information_schema.constraint_column_usage AS ccu ' +\n      'ON ccu.constraint_name = tc.constraint_name ';\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys details of a table.\n   *\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\n   *\n   * @param {string} tableName\n   * @param {string} catalogName\n   * @param {string} schemaName\n   */\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${\n      catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''\n    }${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\n  }\n\n  getForeignKeyReferenceQuery(table, columnName) {\n    const tableName = table.tableName || table;\n    const schema = table.schema;\n    return `${this._getForeignKeyReferencesQueryPrefix()\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${\n      schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n  /**\n   * Quote identifier in sql clause\n   *\n   * @param {string} identifier\n   * @param {boolean} force\n   *\n   * @returns {string}\n   */\n  quoteIdentifier(identifier, force) {\n    const optForceQuote = force || false;\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\n\n    if (\n      optForceQuote === true ||\n      optQuoteIdentifiers !== false ||\n      identifier.includes('.') ||\n      identifier.includes('->') ||\n      POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())\n    ) {\n      // In Postgres if tables or attributes are created double-quoted,\n      // they are also case sensitive. If they contain any uppercase\n      // characters, they must always be double-quoted. This makes it\n      // impossible to write queries in portable SQL if tables are created in\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\n      return Utils.addTicks(rawIdentifier, '\"');\n    }\n    return rawIdentifier;\n  }\n}\n\nmodule.exports = PostgresQueryGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}