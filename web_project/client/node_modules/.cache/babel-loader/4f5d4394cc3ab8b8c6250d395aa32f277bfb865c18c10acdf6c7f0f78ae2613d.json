{"ast":null,"code":"\"use strict\";\n\nconst util = require(\"util\");\nconst _ = require(\"lodash\");\nconst wkx = require(\"wkx\");\nconst sequelizeErrors = require(\"./errors\");\nconst Validator = require(\"./utils/validator-extras\").validator;\nconst momentTz = require(\"moment-timezone\");\nconst moment = require(\"moment\");\nconst {\n  logger\n} = require(\"./utils/logger\");\nconst warnings = {};\nconst {\n  classToInvokable\n} = require(\"./utils/class-to-invokable\");\nconst {\n  joinSQLFragments\n} = require(\"./utils/join-sql-fragments\");\nclass ABSTRACT {\n  toString(options) {\n    return this.toSql(options);\n  }\n  toSql() {\n    return this.key;\n  }\n  stringify(value, options) {\n    if (this._stringify) {\n      return this._stringify(value, options);\n    }\n    return value;\n  }\n  bindParam(value, options) {\n    if (this._bindParam) {\n      return this._bindParam(value, options);\n    }\n    return options.bindParam(this.stringify(value, options));\n  }\n  static toString() {\n    return this.name;\n  }\n  static warn(link, text) {\n    if (!warnings[text]) {\n      warnings[text] = true;\n      logger.warn(`${text} \n>> Check: ${link}`);\n    }\n  }\n  static extend(oldType) {\n    return new this(oldType.options);\n  }\n}\nABSTRACT.prototype.dialectTypes = \"\";\nclass STRING extends ABSTRACT {\n  constructor(length, binary) {\n    super();\n    const options = typeof length === \"object\" && length || {\n      length,\n      binary\n    };\n    this.options = options;\n    this._binary = options.binary;\n    this._length = options.length || 255;\n  }\n  toSql() {\n    return joinSQLFragments([`VARCHAR(${this._length})`, this._binary && \"BINARY\"]);\n  }\n  validate(value) {\n    if (Object.prototype.toString.call(value) !== \"[object String]\") {\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === \"number\") {\n        return true;\n      }\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n    return true;\n  }\n  get BINARY() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n  static get BINARY() {\n    return new this().BINARY;\n  }\n}\nclass CHAR extends STRING {\n  constructor(length, binary) {\n    super(typeof length === \"object\" && length || {\n      length,\n      binary\n    });\n  }\n  toSql() {\n    return joinSQLFragments([`CHAR(${this._length})`, this._binary && \"BINARY\"]);\n  }\n}\nclass TEXT extends ABSTRACT {\n  constructor(length) {\n    super();\n    const options = typeof length === \"object\" && length || {\n      length\n    };\n    this.options = options;\n    this._length = options.length || \"\";\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case \"tiny\":\n        return \"TINYTEXT\";\n      case \"medium\":\n        return \"MEDIUMTEXT\";\n      case \"long\":\n        return \"LONGTEXT\";\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== \"string\") {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n    return true;\n  }\n}\nclass CITEXT extends ABSTRACT {\n  toSql() {\n    return \"CITEXT\";\n  }\n  validate(value) {\n    if (typeof value !== \"string\") {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n    return true;\n  }\n}\nclass NUMBER extends ABSTRACT {\n  constructor(options = {}) {\n    super();\n    if (typeof options === \"number\") {\n      options = {\n        length: options\n      };\n    }\n    this.options = options;\n    this._length = options.length;\n    this._zerofill = options.zerofill;\n    this._decimals = options.decimals;\n    this._precision = options.precision;\n    this._scale = options.scale;\n    this._unsigned = options.unsigned;\n  }\n  toSql() {\n    let result = this.key;\n    if (this._length) {\n      result += `(${this._length}`;\n      if (typeof this._decimals === \"number\") {\n        result += `,${this._decimals}`;\n      }\n      result += \")\";\n    }\n    if (this._unsigned) {\n      result += \" UNSIGNED\";\n    }\n    if (this._zerofill) {\n      result += \" ZEROFILL\";\n    }\n    return result;\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n  _stringify(number) {\n    if (typeof number === \"number\" || typeof number === \"bigint\" || typeof number === \"boolean\" || number === null || number === void 0) {\n      return number;\n    }\n    if (typeof number.toString === \"function\") {\n      return number.toString();\n    }\n    return number;\n  }\n  get UNSIGNED() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n  get ZEROFILL() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n  static get UNSIGNED() {\n    return new this().UNSIGNED;\n  }\n  static get ZEROFILL() {\n    return new this().ZEROFILL;\n  }\n}\nclass INTEGER extends NUMBER {\n  validate(value) {\n    if (!Validator.isInt(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n}\nclass TINYINT extends INTEGER {}\nclass SMALLINT extends INTEGER {}\nclass MEDIUMINT extends INTEGER {}\nclass BIGINT extends INTEGER {}\nclass FLOAT extends NUMBER {\n  constructor(length, decimals) {\n    super(typeof length === \"object\" && length || {\n      length,\n      decimals\n    });\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid float\", value));\n    }\n    return true;\n  }\n}\nclass REAL extends NUMBER {\n  constructor(length, decimals) {\n    super(typeof length === \"object\" && length || {\n      length,\n      decimals\n    });\n  }\n}\nclass DOUBLE extends NUMBER {\n  constructor(length, decimals) {\n    super(typeof length === \"object\" && length || {\n      length,\n      decimals\n    });\n  }\n}\nclass DECIMAL extends NUMBER {\n  constructor(precision, scale) {\n    super(typeof precision === \"object\" && precision || {\n      precision,\n      scale\n    });\n  }\n  toSql() {\n    if (this._precision || this._scale) {\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(\",\")})`;\n    }\n    return \"DECIMAL\";\n  }\n  validate(value) {\n    if (!Validator.isDecimal(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid decimal\", value));\n    }\n    return true;\n  }\n}\nconst protoExtensions = {\n  escape: false,\n  _value(value) {\n    if (isNaN(value)) {\n      return \"NaN\";\n    }\n    if (!isFinite(value)) {\n      const sign = value < 0 ? \"-\" : \"\";\n      return `${sign}Infinity`;\n    }\n    return value;\n  },\n  _stringify(value) {\n    return `'${this._value(value)}'`;\n  },\n  _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n};\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  Object.assign(floating.prototype, protoExtensions);\n}\nclass BOOLEAN extends ABSTRACT {\n  toSql() {\n    return \"TINYINT(1)\";\n  }\n  validate(value) {\n    if (!Validator.isBoolean(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid boolean\", value));\n    }\n    return true;\n  }\n  _sanitize(value) {\n    if (value !== null && value !== void 0) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        value = value[0];\n      }\n      const type = typeof value;\n      if (type === \"string\") {\n        return value === \"true\" ? true : value === \"false\" ? false : value;\n      }\n      if (type === \"number\") {\n        return value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n    return value;\n  }\n}\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\nclass TIME extends ABSTRACT {\n  toSql() {\n    return \"TIME\";\n  }\n}\nclass DATE extends ABSTRACT {\n  constructor(length) {\n    super();\n    const options = typeof length === \"object\" && length || {\n      length\n    };\n    this.options = options;\n    this._length = options.length || \"\";\n  }\n  toSql() {\n    return \"DATETIME\";\n  }\n  validate(value) {\n    if (!Validator.isDate(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid date\", value));\n    }\n    return true;\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n      return new Date(value);\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && (value === originalValue || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n      return false;\n    }\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n  _applyTimezone(date, options) {\n    if (options.timezone) {\n      if (momentTz.tz.zone(options.timezone)) {\n        return momentTz(date).tz(options.timezone);\n      }\n      return date = moment(date).utcOffset(options.timezone);\n    }\n    return momentTz(date);\n  }\n  _stringify(date, options) {\n    if (!moment.isMoment(date)) {\n      date = this._applyTimezone(date, options);\n    }\n    return date.format(\"YYYY-MM-DD HH:mm:ss.SSS Z\");\n  }\n}\nclass DATEONLY extends ABSTRACT {\n  toSql() {\n    return \"DATE\";\n  }\n  _stringify(date) {\n    return moment(date).format(\"YYYY-MM-DD\");\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !!value) {\n      return moment(value).format(\"YYYY-MM-DD\");\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && originalValue === value) {\n      return false;\n    }\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n}\nclass HSTORE extends ABSTRACT {\n  validate(value) {\n    if (!_.isPlainObject(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid hstore\", value));\n    }\n    return true;\n  }\n}\nclass JSONTYPE extends ABSTRACT {\n  validate() {\n    return true;\n  }\n  _stringify(value) {\n    return JSON.stringify(value);\n  }\n}\nclass JSONB extends JSONTYPE {}\nclass NOW extends ABSTRACT {}\nclass BLOB extends ABSTRACT {\n  constructor(length) {\n    super();\n    const options = typeof length === \"object\" && length || {\n      length\n    };\n    this.options = options;\n    this._length = options.length || \"\";\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case \"tiny\":\n        return \"TINYBLOB\";\n      case \"medium\":\n        return \"MEDIUMBLOB\";\n      case \"long\":\n        return \"LONGBLOB\";\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== \"string\" && !Buffer.isBuffer(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid blob\", value));\n    }\n    return true;\n  }\n  _stringify(value) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    const hex = value.toString(\"hex\");\n    return this._hexify(hex);\n  }\n  _hexify(hex) {\n    return `X'${hex}'`;\n  }\n  _bindParam(value, options) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    return options.bindParam(value);\n  }\n}\nBLOB.prototype.escape = false;\nclass RANGE extends ABSTRACT {\n  constructor(subtype) {\n    super();\n    const options = _.isPlainObject(subtype) ? subtype : {\n      subtype\n    };\n    if (!options.subtype) options.subtype = new INTEGER();\n    if (typeof options.subtype === \"function\") {\n      options.subtype = new options.subtype();\n    }\n    this._subtype = options.subtype.key;\n    this.options = options;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid range\", value));\n    }\n    if (value.length !== 2) {\n      throw new sequelizeErrors.ValidationError(\"A range must be an array with two elements\");\n    }\n    return true;\n  }\n}\nclass UUID extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== \"string\" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuid\", value));\n    }\n    return true;\n  }\n}\nclass UUIDV1 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== \"string\" || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuid\", value));\n    }\n    return true;\n  }\n}\nclass UUIDV4 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== \"string\" || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid uuidv4\", value));\n    }\n    return true;\n  }\n}\nclass VIRTUAL extends ABSTRACT {\n  constructor(ReturnType, fields) {\n    super();\n    if (typeof ReturnType === \"function\") ReturnType = new ReturnType();\n    this.returnType = ReturnType;\n    this.fields = fields;\n  }\n}\nclass ENUM extends ABSTRACT {\n  constructor(...args) {\n    super();\n    const value = args[0];\n    const options = typeof value === \"object\" && !Array.isArray(value) && value || {\n      values: args.reduce((result, element) => {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    this.values = options.values;\n    this.options = options;\n  }\n  validate(value) {\n    if (!this.values.includes(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid choice in %j\", value, this.values));\n    }\n    return true;\n  }\n}\nclass ARRAY extends ABSTRACT {\n  constructor(type) {\n    super();\n    const options = _.isPlainObject(type) ? type : {\n      type\n    };\n    this.options = options;\n    this.type = typeof options.type === \"function\" ? new options.type() : options.type;\n  }\n  toSql() {\n    return `${this.type.toSql()}[]`;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid array\", value));\n    }\n    return true;\n  }\n  static is(obj, type) {\n    return obj instanceof ARRAY && obj.type instanceof type;\n  }\n}\nclass GEOMETRY extends ABSTRACT {\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : {\n      type,\n      srid\n    };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\nGEOMETRY.prototype.escape = false;\nclass GEOGRAPHY extends ABSTRACT {\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : {\n      type,\n      srid\n    };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\nGEOGRAPHY.prototype.escape = false;\nclass CIDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\" || !Validator.isIPRange(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid CIDR\", value));\n    }\n    return true;\n  }\n}\nclass INET extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\" || !Validator.isIP(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid INET\", value));\n    }\n    return true;\n  }\n}\nclass MACADDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\" || !Validator.isMACAddress(value)) {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid MACADDR\", value));\n    }\n    return true;\n  }\n}\nclass TSVECTOR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== \"string\") {\n      throw new sequelizeErrors.ValidationError(util.format(\"%j is not a valid string\", value));\n    }\n    return true;\n  }\n}\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  ENUM,\n  RANGE,\n  REAL,\n  \"DOUBLE PRECISION\": DOUBLE,\n  DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR,\n  CITEXT,\n  TSVECTOR\n};\n_.each(DataTypes, (dataType, name) => {\n  if (!Object.prototype.hasOwnProperty.call(dataType, \"key\")) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\nconst dialectMap = {};\ndialectMap.postgres = require(\"./dialects/postgres/data-types\")(DataTypes);\ndialectMap.mysql = require(\"./dialects/mysql/data-types\")(DataTypes);\ndialectMap.mariadb = require(\"./dialects/mariadb/data-types\")(DataTypes);\ndialectMap.sqlite = require(\"./dialects/sqlite/data-types\")(DataTypes);\ndialectMap.mssql = require(\"./dialects/mssql/data-types\")(DataTypes);\ndialectMap.db2 = require(\"./dialects/db2/data-types\")(DataTypes);\ndialectMap.snowflake = require(\"./dialects/snowflake/data-types\")(DataTypes);\ndialectMap.oracle = require(\"./dialects/oracle/data-types\")(DataTypes);\nconst dialectList = Object.values(dialectMap);\nfor (const dataTypes of dialectList) {\n  _.each(dataTypes, (DataType, key) => {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n}\nfor (const dataTypes of [DataTypes, ...dialectList]) {\n  _.each(dataTypes, (DataType, key) => {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n}\nObject.assign(DataTypes, dialectMap);","map":{"version":3,"names":["util","require","_","wkx","sequelizeErrors","Validator","validator","momentTz","moment","logger","warnings","classToInvokable","joinSQLFragments","ABSTRACT","toString","options","toSql","key","stringify","value","_stringify","bindParam","_bindParam","name","warn","link","text","extend","oldType","prototype","dialectTypes","STRING","constructor","length","binary","_binary","_length","validate","Object","call","Buffer","isBuffer","ValidationError","format","BINARY","CHAR","TEXT","toLowerCase","CITEXT","NUMBER","_zerofill","zerofill","_decimals","decimals","_precision","precision","_scale","scale","_unsigned","unsigned","result","isFloat","String","number","UNSIGNED","ZEROFILL","INTEGER","isInt","TINYINT","SMALLINT","MEDIUMINT","BIGINT","FLOAT","REAL","DOUBLE","DECIMAL","filter","identity","join","isDecimal","protoExtensions","escape","_value","isNaN","isFinite","sign","floating","assign","BOOLEAN","isBoolean","_sanitize","type","parse","TIME","DATE","isDate","raw","Date","_isChanged","originalValue","getTime","_applyTimezone","date","timezone","tz","zone","utcOffset","isMoment","DATEONLY","HSTORE","isPlainObject","JSONTYPE","JSON","JSONB","NOW","BLOB","Array","isArray","from","hex","_hexify","RANGE","subtype","_subtype","UUID","isUUID","acceptStrings","UUIDV1","UUIDV4","VIRTUAL","ReturnType","fields","returnType","ENUM","args","values","reduce","element","concat","includes","ARRAY","is","obj","GEOMETRY","srid","Geometry","parseGeoJSON","toWkt","GEOGRAPHY","CIDR","isIPRange","INET","isIP","MACADDR","isMACAddress","TSVECTOR","DataTypes","module","exports","NUMERIC","each","dataType","hasOwnProperty","types","dialectMap","postgres","mysql","mariadb","sqlite","mssql","db2","snowflake","oracle","dialectList","dataTypes","DataType"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\data-types.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\nconst _ = require('lodash');\nconst wkx = require('wkx');\nconst sequelizeErrors = require('./errors');\nconst Validator = require('./utils/validator-extras').validator;\nconst momentTz = require('moment-timezone');\nconst moment = require('moment');\nconst { logger } = require('./utils/logger');\nconst warnings = {};\nconst { classToInvokable } = require('./utils/class-to-invokable');\nconst { joinSQLFragments } = require('./utils/join-sql-fragments');\n\nclass ABSTRACT {\n  toString(options) {\n    return this.toSql(options);\n  }\n  toSql() {\n    return this.key;\n  }\n  stringify(value, options) {\n    if (this._stringify) {\n      return this._stringify(value, options);\n    }\n    return value;\n  }\n  bindParam(value, options) {\n    if (this._bindParam) {\n      return this._bindParam(value, options);\n    }\n    return options.bindParam(this.stringify(value, options));\n  }\n  static toString() {\n    return this.name;\n  }\n  static warn(link, text) {\n    if (!warnings[text]) {\n      warnings[text] = true;\n      logger.warn(`${text} \\n>> Check: ${link}`);\n    }\n  }\n  static extend(oldType) {\n    return new this(oldType.options);\n  }\n}\n\nABSTRACT.prototype.dialectTypes = '';\n\n/**\n * STRING A variable length string\n */\nclass STRING extends ABSTRACT {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super();\n    const options = typeof length === 'object' && length || { length, binary };\n    this.options = options;\n    this._binary = options.binary;\n    this._length = options.length || 255;\n  }\n  toSql() {\n    return joinSQLFragments([\n      `VARCHAR(${this._length})`,\n      this._binary && 'BINARY'\n    ]);\n  }\n  validate(value) {\n    if (Object.prototype.toString.call(value) !== '[object String]') {\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === 'number') {\n        return true;\n      }\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n\n  get BINARY() {\n    this._binary = true;\n    this.options.binary = true;\n    return this;\n  }\n\n  static get BINARY() {\n    return new this().BINARY;\n  }\n}\n\n/**\n * CHAR A fixed length string\n */\nclass CHAR extends STRING {\n  /**\n   * @param {number} [length=255] length of string\n   * @param {boolean} [binary=false] Is this binary?\n   */\n  constructor(length, binary) {\n    super(typeof length === 'object' && length || { length, binary });\n  }\n  toSql() {\n    return joinSQLFragments([\n      `CHAR(${this._length})`,\n      this._binary && 'BINARY'\n    ]);\n  }\n}\n\n/**\n * Unlimited length TEXT column\n */\nclass TEXT extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYTEXT';\n      case 'medium':\n        return 'MEDIUMTEXT';\n      case 'long':\n        return 'LONGTEXT';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * An unlimited length case-insensitive text column.\n * Original case is preserved but acts case-insensitive when comparing values (such as when finding or unique constraints).\n * Only available in Postgres and SQLite.\n *\n */\nclass CITEXT extends ABSTRACT {\n  toSql() {\n    return 'CITEXT';\n  }\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Base number type which is used to build other types\n */\nclass NUMBER extends ABSTRACT {\n  /**\n   * @param {object} options type options\n   * @param {string|number} [options.length] length of type, like `INT(4)`\n   * @param {boolean} [options.zerofill] Is zero filled?\n   * @param {boolean} [options.unsigned] Is unsigned?\n   * @param {string|number} [options.decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   * @param {string|number} [options.precision] defines precision for decimal type\n   * @param {string|number} [options.scale] defines scale for decimal type\n   */\n  constructor(options = {}) {\n    super();\n    if (typeof options === 'number') {\n      options = {\n        length: options\n      };\n    }\n    this.options = options;\n    this._length = options.length;\n    this._zerofill = options.zerofill;\n    this._decimals = options.decimals;\n    this._precision = options.precision;\n    this._scale = options.scale;\n    this._unsigned = options.unsigned;\n  }\n  toSql() {\n    let result = this.key;\n    if (this._length) {\n      result += `(${this._length}`;\n      if (typeof this._decimals === 'number') {\n        result += `,${this._decimals}`;\n      }\n      result += ')';\n    }\n    if (this._unsigned) {\n      result += ' UNSIGNED';\n    }\n    if (this._zerofill) {\n      result += ' ZEROFILL';\n    }\n    return result;\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n  _stringify(number) {\n    if (typeof number === 'number' || typeof number === 'bigint' || typeof number === 'boolean' || number === null || number === undefined) {\n      return number;\n    }\n    if (typeof number.toString === 'function') {\n      return number.toString();\n    }\n    return number;\n  }\n\n  get UNSIGNED() {\n    this._unsigned = true;\n    this.options.unsigned = true;\n    return this;\n  }\n\n  get ZEROFILL() {\n    this._zerofill = true;\n    this.options.zerofill = true;\n    return this;\n  }\n\n  static get UNSIGNED() {\n    return new this().UNSIGNED;\n  }\n\n  static get ZEROFILL() {\n    return new this().ZEROFILL;\n  }\n}\n\n/**\n * A 32 bit integer\n */\nclass INTEGER extends NUMBER {\n  validate(value) {\n    if (!Validator.isInt(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\n    }\n    return true;\n  }\n}\n\n/**\n * A 8 bit integer\n */\nclass TINYINT extends INTEGER {\n}\n\n/**\n * A 16 bit integer\n */\nclass SMALLINT extends INTEGER {\n}\n\n/**\n * A 24 bit integer\n */\nclass MEDIUMINT extends INTEGER {\n}\n\n/**\n * A 64 bit integer\n */\nclass BIGINT extends INTEGER {\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass FLOAT extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `FLOAT(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `FLOAT(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n  validate(value) {\n    if (!Validator.isFloat(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));\n    }\n    return true;\n  }\n}\n\n/**\n * Floating point number (4-byte precision).\n */\nclass REAL extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `REAL(4)`\n   * @param {string|number} [decimals] number of decimal points, used with length `REAL(5, 4)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Floating point number (8-byte precision).\n */\nclass DOUBLE extends NUMBER {\n  /**\n   * @param {string|number} [length] length of type, like `DOUBLE PRECISION(25)`\n   * @param {string|number} [decimals] number of decimal points, used with length `DOUBLE PRECISION(25, 10)`\n   */\n  constructor(length, decimals) {\n    super(typeof length === 'object' && length || { length, decimals });\n  }\n}\n\n/**\n * Decimal type, variable precision, take length as specified by user\n */\nclass DECIMAL extends NUMBER {\n  /**\n   * @param {string|number} [precision] defines precision\n   * @param {string|number} [scale] defines scale\n   */\n  constructor(precision, scale) {\n    super(typeof precision === 'object' && precision || { precision, scale });\n  }\n  toSql() {\n    if (this._precision || this._scale) {\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(',')})`;\n    }\n    return 'DECIMAL';\n  }\n  validate(value) {\n    if (!Validator.isDecimal(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));\n    }\n    return true;\n  }\n}\n\n// TODO: Create intermediate class\nconst protoExtensions = {\n  escape: false,\n  _value(value) {\n    if (isNaN(value)) {\n      return 'NaN';\n    }\n    if (!isFinite(value)) {\n      const sign = value < 0 ? '-' : '';\n      return `${sign}Infinity`;\n    }\n\n    return value;\n  },\n  _stringify(value) {\n    return `'${this._value(value)}'`;\n  },\n  _bindParam(value, options) {\n    return options.bindParam(this._value(value));\n  }\n};\n\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\n  Object.assign(floating.prototype, protoExtensions);\n}\n\n/**\n * A boolean / tinyint column, depending on dialect\n */\nclass BOOLEAN extends ABSTRACT {\n  toSql() {\n    return 'TINYINT(1)';\n  }\n  validate(value) {\n    if (!Validator.isBoolean(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));\n    }\n    return true;\n  }\n  _sanitize(value) {\n    if (value !== null && value !== undefined) {\n      if (Buffer.isBuffer(value) && value.length === 1) {\n        // Bit fields are returned as buffers\n        value = value[0];\n      }\n      const type = typeof value;\n      if (type === 'string') {\n        // Only take action on valid boolean strings.\n        return value === 'true' ? true : value === 'false' ? false : value;\n      }\n      if (type === 'number') {\n        // Only take action on valid boolean integers.\n        return value === 1 ? true : value === 0 ? false : value;\n      }\n    }\n    return value;\n  }\n}\n\n\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\n\n/**\n * A time column\n *\n */\nclass TIME extends ABSTRACT {\n  toSql() {\n    return 'TIME';\n  }\n}\n\n/**\n * Date column with timezone, default is UTC\n */\nclass DATE extends ABSTRACT {\n  /**\n   * @param {string|number} [length] precision to allow storing milliseconds\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    return 'DATETIME';\n  }\n  validate(value) {\n    if (!Validator.isDate(String(value))) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));\n    }\n    return true;\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !(value instanceof Date) && !!value) {\n      return new Date(value);\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value &&\n      (value === originalValue ||\n        value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n  _applyTimezone(date, options) {\n    if (options.timezone) {\n      if (momentTz.tz.zone(options.timezone)) {\n        return momentTz(date).tz(options.timezone);\n      }\n      return date = moment(date).utcOffset(options.timezone);\n    }\n    return momentTz(date);\n  }\n  _stringify(date, options) {\n    if (!moment.isMoment(date)) {\n      date = this._applyTimezone(date, options);\n    }\n    // Z here means current timezone, _not_ UTC\n    return date.format('YYYY-MM-DD HH:mm:ss.SSS Z');\n  }\n}\n\n/**\n * A date only column (no timestamp)\n */\nclass DATEONLY extends ABSTRACT {\n  toSql() {\n    return 'DATE';\n  }\n  _stringify(date) {\n    return moment(date).format('YYYY-MM-DD');\n  }\n  _sanitize(value, options) {\n    if ((!options || options && !options.raw) && !!value) {\n      return moment(value).format('YYYY-MM-DD');\n    }\n    return value;\n  }\n  _isChanged(value, originalValue) {\n    if (originalValue && !!value && originalValue === value) {\n      return false;\n    }\n    // not changed when set to same empty value\n    if (!originalValue && !value && originalValue === value) {\n      return false;\n    }\n    return true;\n  }\n}\n\n/**\n * A key / value store column. Only available in Postgres.\n */\nclass HSTORE extends ABSTRACT {\n  validate(value) {\n    if (!_.isPlainObject(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A JSON string column. Available in MySQL, Postgres and SQLite\n */\nclass JSONTYPE extends ABSTRACT {\n  validate() {\n    return true;\n  }\n  _stringify(value) {\n    return JSON.stringify(value);\n  }\n}\n\n/**\n * A binary storage JSON column. Only available in Postgres.\n */\nclass JSONB extends JSONTYPE {\n}\n\n/**\n * A default value of the current timestamp\n */\nclass NOW extends ABSTRACT {\n}\n\n/**\n * Binary storage\n */\nclass BLOB extends ABSTRACT {\n  /**\n   * @param {string} [length=''] could be tiny, medium, long.\n   */\n  constructor(length) {\n    super();\n    const options = typeof length === 'object' && length || { length };\n    this.options = options;\n    this._length = options.length || '';\n  }\n  toSql() {\n    switch (this._length.toLowerCase()) {\n      case 'tiny':\n        return 'TINYBLOB';\n      case 'medium':\n        return 'MEDIUMBLOB';\n      case 'long':\n        return 'LONGBLOB';\n      default:\n        return this.key;\n    }\n  }\n  validate(value) {\n    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));\n    }\n    return true;\n  }\n  _stringify(value) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    const hex = value.toString('hex');\n    return this._hexify(hex);\n  }\n  _hexify(hex) {\n    return `X'${hex}'`;\n  }\n  _bindParam(value, options) {\n    if (!Buffer.isBuffer(value)) {\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      }\n      else {\n        value = Buffer.from(value.toString());\n      }\n    }\n    return options.bindParam(value);\n  }\n}\n\n\nBLOB.prototype.escape = false;\n\n/**\n * Range types are data types representing a range of values of some element type (called the range's subtype).\n * Only available in Postgres. See [the Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\n */\nclass RANGE extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} subtype A subtype for range, like RANGE(DATE)\n   */\n  constructor(subtype) {\n    super();\n    const options = _.isPlainObject(subtype) ? subtype : { subtype };\n    if (!options.subtype)\n      options.subtype = new INTEGER();\n    if (typeof options.subtype === 'function') {\n      options.subtype = new options.subtype();\n    }\n    this._subtype = options.subtype.key;\n    this.options = options;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));\n    }\n    if (value.length !== 2) {\n      throw new sequelizeErrors.ValidationError('A range must be an array with two elements');\n    }\n    return true;\n  }\n}\n\n/**\n * A column storing a unique universal identifier.\n * Use with `UUIDV1` or `UUIDV4` for default values.\n */\nclass UUID extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v1 standard\n */\nclass UUIDV1 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A default unique universal identifier generated following the UUID v4 standard\n */\nclass UUIDV4 extends ABSTRACT {\n  validate(value, options) {\n    if (typeof value !== 'string' || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\n *\n * You could also use it to validate a value before permuting and storing it. VIRTUAL also takes a return type and dependency fields as arguments\n * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.\n * Return type is mostly useful for setups that rely on types like GraphQL.\n *\n * @example <caption>Checking password length before hashing it</caption>\n * sequelize.define('user', {\n *   password_hash: DataTypes.STRING,\n *   password: {\n *     type: DataTypes.VIRTUAL,\n *     set: function (val) {\n *        // Remember to set the data value, otherwise it won't be validated\n *        this.setDataValue('password', val);\n *        this.setDataValue('password_hash', this.salt + val);\n *      },\n *      validate: {\n *         isLongEnough: function (val) {\n *           if (val.length < 7) {\n *             throw new Error(\"Please choose a longer password\")\n *          }\n *       }\n *     }\n *   }\n * })\n *\n * # In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\n *\n * @example <caption>Virtual with dependency fields</caption>\n * {\n *   active: {\n *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\n *     get: function() {\n *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\n *     }\n *   }\n * }\n *\n */\nclass VIRTUAL extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} [ReturnType] return type for virtual type\n   * @param {Array} [fields] array of fields this virtual type is dependent on\n   */\n  constructor(ReturnType, fields) {\n    super();\n    if (typeof ReturnType === 'function')\n      ReturnType = new ReturnType();\n    this.returnType = ReturnType;\n    this.fields = fields;\n  }\n}\n\n/**\n * An enumeration, Postgres Only\n *\n * @example\n * DataTypes.ENUM('value', 'another value')\n * DataTypes.ENUM(['value', 'another value'])\n * DataTypes.ENUM({\n *   values: ['value', 'another value']\n * })\n */\nclass ENUM extends ABSTRACT {\n  /**\n   * @param {...any|{ values: any[] }|any[]} args either array of values or options object with values array. It also supports variadic values\n   */\n  constructor(...args) {\n    super();\n    const value = args[0];\n    const options = typeof value === 'object' && !Array.isArray(value) && value || {\n      values: args.reduce((result, element) => {\n        return result.concat(Array.isArray(element) ? element : [element]);\n      }, [])\n    };\n    this.values = options.values;\n    this.options = options;\n  }\n  validate(value) {\n    if (!this.values.includes(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));\n    }\n    return true;\n  }\n}\n\n/**\n * An array of `type`. Only available in Postgres.\n *\n * @example\n * DataTypes.ARRAY(DataTypes.DECIMAL)\n */\nclass ARRAY extends ABSTRACT {\n  /**\n   * @param {ABSTRACT} type type of array values\n   */\n  constructor(type) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type };\n    this.options = options;\n    this.type = typeof options.type === 'function' ? new options.type() : options.type;\n  }\n  toSql() {\n    return `${this.type.toSql()}[]`;\n  }\n  validate(value) {\n    if (!Array.isArray(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));\n    }\n    return true;\n  }\n  static is(obj, type) {\n    return obj instanceof ARRAY && obj.type instanceof type;\n  }\n}\n\n/**\n * A column storing Geometry information.\n * It is only available in PostgreSQL (with PostGIS), MariaDB or MySQL.\n *\n * GeoJSON is accepted as input and returned as output.\n *\n * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.\n * In MySQL it is parsed using the function `ST_GeomFromText`.\n *\n * Therefore, one can just follow the [GeoJSON spec](https://tools.ietf.org/html/rfc7946) for handling geometry objects.  See the following examples:\n *\n * @example <caption>Defining a Geometry type attribute</caption>\n * DataTypes.GEOMETRY\n * DataTypes.GEOMETRY('POINT')\n * DataTypes.GEOMETRY('POINT', 4326)\n *\n * @example <caption>Create a new point</caption>\n * const point = { type: 'Point', coordinates: [-76.984722, 39.807222]}; // GeoJson format: [lng, lat]\n *\n * User.create({username: 'username', geometry: point });\n *\n * @example <caption>Create a new linestring</caption>\n * const line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\n *\n * User.create({username: 'username', geometry: line });\n *\n * @example <caption>Create a new polygon</caption>\n * const polygon = { type: 'Polygon', coordinates: [\n *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n *                   [100.0, 1.0], [100.0, 0.0] ]\n *                 ]};\n *\n * User.create({username: 'username', geometry: polygon });\n *\n * @example <caption>Create a new point with a custom SRID</caption>\n * const point = {\n *   type: 'Point',\n *   coordinates: [-76.984722, 39.807222], // GeoJson format: [lng, lat]\n *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }\n * };\n *\n * User.create({username: 'username', geometry: point })\n *\n *\n * @see {@link DataTypes.GEOGRAPHY}\n */\nclass GEOMETRY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geometry data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\nGEOMETRY.prototype.escape = false;\n\n/**\n * A geography datatype represents two dimensional spacial objects in an elliptic coord system.\n *\n * __The difference from geometry and geography type:__\n *\n * PostGIS 1.5 introduced a new spatial type called geography, which uses geodetic measurement instead of Cartesian measurement.\n * Coordinate points in the geography type are always represented in WGS 84 lon lat degrees (SRID 4326),\n * but measurement functions and relationships ST_Distance, ST_DWithin, ST_Length, and ST_Area always return answers in meters or assume inputs in meters.\n *\n * __What is best to use? It depends:__\n *\n * When choosing between the geometry and geography type for data storage, you should consider what you’ll be using it for.\n * If all you do are simple measurements and relationship checks on your data, and your data covers a fairly large area, then most likely you’ll be better off storing your data using the new geography type.\n * Although the new geography data type can cover the globe, the geometry type is far from obsolete.\n * The geometry type has a much richer set of functions than geography, relationship checks are generally faster, and it has wider support currently across desktop and web-mapping tools\n *\n * @example <caption>Defining a Geography type attribute</caption>\n * DataTypes.GEOGRAPHY\n * DataTypes.GEOGRAPHY('POINT')\n * DataTypes.GEOGRAPHY('POINT', 4326)\n */\nclass GEOGRAPHY extends ABSTRACT {\n  /**\n   * @param {string} [type] Type of geography data\n   * @param {string} [srid] SRID of type\n   */\n  constructor(type, srid) {\n    super();\n    const options = _.isPlainObject(type) ? type : { type, srid };\n    this.options = options;\n    this.type = options.type;\n    this.srid = options.srid;\n  }\n  _stringify(value, options) {\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n  _bindParam(value, options) {\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\n  }\n}\n\n\nGEOGRAPHY.prototype.escape = false;\n\n/**\n * The cidr type holds an IPv4 or IPv6 network specification. Takes 7 or 19 bytes.\n *\n * Only available for Postgres\n */\nclass CIDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIPRange(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid CIDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The INET type holds an IPv4 or IPv6 host address, and optionally its subnet. Takes 7 or 19 bytes\n *\n * Only available for Postgres\n */\nclass INET extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isIP(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid INET', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The MACADDR type stores MAC addresses. Takes 6 bytes\n *\n * Only available for Postgres\n *\n */\nclass MACADDR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string' || !Validator.isMACAddress(value)) {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid MACADDR', value));\n    }\n    return true;\n  }\n}\n\n/**\n * The TSVECTOR type stores text search vectors.\n *\n * Only available for Postgres\n *\n */\nclass TSVECTOR extends ABSTRACT {\n  validate(value) {\n    if (typeof value !== 'string') {\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\n    }\n    return true;\n  }\n}\n\n/**\n * A convenience class holding commonly used data types. The data types are used when defining a new model using `Sequelize.define`, like this:\n * ```js\n * sequelize.define('model', {\n *   column: DataTypes.INTEGER\n * })\n * ```\n * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean\n * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\n *\n * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\n *\n * Some data types have special properties that can be accessed in order to change the data type.\n * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.\n * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\n *\n * * All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\n * * The `CHAR` and `STRING` types expose the `BINARY` property\n *\n * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for\n * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: DataTypes.UUIDV1,\n *     primaryKey: true\n *   }\n * })\n * ```\n * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished\n * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\n * from a function.\n * ```js\n * sequelize.define('model', {\n *   uuid: {\n *     type: DataTypes.UUID,\n *     defaultValue: function() {\n *       return generateMyId()\n *     },\n *     primaryKey: true\n *   }\n * })\n * ```\n */\nconst DataTypes = module.exports = {\n  ABSTRACT,\n  STRING,\n  CHAR,\n  TEXT,\n  NUMBER,\n  TINYINT,\n  SMALLINT,\n  MEDIUMINT,\n  INTEGER,\n  BIGINT,\n  FLOAT,\n  TIME,\n  DATE,\n  DATEONLY,\n  BOOLEAN,\n  NOW,\n  BLOB,\n  DECIMAL,\n  NUMERIC: DECIMAL,\n  UUID,\n  UUIDV1,\n  UUIDV4,\n  HSTORE,\n  JSON: JSONTYPE,\n  JSONB,\n  VIRTUAL,\n  ARRAY,\n  ENUM,\n  RANGE,\n  REAL,\n  'DOUBLE PRECISION': DOUBLE,\n  DOUBLE,\n  GEOMETRY,\n  GEOGRAPHY,\n  CIDR,\n  INET,\n  MACADDR,\n  CITEXT,\n  TSVECTOR\n};\n\n_.each(DataTypes, (dataType, name) => {\n  // guard for aliases\n  if (!Object.prototype.hasOwnProperty.call(dataType, 'key')) {\n    dataType.types = {};\n    dataType.key = dataType.prototype.key = name;\n  }\n});\n\nconst dialectMap = {};\ndialectMap.postgres = require('./dialects/postgres/data-types')(DataTypes);\ndialectMap.mysql = require('./dialects/mysql/data-types')(DataTypes);\ndialectMap.mariadb = require('./dialects/mariadb/data-types')(DataTypes);\ndialectMap.sqlite = require('./dialects/sqlite/data-types')(DataTypes);\ndialectMap.mssql = require('./dialects/mssql/data-types')(DataTypes);\ndialectMap.db2 = require('./dialects/db2/data-types')(DataTypes);\ndialectMap.snowflake = require('./dialects/snowflake/data-types')(DataTypes);\ndialectMap.oracle = require('./dialects/oracle/data-types')(DataTypes);\n\nconst dialectList = Object.values(dialectMap);\n\nfor (const dataTypes of dialectList) {\n  _.each(dataTypes, (DataType, key) => {\n    if (!DataType.key) {\n      DataType.key = DataType.prototype.key = key;\n    }\n  });\n}\n\n// Wrap all data types to not require `new`\nfor (const dataTypes of [DataTypes, ...dialectList]) {\n  _.each(dataTypes, (DataType, key) => {\n    dataTypes[key] = classToInvokable(DataType);\n  });\n}\n\nObject.assign(DataTypes, dialectMap);\n"],"mappings":";;AAEA,MAAMA,IAAA,GAAOC,OAAA,CAAQ;AACrB,MAAMC,CAAA,GAAID,OAAA,CAAQ;AAClB,MAAME,GAAA,GAAMF,OAAA,CAAQ;AACpB,MAAMG,eAAA,GAAkBH,OAAA,CAAQ;AAChC,MAAMI,SAAA,GAAYJ,OAAA,CAAQ,4BAA4BK,SAAA;AACtD,MAAMC,QAAA,GAAWN,OAAA,CAAQ;AACzB,MAAMO,MAAA,GAASP,OAAA,CAAQ;AACvB,MAAM;EAAEQ;AAAA,IAAWR,OAAA,CAAQ;AAC3B,MAAMS,QAAA,GAAW;AACjB,MAAM;EAAEC;AAAA,IAAqBV,OAAA,CAAQ;AACrC,MAAM;EAAEW;AAAA,IAAqBX,OAAA,CAAQ;AAErC,MAAAY,QAAA,CAAe;EACbC,SAASC,OAAA,EAAS;IAChB,OAAO,KAAKC,KAAA,CAAMD,OAAA;EAAA;EAEpBC,MAAA,EAAQ;IACN,OAAO,KAAKC,GAAA;EAAA;EAEdC,UAAUC,KAAA,EAAOJ,OAAA,EAAS;IACxB,IAAI,KAAKK,UAAA,EAAY;MACnB,OAAO,KAAKA,UAAA,CAAWD,KAAA,EAAOJ,OAAA;IAAA;IAEhC,OAAOI,KAAA;EAAA;EAETE,UAAUF,KAAA,EAAOJ,OAAA,EAAS;IACxB,IAAI,KAAKO,UAAA,EAAY;MACnB,OAAO,KAAKA,UAAA,CAAWH,KAAA,EAAOJ,OAAA;IAAA;IAEhC,OAAOA,OAAA,CAAQM,SAAA,CAAU,KAAKH,SAAA,CAAUC,KAAA,EAAOJ,OAAA;EAAA;EAAA,OAE1CD,SAAA,EAAW;IAChB,OAAO,KAAKS,IAAA;EAAA;EAAA,OAEPC,KAAKC,IAAA,EAAMC,IAAA,EAAM;IACtB,IAAI,CAAChB,QAAA,CAASgB,IAAA,GAAO;MACnBhB,QAAA,CAASgB,IAAA,IAAQ;MACjBjB,MAAA,CAAOe,IAAA,CAAK,GAAGE,IAAA;AAAA,YAAoBD,IAAA;IAAA;EAAA;EAAA,OAGhCE,OAAOC,OAAA,EAAS;IACrB,OAAO,IAAI,KAAKA,OAAA,CAAQb,OAAA;EAAA;AAAA;AAI5BF,QAAA,CAASgB,SAAA,CAAUC,YAAA,GAAe;AAKlC,MAAAC,MAAA,SAAqBlB,QAAA,CAAS;EAK5BmB,YAAYC,MAAA,EAAQC,MAAA,EAAQ;IAC1B;IACA,MAAMnB,OAAA,GAAU,OAAOkB,MAAA,KAAW,YAAYA,MAAA,IAAU;MAAEA,MAAA;MAAQC;IAAA;IAClE,KAAKnB,OAAA,GAAUA,OAAA;IACf,KAAKoB,OAAA,GAAUpB,OAAA,CAAQmB,MAAA;IACvB,KAAKE,OAAA,GAAUrB,OAAA,CAAQkB,MAAA,IAAU;EAAA;EAEnCjB,MAAA,EAAQ;IACN,OAAOJ,gBAAA,CAAiB,CACtB,WAAW,KAAKwB,OAAA,KAChB,KAAKD,OAAA,IAAW;EAAA;EAGpBE,SAASlB,KAAA,EAAO;IACd,IAAImB,MAAA,CAAOT,SAAA,CAAUf,QAAA,CAASyB,IAAA,CAAKpB,KAAA,MAAW,mBAAmB;MAC/D,IAAI,KAAKJ,OAAA,CAAQmB,MAAA,IAAUM,MAAA,CAAOC,QAAA,CAAStB,KAAA,KAAU,OAAOA,KAAA,KAAU,UAAU;QAC9E,OAAO;MAAA;MAET,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,4BAA4BxB,KAAA;IAAA;IAEpF,OAAO;EAAA;EAAA,IAGLyB,OAAA,EAAS;IACX,KAAKT,OAAA,GAAU;IACf,KAAKpB,OAAA,CAAQmB,MAAA,GAAS;IACtB,OAAO;EAAA;EAAA,WAGEU,OAAA,EAAS;IAClB,OAAO,IAAI,OAAOA,MAAA;EAAA;AAAA;AAOtB,MAAAC,IAAA,SAAmBd,MAAA,CAAO;EAKxBC,YAAYC,MAAA,EAAQC,MAAA,EAAQ;IAC1B,MAAM,OAAOD,MAAA,KAAW,YAAYA,MAAA,IAAU;MAAEA,MAAA;MAAQC;IAAA;EAAA;EAE1DlB,MAAA,EAAQ;IACN,OAAOJ,gBAAA,CAAiB,CACtB,QAAQ,KAAKwB,OAAA,KACb,KAAKD,OAAA,IAAW;EAAA;AAAA;AAQtB,MAAAW,IAAA,SAAmBjC,QAAA,CAAS;EAI1BmB,YAAYC,MAAA,EAAQ;IAClB;IACA,MAAMlB,OAAA,GAAU,OAAOkB,MAAA,KAAW,YAAYA,MAAA,IAAU;MAAEA;IAAA;IAC1D,KAAKlB,OAAA,GAAUA,OAAA;IACf,KAAKqB,OAAA,GAAUrB,OAAA,CAAQkB,MAAA,IAAU;EAAA;EAEnCjB,MAAA,EAAQ;IACN,QAAQ,KAAKoB,OAAA,CAAQW,WAAA;MAAA,KACd;QACH,OAAO;MAAA,KACJ;QACH,OAAO;MAAA,KACJ;QACH,OAAO;MAAA;QAEP,OAAO,KAAK9B,GAAA;IAAA;EAAA;EAGlBoB,SAASlB,KAAA,EAAO;IACd,IAAI,OAAOA,KAAA,KAAU,UAAU;MAC7B,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,4BAA4BxB,KAAA;IAAA;IAEpF,OAAO;EAAA;AAAA;AAUX,MAAA6B,MAAA,SAAqBnC,QAAA,CAAS;EAC5BG,MAAA,EAAQ;IACN,OAAO;EAAA;EAETqB,SAASlB,KAAA,EAAO;IACd,IAAI,OAAOA,KAAA,KAAU,UAAU;MAC7B,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,4BAA4BxB,KAAA;IAAA;IAEpF,OAAO;EAAA;AAAA;AAOX,MAAA8B,MAAA,SAAqBpC,QAAA,CAAS;EAU5BmB,YAAYjB,OAAA,GAAU,IAAI;IACxB;IACA,IAAI,OAAOA,OAAA,KAAY,UAAU;MAC/BA,OAAA,GAAU;QACRkB,MAAA,EAAQlB;MAAA;IAAA;IAGZ,KAAKA,OAAA,GAAUA,OAAA;IACf,KAAKqB,OAAA,GAAUrB,OAAA,CAAQkB,MAAA;IACvB,KAAKiB,SAAA,GAAYnC,OAAA,CAAQoC,QAAA;IACzB,KAAKC,SAAA,GAAYrC,OAAA,CAAQsC,QAAA;IACzB,KAAKC,UAAA,GAAavC,OAAA,CAAQwC,SAAA;IAC1B,KAAKC,MAAA,GAASzC,OAAA,CAAQ0C,KAAA;IACtB,KAAKC,SAAA,GAAY3C,OAAA,CAAQ4C,QAAA;EAAA;EAE3B3C,MAAA,EAAQ;IACN,IAAI4C,MAAA,GAAS,KAAK3C,GAAA;IAClB,IAAI,KAAKmB,OAAA,EAAS;MAChBwB,MAAA,IAAU,IAAI,KAAKxB,OAAA;MACnB,IAAI,OAAO,KAAKgB,SAAA,KAAc,UAAU;QACtCQ,MAAA,IAAU,IAAI,KAAKR,SAAA;MAAA;MAErBQ,MAAA,IAAU;IAAA;IAEZ,IAAI,KAAKF,SAAA,EAAW;MAClBE,MAAA,IAAU;IAAA;IAEZ,IAAI,KAAKV,SAAA,EAAW;MAClBU,MAAA,IAAU;IAAA;IAEZ,OAAOA,MAAA;EAAA;EAETvB,SAASlB,KAAA,EAAO;IACd,IAAI,CAACd,SAAA,CAAUwD,OAAA,CAAQC,MAAA,CAAO3C,KAAA,IAAS;MACrC,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,qBAAqB,KAAK1B,GAAA,CAAI8B,WAAA,MAAiB5B,KAAA;IAAA;IAEvG,OAAO;EAAA;EAETC,WAAW2C,MAAA,EAAQ;IACjB,IAAI,OAAOA,MAAA,KAAW,YAAY,OAAOA,MAAA,KAAW,YAAY,OAAOA,MAAA,KAAW,aAAaA,MAAA,KAAW,QAAQA,MAAA,KAAW,QAAW;MACtI,OAAOA,MAAA;IAAA;IAET,IAAI,OAAOA,MAAA,CAAOjD,QAAA,KAAa,YAAY;MACzC,OAAOiD,MAAA,CAAOjD,QAAA;IAAA;IAEhB,OAAOiD,MAAA;EAAA;EAAA,IAGLC,SAAA,EAAW;IACb,KAAKN,SAAA,GAAY;IACjB,KAAK3C,OAAA,CAAQ4C,QAAA,GAAW;IACxB,OAAO;EAAA;EAAA,IAGLM,SAAA,EAAW;IACb,KAAKf,SAAA,GAAY;IACjB,KAAKnC,OAAA,CAAQoC,QAAA,GAAW;IACxB,OAAO;EAAA;EAAA,WAGEa,SAAA,EAAW;IACpB,OAAO,IAAI,OAAOA,QAAA;EAAA;EAAA,WAGTC,SAAA,EAAW;IACpB,OAAO,IAAI,OAAOA,QAAA;EAAA;AAAA;AAOtB,MAAAC,OAAA,SAAsBjB,MAAA,CAAO;EAC3BZ,SAASlB,KAAA,EAAO;IACd,IAAI,CAACd,SAAA,CAAU8D,KAAA,CAAML,MAAA,CAAO3C,KAAA,IAAS;MACnC,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,qBAAqB,KAAK1B,GAAA,CAAI8B,WAAA,MAAiB5B,KAAA;IAAA;IAEvG,OAAO;EAAA;AAAA;AAOX,MAAAiD,OAAA,SAAsBF,OAAA,CAAQ;AAM9B,MAAAG,QAAA,SAAuBH,OAAA,CAAQ;AAM/B,MAAAI,SAAA,SAAwBJ,OAAA,CAAQ;AAMhC,MAAAK,MAAA,SAAqBL,OAAA,CAAQ;AAM7B,MAAAM,KAAA,SAAoBvB,MAAA,CAAO;EAKzBjB,YAAYC,MAAA,EAAQoB,QAAA,EAAU;IAC5B,MAAM,OAAOpB,MAAA,KAAW,YAAYA,MAAA,IAAU;MAAEA,MAAA;MAAQoB;IAAA;EAAA;EAE1DhB,SAASlB,KAAA,EAAO;IACd,IAAI,CAACd,SAAA,CAAUwD,OAAA,CAAQC,MAAA,CAAO3C,KAAA,IAAS;MACrC,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,2BAA2BxB,KAAA;IAAA;IAEnF,OAAO;EAAA;AAAA;AAOX,MAAAsD,IAAA,SAAmBxB,MAAA,CAAO;EAKxBjB,YAAYC,MAAA,EAAQoB,QAAA,EAAU;IAC5B,MAAM,OAAOpB,MAAA,KAAW,YAAYA,MAAA,IAAU;MAAEA,MAAA;MAAQoB;IAAA;EAAA;AAAA;AAO5D,MAAAqB,MAAA,SAAqBzB,MAAA,CAAO;EAK1BjB,YAAYC,MAAA,EAAQoB,QAAA,EAAU;IAC5B,MAAM,OAAOpB,MAAA,KAAW,YAAYA,MAAA,IAAU;MAAEA,MAAA;MAAQoB;IAAA;EAAA;AAAA;AAO5D,MAAAsB,OAAA,SAAsB1B,MAAA,CAAO;EAK3BjB,YAAYuB,SAAA,EAAWE,KAAA,EAAO;IAC5B,MAAM,OAAOF,SAAA,KAAc,YAAYA,SAAA,IAAa;MAAEA,SAAA;MAAWE;IAAA;EAAA;EAEnEzC,MAAA,EAAQ;IACN,IAAI,KAAKsC,UAAA,IAAc,KAAKE,MAAA,EAAQ;MAClC,OAAO,WAAW,CAAC,KAAKF,UAAA,EAAY,KAAKE,MAAA,EAAQoB,MAAA,CAAO1E,CAAA,CAAE2E,QAAA,EAAUC,IAAA,CAAK;IAAA;IAE3E,OAAO;EAAA;EAETzC,SAASlB,KAAA,EAAO;IACd,IAAI,CAACd,SAAA,CAAU0E,SAAA,CAAUjB,MAAA,CAAO3C,KAAA,IAAS;MACvC,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,6BAA6BxB,KAAA;IAAA;IAErF,OAAO;EAAA;AAAA;AAKX,MAAM6D,eAAA,GAAkB;EACtBC,MAAA,EAAQ;EACRC,OAAO/D,KAAA,EAAO;IACZ,IAAIgE,KAAA,CAAMhE,KAAA,GAAQ;MAChB,OAAO;IAAA;IAET,IAAI,CAACiE,QAAA,CAASjE,KAAA,GAAQ;MACpB,MAAMkE,IAAA,GAAOlE,KAAA,GAAQ,IAAI,MAAM;MAC/B,OAAO,GAAGkE,IAAA;IAAA;IAGZ,OAAOlE,KAAA;EAAA;EAETC,WAAWD,KAAA,EAAO;IAChB,OAAO,IAAI,KAAK+D,MAAA,CAAO/D,KAAA;EAAA;EAEzBG,WAAWH,KAAA,EAAOJ,OAAA,EAAS;IACzB,OAAOA,OAAA,CAAQM,SAAA,CAAU,KAAK6D,MAAA,CAAO/D,KAAA;EAAA;AAAA;AAIzC,WAAWmE,QAAA,IAAY,CAACd,KAAA,EAAOE,MAAA,EAAQD,IAAA,GAAO;EAC5CnC,MAAA,CAAOiD,MAAA,CAAOD,QAAA,CAASzD,SAAA,EAAWmD,eAAA;AAAA;AAMpC,MAAAQ,OAAA,SAAsB3E,QAAA,CAAS;EAC7BG,MAAA,EAAQ;IACN,OAAO;EAAA;EAETqB,SAASlB,KAAA,EAAO;IACd,IAAI,CAACd,SAAA,CAAUoF,SAAA,CAAU3B,MAAA,CAAO3C,KAAA,IAAS;MACvC,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,6BAA6BxB,KAAA;IAAA;IAErF,OAAO;EAAA;EAETuE,UAAUvE,KAAA,EAAO;IACf,IAAIA,KAAA,KAAU,QAAQA,KAAA,KAAU,QAAW;MACzC,IAAIqB,MAAA,CAAOC,QAAA,CAAStB,KAAA,KAAUA,KAAA,CAAMc,MAAA,KAAW,GAAG;QAEhDd,KAAA,GAAQA,KAAA,CAAM;MAAA;MAEhB,MAAMwE,IAAA,GAAO,OAAOxE,KAAA;MACpB,IAAIwE,IAAA,KAAS,UAAU;QAErB,OAAOxE,KAAA,KAAU,SAAS,OAAOA,KAAA,KAAU,UAAU,QAAQA,KAAA;MAAA;MAE/D,IAAIwE,IAAA,KAAS,UAAU;QAErB,OAAOxE,KAAA,KAAU,IAAI,OAAOA,KAAA,KAAU,IAAI,QAAQA,KAAA;MAAA;IAAA;IAGtD,OAAOA,KAAA;EAAA;AAAA;AAKXqE,OAAA,CAAQI,KAAA,GAAQJ,OAAA,CAAQ3D,SAAA,CAAU6D,SAAA;AAMlC,MAAAG,IAAA,SAAmBhF,QAAA,CAAS;EAC1BG,MAAA,EAAQ;IACN,OAAO;EAAA;AAAA;AAOX,MAAA8E,IAAA,SAAmBjF,QAAA,CAAS;EAI1BmB,YAAYC,MAAA,EAAQ;IAClB;IACA,MAAMlB,OAAA,GAAU,OAAOkB,MAAA,KAAW,YAAYA,MAAA,IAAU;MAAEA;IAAA;IAC1D,KAAKlB,OAAA,GAAUA,OAAA;IACf,KAAKqB,OAAA,GAAUrB,OAAA,CAAQkB,MAAA,IAAU;EAAA;EAEnCjB,MAAA,EAAQ;IACN,OAAO;EAAA;EAETqB,SAASlB,KAAA,EAAO;IACd,IAAI,CAACd,SAAA,CAAU0F,MAAA,CAAOjC,MAAA,CAAO3C,KAAA,IAAS;MACpC,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,0BAA0BxB,KAAA;IAAA;IAElF,OAAO;EAAA;EAETuE,UAAUvE,KAAA,EAAOJ,OAAA,EAAS;IACxB,IAAK,EAACA,OAAA,IAAWA,OAAA,IAAW,CAACA,OAAA,CAAQiF,GAAA,KAAQ,EAAE7E,KAAA,YAAiB8E,IAAA,KAAS,CAAC,CAAC9E,KAAA,EAAO;MAChF,OAAO,IAAI8E,IAAA,CAAK9E,KAAA;IAAA;IAElB,OAAOA,KAAA;EAAA;EAET+E,WAAW/E,KAAA,EAAOgF,aAAA,EAAe;IAC/B,IAAIA,aAAA,IAAiB,CAAC,CAAChF,KAAA,KACpBA,KAAA,KAAUgF,aAAA,IACThF,KAAA,YAAiB8E,IAAA,IAAQE,aAAA,YAAyBF,IAAA,IAAQ9E,KAAA,CAAMiF,OAAA,OAAcD,aAAA,CAAcC,OAAA,KAAY;MAC1G,OAAO;IAAA;IAGT,IAAI,CAACD,aAAA,IAAiB,CAAChF,KAAA,IAASgF,aAAA,KAAkBhF,KAAA,EAAO;MACvD,OAAO;IAAA;IAET,OAAO;EAAA;EAETkF,eAAeC,IAAA,EAAMvF,OAAA,EAAS;IAC5B,IAAIA,OAAA,CAAQwF,QAAA,EAAU;MACpB,IAAIhG,QAAA,CAASiG,EAAA,CAAGC,IAAA,CAAK1F,OAAA,CAAQwF,QAAA,GAAW;QACtC,OAAOhG,QAAA,CAAS+F,IAAA,EAAME,EAAA,CAAGzF,OAAA,CAAQwF,QAAA;MAAA;MAEnC,OAAOD,IAAA,GAAO9F,MAAA,CAAO8F,IAAA,EAAMI,SAAA,CAAU3F,OAAA,CAAQwF,QAAA;IAAA;IAE/C,OAAOhG,QAAA,CAAS+F,IAAA;EAAA;EAElBlF,WAAWkF,IAAA,EAAMvF,OAAA,EAAS;IACxB,IAAI,CAACP,MAAA,CAAOmG,QAAA,CAASL,IAAA,GAAO;MAC1BA,IAAA,GAAO,KAAKD,cAAA,CAAeC,IAAA,EAAMvF,OAAA;IAAA;IAGnC,OAAOuF,IAAA,CAAK3D,MAAA,CAAO;EAAA;AAAA;AAOvB,MAAAiE,QAAA,SAAuB/F,QAAA,CAAS;EAC9BG,MAAA,EAAQ;IACN,OAAO;EAAA;EAETI,WAAWkF,IAAA,EAAM;IACf,OAAO9F,MAAA,CAAO8F,IAAA,EAAM3D,MAAA,CAAO;EAAA;EAE7B+C,UAAUvE,KAAA,EAAOJ,OAAA,EAAS;IACxB,IAAK,EAACA,OAAA,IAAWA,OAAA,IAAW,CAACA,OAAA,CAAQiF,GAAA,KAAQ,CAAC,CAAC7E,KAAA,EAAO;MACpD,OAAOX,MAAA,CAAOW,KAAA,EAAOwB,MAAA,CAAO;IAAA;IAE9B,OAAOxB,KAAA;EAAA;EAET+E,WAAW/E,KAAA,EAAOgF,aAAA,EAAe;IAC/B,IAAIA,aAAA,IAAiB,CAAC,CAAChF,KAAA,IAASgF,aAAA,KAAkBhF,KAAA,EAAO;MACvD,OAAO;IAAA;IAGT,IAAI,CAACgF,aAAA,IAAiB,CAAChF,KAAA,IAASgF,aAAA,KAAkBhF,KAAA,EAAO;MACvD,OAAO;IAAA;IAET,OAAO;EAAA;AAAA;AAOX,MAAA0F,MAAA,SAAqBhG,QAAA,CAAS;EAC5BwB,SAASlB,KAAA,EAAO;IACd,IAAI,CAACjB,CAAA,CAAE4G,aAAA,CAAc3F,KAAA,GAAQ;MAC3B,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,4BAA4BxB,KAAA;IAAA;IAEpF,OAAO;EAAA;AAAA;AAOX,MAAA4F,QAAA,SAAuBlG,QAAA,CAAS;EAC9BwB,SAAA,EAAW;IACT,OAAO;EAAA;EAETjB,WAAWD,KAAA,EAAO;IAChB,OAAO6F,IAAA,CAAK9F,SAAA,CAAUC,KAAA;EAAA;AAAA;AAO1B,MAAA8F,KAAA,SAAoBF,QAAA,CAAS;AAM7B,MAAAG,GAAA,SAAkBrG,QAAA,CAAS;AAM3B,MAAAsG,IAAA,SAAmBtG,QAAA,CAAS;EAI1BmB,YAAYC,MAAA,EAAQ;IAClB;IACA,MAAMlB,OAAA,GAAU,OAAOkB,MAAA,KAAW,YAAYA,MAAA,IAAU;MAAEA;IAAA;IAC1D,KAAKlB,OAAA,GAAUA,OAAA;IACf,KAAKqB,OAAA,GAAUrB,OAAA,CAAQkB,MAAA,IAAU;EAAA;EAEnCjB,MAAA,EAAQ;IACN,QAAQ,KAAKoB,OAAA,CAAQW,WAAA;MAAA,KACd;QACH,OAAO;MAAA,KACJ;QACH,OAAO;MAAA,KACJ;QACH,OAAO;MAAA;QAEP,OAAO,KAAK9B,GAAA;IAAA;EAAA;EAGlBoB,SAASlB,KAAA,EAAO;IACd,IAAI,OAAOA,KAAA,KAAU,YAAY,CAACqB,MAAA,CAAOC,QAAA,CAAStB,KAAA,GAAQ;MACxD,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,0BAA0BxB,KAAA;IAAA;IAElF,OAAO;EAAA;EAETC,WAAWD,KAAA,EAAO;IAChB,IAAI,CAACqB,MAAA,CAAOC,QAAA,CAAStB,KAAA,GAAQ;MAC3B,IAAIiG,KAAA,CAAMC,OAAA,CAAQlG,KAAA,GAAQ;QACxBA,KAAA,GAAQqB,MAAA,CAAO8E,IAAA,CAAKnG,KAAA;MAAA,OAEjB;QACHA,KAAA,GAAQqB,MAAA,CAAO8E,IAAA,CAAKnG,KAAA,CAAML,QAAA;MAAA;IAAA;IAG9B,MAAMyG,GAAA,GAAMpG,KAAA,CAAML,QAAA,CAAS;IAC3B,OAAO,KAAK0G,OAAA,CAAQD,GAAA;EAAA;EAEtBC,QAAQD,GAAA,EAAK;IACX,OAAO,KAAKA,GAAA;EAAA;EAEdjG,WAAWH,KAAA,EAAOJ,OAAA,EAAS;IACzB,IAAI,CAACyB,MAAA,CAAOC,QAAA,CAAStB,KAAA,GAAQ;MAC3B,IAAIiG,KAAA,CAAMC,OAAA,CAAQlG,KAAA,GAAQ;QACxBA,KAAA,GAAQqB,MAAA,CAAO8E,IAAA,CAAKnG,KAAA;MAAA,OAEjB;QACHA,KAAA,GAAQqB,MAAA,CAAO8E,IAAA,CAAKnG,KAAA,CAAML,QAAA;MAAA;IAAA;IAG9B,OAAOC,OAAA,CAAQM,SAAA,CAAUF,KAAA;EAAA;AAAA;AAK7BgG,IAAA,CAAKtF,SAAA,CAAUoD,MAAA,GAAS;AAMxB,MAAAwC,KAAA,SAAoB5G,QAAA,CAAS;EAI3BmB,YAAY0F,OAAA,EAAS;IACnB;IACA,MAAM3G,OAAA,GAAUb,CAAA,CAAE4G,aAAA,CAAcY,OAAA,IAAWA,OAAA,GAAU;MAAEA;IAAA;IACvD,IAAI,CAAC3G,OAAA,CAAQ2G,OAAA,EACX3G,OAAA,CAAQ2G,OAAA,GAAU,IAAIxD,OAAA;IACxB,IAAI,OAAOnD,OAAA,CAAQ2G,OAAA,KAAY,YAAY;MACzC3G,OAAA,CAAQ2G,OAAA,GAAU,IAAI3G,OAAA,CAAQ2G,OAAA;IAAA;IAEhC,KAAKC,QAAA,GAAW5G,OAAA,CAAQ2G,OAAA,CAAQzG,GAAA;IAChC,KAAKF,OAAA,GAAUA,OAAA;EAAA;EAEjBsB,SAASlB,KAAA,EAAO;IACd,IAAI,CAACiG,KAAA,CAAMC,OAAA,CAAQlG,KAAA,GAAQ;MACzB,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,2BAA2BxB,KAAA;IAAA;IAEnF,IAAIA,KAAA,CAAMc,MAAA,KAAW,GAAG;MACtB,MAAM,IAAI7B,eAAA,CAAgBsC,eAAA,CAAgB;IAAA;IAE5C,OAAO;EAAA;AAAA;AAQX,MAAAkF,IAAA,SAAmB/G,QAAA,CAAS;EAC1BwB,SAASlB,KAAA,EAAOJ,OAAA,EAAS;IACvB,IAAI,OAAOI,KAAA,KAAU,YAAY,CAACd,SAAA,CAAUwH,MAAA,CAAO1G,KAAA,MAAW,CAACJ,OAAA,IAAW,CAACA,OAAA,CAAQ+G,aAAA,GAAgB;MACjG,MAAM,IAAI1H,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,0BAA0BxB,KAAA;IAAA;IAElF,OAAO;EAAA;AAAA;AAOX,MAAA4G,MAAA,SAAqBlH,QAAA,CAAS;EAC5BwB,SAASlB,KAAA,EAAOJ,OAAA,EAAS;IACvB,IAAI,OAAOI,KAAA,KAAU,YAAY,CAACd,SAAA,CAAUwH,MAAA,CAAO1G,KAAA,MAAW,CAACJ,OAAA,IAAW,CAACA,OAAA,CAAQ+G,aAAA,GAAgB;MACjG,MAAM,IAAI1H,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,0BAA0BxB,KAAA;IAAA;IAElF,OAAO;EAAA;AAAA;AAOX,MAAA6G,MAAA,SAAqBnH,QAAA,CAAS;EAC5BwB,SAASlB,KAAA,EAAOJ,OAAA,EAAS;IACvB,IAAI,OAAOI,KAAA,KAAU,YAAY,CAACd,SAAA,CAAUwH,MAAA,CAAO1G,KAAA,EAAO,OAAO,CAACJ,OAAA,IAAW,CAACA,OAAA,CAAQ+G,aAAA,GAAgB;MACpG,MAAM,IAAI1H,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,4BAA4BxB,KAAA;IAAA;IAEpF,OAAO;EAAA;AAAA;AA4CX,MAAA8G,OAAA,SAAsBpH,QAAA,CAAS;EAK7BmB,YAAYkG,UAAA,EAAYC,MAAA,EAAQ;IAC9B;IACA,IAAI,OAAOD,UAAA,KAAe,YACxBA,UAAA,GAAa,IAAIA,UAAA;IACnB,KAAKE,UAAA,GAAaF,UAAA;IAClB,KAAKC,MAAA,GAASA,MAAA;EAAA;AAAA;AAclB,MAAAE,IAAA,SAAmBxH,QAAA,CAAS;EAI1BmB,YAAA,GAAesG,IAAA,EAAM;IACnB;IACA,MAAMnH,KAAA,GAAQmH,IAAA,CAAK;IACnB,MAAMvH,OAAA,GAAU,OAAOI,KAAA,KAAU,YAAY,CAACiG,KAAA,CAAMC,OAAA,CAAQlG,KAAA,KAAUA,KAAA,IAAS;MAC7EoH,MAAA,EAAQD,IAAA,CAAKE,MAAA,CAAO,CAAC5E,MAAA,EAAQ6E,OAAA,KAAY;QACvC,OAAO7E,MAAA,CAAO8E,MAAA,CAAOtB,KAAA,CAAMC,OAAA,CAAQoB,OAAA,IAAWA,OAAA,GAAU,CAACA,OAAA;MAAA,GACxD;IAAA;IAEL,KAAKF,MAAA,GAASxH,OAAA,CAAQwH,MAAA;IACtB,KAAKxH,OAAA,GAAUA,OAAA;EAAA;EAEjBsB,SAASlB,KAAA,EAAO;IACd,IAAI,CAAC,KAAKoH,MAAA,CAAOI,QAAA,CAASxH,KAAA,GAAQ;MAChC,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,kCAAkCxB,KAAA,EAAO,KAAKoH,MAAA;IAAA;IAEtG,OAAO;EAAA;AAAA;AAUX,MAAAK,KAAA,SAAoB/H,QAAA,CAAS;EAI3BmB,YAAY2D,IAAA,EAAM;IAChB;IACA,MAAM5E,OAAA,GAAUb,CAAA,CAAE4G,aAAA,CAAcnB,IAAA,IAAQA,IAAA,GAAO;MAAEA;IAAA;IACjD,KAAK5E,OAAA,GAAUA,OAAA;IACf,KAAK4E,IAAA,GAAO,OAAO5E,OAAA,CAAQ4E,IAAA,KAAS,aAAa,IAAI5E,OAAA,CAAQ4E,IAAA,KAAS5E,OAAA,CAAQ4E,IAAA;EAAA;EAEhF3E,MAAA,EAAQ;IACN,OAAO,GAAG,KAAK2E,IAAA,CAAK3E,KAAA;EAAA;EAEtBqB,SAASlB,KAAA,EAAO;IACd,IAAI,CAACiG,KAAA,CAAMC,OAAA,CAAQlG,KAAA,GAAQ;MACzB,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,2BAA2BxB,KAAA;IAAA;IAEnF,OAAO;EAAA;EAAA,OAEF0H,GAAGC,GAAA,EAAKnD,IAAA,EAAM;IACnB,OAAOmD,GAAA,YAAeF,KAAA,IAASE,GAAA,CAAInD,IAAA,YAAgBA,IAAA;EAAA;AAAA;AAkDvD,MAAAoD,QAAA,SAAuBlI,QAAA,CAAS;EAK9BmB,YAAY2D,IAAA,EAAMqD,IAAA,EAAM;IACtB;IACA,MAAMjI,OAAA,GAAUb,CAAA,CAAE4G,aAAA,CAAcnB,IAAA,IAAQA,IAAA,GAAO;MAAEA,IAAA;MAAMqD;IAAA;IACvD,KAAKjI,OAAA,GAAUA,OAAA;IACf,KAAK4E,IAAA,GAAO5E,OAAA,CAAQ4E,IAAA;IACpB,KAAKqD,IAAA,GAAOjI,OAAA,CAAQiI,IAAA;EAAA;EAEtB5H,WAAWD,KAAA,EAAOJ,OAAA,EAAS;IACzB,OAAO,mBAAmBA,OAAA,CAAQkE,MAAA,CAAO9E,GAAA,CAAI8I,QAAA,CAASC,YAAA,CAAa/H,KAAA,EAAOgI,KAAA;EAAA;EAE5E7H,WAAWH,KAAA,EAAOJ,OAAA,EAAS;IACzB,OAAO,mBAAmBA,OAAA,CAAQM,SAAA,CAAUlB,GAAA,CAAI8I,QAAA,CAASC,YAAA,CAAa/H,KAAA,EAAOgI,KAAA;EAAA;AAAA;AAIjFJ,QAAA,CAASlH,SAAA,CAAUoD,MAAA,GAAS;AAuB5B,MAAAmE,SAAA,SAAwBvI,QAAA,CAAS;EAK/BmB,YAAY2D,IAAA,EAAMqD,IAAA,EAAM;IACtB;IACA,MAAMjI,OAAA,GAAUb,CAAA,CAAE4G,aAAA,CAAcnB,IAAA,IAAQA,IAAA,GAAO;MAAEA,IAAA;MAAMqD;IAAA;IACvD,KAAKjI,OAAA,GAAUA,OAAA;IACf,KAAK4E,IAAA,GAAO5E,OAAA,CAAQ4E,IAAA;IACpB,KAAKqD,IAAA,GAAOjI,OAAA,CAAQiI,IAAA;EAAA;EAEtB5H,WAAWD,KAAA,EAAOJ,OAAA,EAAS;IACzB,OAAO,mBAAmBA,OAAA,CAAQkE,MAAA,CAAO9E,GAAA,CAAI8I,QAAA,CAASC,YAAA,CAAa/H,KAAA,EAAOgI,KAAA;EAAA;EAE5E7H,WAAWH,KAAA,EAAOJ,OAAA,EAAS;IACzB,OAAO,mBAAmBA,OAAA,CAAQM,SAAA,CAAUlB,GAAA,CAAI8I,QAAA,CAASC,YAAA,CAAa/H,KAAA,EAAOgI,KAAA;EAAA;AAAA;AAKjFC,SAAA,CAAUvH,SAAA,CAAUoD,MAAA,GAAS;AAO7B,MAAAoE,IAAA,SAAmBxI,QAAA,CAAS;EAC1BwB,SAASlB,KAAA,EAAO;IACd,IAAI,OAAOA,KAAA,KAAU,YAAY,CAACd,SAAA,CAAUiJ,SAAA,CAAUnI,KAAA,GAAQ;MAC5D,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,0BAA0BxB,KAAA;IAAA;IAElF,OAAO;EAAA;AAAA;AASX,MAAAoI,IAAA,SAAmB1I,QAAA,CAAS;EAC1BwB,SAASlB,KAAA,EAAO;IACd,IAAI,OAAOA,KAAA,KAAU,YAAY,CAACd,SAAA,CAAUmJ,IAAA,CAAKrI,KAAA,GAAQ;MACvD,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,0BAA0BxB,KAAA;IAAA;IAElF,OAAO;EAAA;AAAA;AAUX,MAAAsI,OAAA,SAAsB5I,QAAA,CAAS;EAC7BwB,SAASlB,KAAA,EAAO;IACd,IAAI,OAAOA,KAAA,KAAU,YAAY,CAACd,SAAA,CAAUqJ,YAAA,CAAavI,KAAA,GAAQ;MAC/D,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,6BAA6BxB,KAAA;IAAA;IAErF,OAAO;EAAA;AAAA;AAUX,MAAAwI,QAAA,SAAuB9I,QAAA,CAAS;EAC9BwB,SAASlB,KAAA,EAAO;IACd,IAAI,OAAOA,KAAA,KAAU,UAAU;MAC7B,MAAM,IAAIf,eAAA,CAAgBsC,eAAA,CAAgB1C,IAAA,CAAK2C,MAAA,CAAO,4BAA4BxB,KAAA;IAAA;IAEpF,OAAO;EAAA;AAAA;AAiDX,MAAMyI,SAAA,GAAYC,MAAA,CAAOC,OAAA,GAAU;EACjCjJ,QAAA;EACAkB,MAAA;EACAc,IAAA;EACAC,IAAA;EACAG,MAAA;EACAmB,OAAA;EACAC,QAAA;EACAC,SAAA;EACAJ,OAAA;EACAK,MAAA;EACAC,KAAA;EACAqB,IAAA;EACAC,IAAA;EACAc,QAAA;EACApB,OAAA;EACA0B,GAAA;EACAC,IAAA;EACAxC,OAAA;EACAoF,OAAA,EAASpF,OAAA;EACTiD,IAAA;EACAG,MAAA;EACAC,MAAA;EACAnB,MAAA;EACAG,IAAA,EAAMD,QAAA;EACNE,KAAA;EACAgB,OAAA;EACAW,KAAA;EACAP,IAAA;EACAZ,KAAA;EACAhD,IAAA;EACA,oBAAoBC,MAAA;EACpBA,MAAA;EACAqE,QAAA;EACAK,SAAA;EACAC,IAAA;EACAE,IAAA;EACAE,OAAA;EACAzG,MAAA;EACA2G;AAAA;AAGFzJ,CAAA,CAAE8J,IAAA,CAAKJ,SAAA,EAAW,CAACK,QAAA,EAAU1I,IAAA,KAAS;EAEpC,IAAI,CAACe,MAAA,CAAOT,SAAA,CAAUqI,cAAA,CAAe3H,IAAA,CAAK0H,QAAA,EAAU,QAAQ;IAC1DA,QAAA,CAASE,KAAA,GAAQ;IACjBF,QAAA,CAAShJ,GAAA,GAAMgJ,QAAA,CAASpI,SAAA,CAAUZ,GAAA,GAAMM,IAAA;EAAA;AAAA;AAI5C,MAAM6I,UAAA,GAAa;AACnBA,UAAA,CAAWC,QAAA,GAAWpK,OAAA,CAAQ,kCAAkC2J,SAAA;AAChEQ,UAAA,CAAWE,KAAA,GAAQrK,OAAA,CAAQ,+BAA+B2J,SAAA;AAC1DQ,UAAA,CAAWG,OAAA,GAAUtK,OAAA,CAAQ,iCAAiC2J,SAAA;AAC9DQ,UAAA,CAAWI,MAAA,GAASvK,OAAA,CAAQ,gCAAgC2J,SAAA;AAC5DQ,UAAA,CAAWK,KAAA,GAAQxK,OAAA,CAAQ,+BAA+B2J,SAAA;AAC1DQ,UAAA,CAAWM,GAAA,GAAMzK,OAAA,CAAQ,6BAA6B2J,SAAA;AACtDQ,UAAA,CAAWO,SAAA,GAAY1K,OAAA,CAAQ,mCAAmC2J,SAAA;AAClEQ,UAAA,CAAWQ,MAAA,GAAS3K,OAAA,CAAQ,gCAAgC2J,SAAA;AAE5D,MAAMiB,WAAA,GAAcvI,MAAA,CAAOiG,MAAA,CAAO6B,UAAA;AAElC,WAAWU,SAAA,IAAaD,WAAA,EAAa;EACnC3K,CAAA,CAAE8J,IAAA,CAAKc,SAAA,EAAW,CAACC,QAAA,EAAU9J,GAAA,KAAQ;IACnC,IAAI,CAAC8J,QAAA,CAAS9J,GAAA,EAAK;MACjB8J,QAAA,CAAS9J,GAAA,GAAM8J,QAAA,CAASlJ,SAAA,CAAUZ,GAAA,GAAMA,GAAA;IAAA;EAAA;AAAA;AAM9C,WAAW6J,SAAA,IAAa,CAAClB,SAAA,EAAW,GAAGiB,WAAA,GAAc;EACnD3K,CAAA,CAAE8J,IAAA,CAAKc,SAAA,EAAW,CAACC,QAAA,EAAU9J,GAAA,KAAQ;IACnC6J,SAAA,CAAU7J,GAAA,IAAON,gBAAA,CAAiBoK,QAAA;EAAA;AAAA;AAItCzI,MAAA,CAAOiD,MAAA,CAAOqE,SAAA,EAAWQ,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}