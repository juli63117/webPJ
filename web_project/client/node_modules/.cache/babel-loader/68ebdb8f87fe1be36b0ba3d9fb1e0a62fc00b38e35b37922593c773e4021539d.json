{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n__export(exports, {\n  default: () => base_error_default\n});\nclass BaseError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"SequelizeBaseError\";\n  }\n}\nvar base_error_default = BaseError;","map":{"version":3,"names":["__export","exports","default","base_error_default","BaseError","Error","constructor","message","name"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\errors\\base-error.ts"],"sourcesContent":["export interface ErrorOptions {\n  stack?: string;\n}\n\nexport interface CommonErrorProperties {\n  /** The database specific error which triggered this one */\n  readonly parent: Error;\n\n  /** The database specific error which triggered this one */\n  readonly original: Error;\n\n  /** The SQL that triggered the error */\n  readonly sql: string;\n}\n\n/**\n * The Base Error all Sequelize Errors inherit from.\n *\n * Sequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.\n * All sequelize errors inherit from the base JS error object.\n *\n * This means that errors can be accessed using `Sequelize.ValidationError`\n */\nabstract class BaseError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'SequelizeBaseError';\n  }\n}\n\nexport default BaseError;\n"],"mappings":";;;;;;;;;;;AAAAA,QAAA,CAAAC,OAAA;EAAAC,OAAA,EAAAA,CAAA,KAAAC;AAAA;AAuBA,MAAAC,SAAA,SAAiCC,KAAA,CAAM;EACrCC,YAAYC,OAAA,EAAkB;IAC5B,MAAMA,OAAA;IACN,KAAKC,IAAA,GAAO;EAAA;AAAA;AAIhB,IAAOL,kBAAA,GAAQC,SAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}