{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst Op = require(\"../../operators\");\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\nconst QueryTypes = require(\"../../query-types\");\nclass Db2QueryInterface extends QueryInterface {\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.username.toUpperCase());\n    return this.sequelize.query(query, queryOptions);\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    const model = options.model;\n    const wheres = [];\n    const attributes = Object.keys(insertValues);\n    let indexes = [];\n    let indexFields;\n    options = _.clone(options);\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n    indexes = _.map(model.uniqueKeys, value => {\n      return value.fields;\n    });\n    model._indexes.forEach(value => {\n      if (value.unique) {\n        indexFields = value.fields.map(field => {\n          if (_.isPlainObject(field)) {\n            return field.attribute;\n          }\n          return field;\n        });\n        indexes.push(indexFields);\n      }\n    });\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n    where = {\n      [Op.or]: wheres\n    };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    const result = await this.sequelize.query(sql, options);\n    return [result, void 0];\n  }\n  async createTable(tableName, attributes, options, model) {\n    let sql = \"\";\n    options = __spreadValues({}, options);\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === void 0) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n    attributes = _.mapValues(attributes, attribute => this.sequelize.normalizeAttribute(attribute));\n    if (options.indexes) {\n      options.indexes.forEach(fields => {\n        const fieldArr = fields.fields;\n        if (fieldArr.length === 1) {\n          fieldArr.forEach(field => {\n            for (const property in attributes) {\n              if (field === attributes[property].field) {\n                attributes[property].unique = true;\n              }\n            }\n          });\n        }\n      });\n    }\n    if (options.alter) {\n      if (options.indexes) {\n        options.indexes.forEach(fields => {\n          const fieldArr = fields.fields;\n          if (fieldArr.length === 1) {\n            fieldArr.forEach(field => {\n              for (const property in attributes) {\n                if (field === attributes[property].field && attributes[property].unique) {\n                  attributes[property].unique = false;\n                }\n              }\n            });\n          }\n        });\n      }\n    }\n    if (!tableName.schema && (options.schema || !!model && model._schema)) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n    attributes = this.queryGenerator.attributesToSQL(attributes, {\n      table: tableName,\n      context: \"createTable\",\n      withoutForeignKeyConstraints: options.withoutForeignKeyConstraints\n    });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\nexports.Db2QueryInterface = Db2QueryInterface;","map":{"version":3,"names":["_","require","Utils","Op","QueryInterface","QueryTypes","Db2QueryInterface","getForeignKeyReferencesForTable","tableName","options","queryOptions","__spreadProps","__spreadValues","type","FOREIGNKEYS","query","queryGenerator","getForeignKeysQuery","sequelize","config","username","toUpperCase","upsert","insertValues","updateValues","where","model","wheres","attributes","Object","keys","indexes","indexFields","clone","isWhereEmpty","push","map","uniqueKeys","value","fields","_indexes","forEach","unique","field","isPlainObject","attribute","index","intersection","length","or","UPSERT","raw","sql","upsertQuery","result","createTable","forOwn","uniqueKey","customIndex","mapValues","normalizeAttribute","fieldArr","property","alter","schema","_schema","addSchema","attributesToSQL","table","context","withoutForeignKeyConstraints","createTableQuery","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\db2\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst Utils = require('../../utils');\nconst Op = require('../../operators');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with Db2 database\n */\nclass Db2QueryInterface extends QueryInterface {\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n    const query = this.queryGenerator.getForeignKeysQuery(tableName, this.sequelize.config.username.toUpperCase());\n    return this.sequelize.query(query, queryOptions);\n  }\n\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    const model = options.model;\n    const wheres = [];\n    const attributes = Object.keys(insertValues);\n    let indexes = [];\n    let indexFields;\n\n    options = _.clone(options);\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    indexes = _.map(model.uniqueKeys, value => {\n      return value.fields;\n    });\n\n    model._indexes.forEach(value => {\n      if (value.unique) {\n        // fields in the index may both the strings or objects with an attribute property - lets sanitize that\n        indexFields = value.fields.map(field => {\n          if (_.isPlainObject(field)) {\n            return field.attribute;\n          }\n          return field;\n        });\n        indexes.push(indexFields);\n      }\n    });\n\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    const result = await this.sequelize.query(sql, options);\n    return [result, undefined];\n  }\n\n  async createTable(tableName, attributes, options, model) {\n    let sql = '';\n\n    options = { ...options };\n\n    if (options && options.uniqueKeys) {\n      _.forOwn(options.uniqueKeys, uniqueKey => {\n        if (uniqueKey.customIndex === undefined) {\n          uniqueKey.customIndex = true;\n        }\n      });\n    }\n\n    if (model) {\n      options.uniqueKeys = options.uniqueKeys || model.uniqueKeys;\n    }\n    attributes = _.mapValues(\n      attributes,\n      attribute => this.sequelize.normalizeAttribute(attribute)\n    );  \n    if (options.indexes) {\n      options.indexes.forEach(fields=>{\n        const fieldArr = fields.fields;\n        if (fieldArr.length === 1) {\n          fieldArr.forEach(field=>{       \n            for (const property in attributes) {\n              if (field === attributes[property].field) {\n                attributes[property].unique = true;\n              }\n            }\n          });\n        }\n      });\n    }\n    if (options.alter) {\n      if (options.indexes) {\n        options.indexes.forEach(fields=>{\n          const fieldArr = fields.fields;\n          if (fieldArr.length === 1) {\n            fieldArr.forEach(field=>{       \n              for (const property in attributes) {\n                if (field === attributes[property].field && attributes[property].unique) {\n                  attributes[property].unique = false;\n                }\n              }\n            });\n          }\n        });\n      }\n    }\n\n    if (\n      !tableName.schema &&\n      (options.schema || !!model && model._schema)\n    ) {\n      tableName = this.queryGenerator.addSchema({\n        tableName,\n        _schema: !!model && model._schema || options.schema\n      });\n    }\n\n    attributes = this.queryGenerator.attributesToSQL(attributes, { table: tableName, context: 'createTable', withoutForeignKeyConstraints: options.withoutForeignKeyConstraints });\n    sql = this.queryGenerator.createTableQuery(tableName, attributes, options);\n\n    return await this.sequelize.query(sql, options);\n  }\n\n}\n\nexports.Db2QueryInterface = Db2QueryInterface;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA,MAAMA,CAAA,GAAIC,OAAA,CAAQ;AAClB,MAAMC,KAAA,GAAQD,OAAA,CAAQ;AACtB,MAAME,EAAA,GAAKF,OAAA,CAAQ;AACnB,MAAM;EAAEG;AAAA,IAAmBH,OAAA,CAAQ;AACnC,MAAMI,UAAA,GAAaJ,OAAA,CAAQ;AAK3B,MAAAK,iBAAA,SAAgCF,cAAA,CAAe;EAAA,MACvCG,gCAAgCC,SAAA,EAAWC,OAAA,EAAS;IACxD,MAAMC,YAAA,GAAeC,aAAA,CAAAC,cAAA,KAChBH,OAAA,GADgB;MAEnBI,IAAA,EAAMR,UAAA,CAAWS;IAAA;IAEnB,MAAMC,KAAA,GAAQ,KAAKC,cAAA,CAAeC,mBAAA,CAAoBT,SAAA,EAAW,KAAKU,SAAA,CAAUC,MAAA,CAAOC,QAAA,CAASC,WAAA;IAChG,OAAO,KAAKH,SAAA,CAAUH,KAAA,CAAMA,KAAA,EAAOL,YAAA;EAAA;EAAA,MAG/BY,OAAOd,SAAA,EAAWe,YAAA,EAAcC,YAAA,EAAcC,KAAA,EAAOhB,OAAA,EAAS;IAClEA,OAAA,GAAUG,cAAA,KAAKH,OAAA;IAEf,MAAMiB,KAAA,GAAQjB,OAAA,CAAQiB,KAAA;IACtB,MAAMC,MAAA,GAAS;IACf,MAAMC,UAAA,GAAaC,MAAA,CAAOC,IAAA,CAAKP,YAAA;IAC/B,IAAIQ,OAAA,GAAU;IACd,IAAIC,WAAA;IAEJvB,OAAA,GAAUT,CAAA,CAAEiC,KAAA,CAAMxB,OAAA;IAElB,IAAI,CAACP,KAAA,CAAMgC,YAAA,CAAaT,KAAA,GAAQ;MAC9BE,MAAA,CAAOQ,IAAA,CAAKV,KAAA;IAAA;IAIdM,OAAA,GAAU/B,CAAA,CAAEoC,GAAA,CAAIV,KAAA,CAAMW,UAAA,EAAYC,KAAA,IAAS;MACzC,OAAOA,KAAA,CAAMC,MAAA;IAAA;IAGfb,KAAA,CAAMc,QAAA,CAASC,OAAA,CAAQH,KAAA,IAAS;MAC9B,IAAIA,KAAA,CAAMI,MAAA,EAAQ;QAEhBV,WAAA,GAAcM,KAAA,CAAMC,MAAA,CAAOH,GAAA,CAAIO,KAAA,IAAS;UACtC,IAAI3C,CAAA,CAAE4C,aAAA,CAAcD,KAAA,GAAQ;YAC1B,OAAOA,KAAA,CAAME,SAAA;UAAA;UAEf,OAAOF,KAAA;QAAA;QAETZ,OAAA,CAAQI,IAAA,CAAKH,WAAA;MAAA;IAAA;IAIjB,WAAWc,KAAA,IAASf,OAAA,EAAS;MAC3B,IAAI/B,CAAA,CAAE+C,YAAA,CAAanB,UAAA,EAAYkB,KAAA,EAAOE,MAAA,KAAWF,KAAA,CAAME,MAAA,EAAQ;QAC7DvB,KAAA,GAAQ;QACR,WAAWkB,KAAA,IAASG,KAAA,EAAO;UACzBrB,KAAA,CAAMkB,KAAA,IAASpB,YAAA,CAAaoB,KAAA;QAAA;QAE9BhB,MAAA,CAAOQ,IAAA,CAAKV,KAAA;MAAA;IAAA;IAIhBA,KAAA,GAAQ;MAAA,CAAGtB,EAAA,CAAG8C,EAAA,GAAKtB;IAAA;IAEnBlB,OAAA,CAAQI,IAAA,GAAOR,UAAA,CAAW6C,MAAA;IAC1BzC,OAAA,CAAQ0C,GAAA,GAAM;IAEd,MAAMC,GAAA,GAAM,KAAKpC,cAAA,CAAeqC,WAAA,CAAY7C,SAAA,EAAWe,YAAA,EAAcC,YAAA,EAAcC,KAAA,EAAOC,KAAA,EAAOjB,OAAA;IACjG,MAAM6C,MAAA,GAAS,MAAM,KAAKpC,SAAA,CAAUH,KAAA,CAAMqC,GAAA,EAAK3C,OAAA;IAC/C,OAAO,CAAC6C,MAAA,EAAQ;EAAA;EAAA,MAGZC,YAAY/C,SAAA,EAAWoB,UAAA,EAAYnB,OAAA,EAASiB,KAAA,EAAO;IACvD,IAAI0B,GAAA,GAAM;IAEV3C,OAAA,GAAUG,cAAA,KAAKH,OAAA;IAEf,IAAIA,OAAA,IAAWA,OAAA,CAAQ4B,UAAA,EAAY;MACjCrC,CAAA,CAAEwD,MAAA,CAAO/C,OAAA,CAAQ4B,UAAA,EAAYoB,SAAA,IAAa;QACxC,IAAIA,SAAA,CAAUC,WAAA,KAAgB,QAAW;UACvCD,SAAA,CAAUC,WAAA,GAAc;QAAA;MAAA;IAAA;IAK9B,IAAIhC,KAAA,EAAO;MACTjB,OAAA,CAAQ4B,UAAA,GAAa5B,OAAA,CAAQ4B,UAAA,IAAcX,KAAA,CAAMW,UAAA;IAAA;IAEnDT,UAAA,GAAa5B,CAAA,CAAE2D,SAAA,CACb/B,UAAA,EACAiB,SAAA,IAAa,KAAK3B,SAAA,CAAU0C,kBAAA,CAAmBf,SAAA;IAEjD,IAAIpC,OAAA,CAAQsB,OAAA,EAAS;MACnBtB,OAAA,CAAQsB,OAAA,CAAQU,OAAA,CAAQF,MAAA,IAAQ;QAC9B,MAAMsB,QAAA,GAAWtB,MAAA,CAAOA,MAAA;QACxB,IAAIsB,QAAA,CAASb,MAAA,KAAW,GAAG;UACzBa,QAAA,CAASpB,OAAA,CAAQE,KAAA,IAAO;YACtB,WAAWmB,QAAA,IAAYlC,UAAA,EAAY;cACjC,IAAIe,KAAA,KAAUf,UAAA,CAAWkC,QAAA,EAAUnB,KAAA,EAAO;gBACxCf,UAAA,CAAWkC,QAAA,EAAUpB,MAAA,GAAS;cAAA;YAAA;UAAA;QAAA;MAAA;IAAA;IAO1C,IAAIjC,OAAA,CAAQsD,KAAA,EAAO;MACjB,IAAItD,OAAA,CAAQsB,OAAA,EAAS;QACnBtB,OAAA,CAAQsB,OAAA,CAAQU,OAAA,CAAQF,MAAA,IAAQ;UAC9B,MAAMsB,QAAA,GAAWtB,MAAA,CAAOA,MAAA;UACxB,IAAIsB,QAAA,CAASb,MAAA,KAAW,GAAG;YACzBa,QAAA,CAASpB,OAAA,CAAQE,KAAA,IAAO;cACtB,WAAWmB,QAAA,IAAYlC,UAAA,EAAY;gBACjC,IAAIe,KAAA,KAAUf,UAAA,CAAWkC,QAAA,EAAUnB,KAAA,IAASf,UAAA,CAAWkC,QAAA,EAAUpB,MAAA,EAAQ;kBACvEd,UAAA,CAAWkC,QAAA,EAAUpB,MAAA,GAAS;gBAAA;cAAA;YAAA;UAAA;QAAA;MAAA;IAAA;IAS5C,IACE,CAAClC,SAAA,CAAUwD,MAAA,KACVvD,OAAA,CAAQuD,MAAA,IAAU,CAAC,CAACtC,KAAA,IAASA,KAAA,CAAMuC,OAAA,GACpC;MACAzD,SAAA,GAAY,KAAKQ,cAAA,CAAekD,SAAA,CAAU;QACxC1D,SAAA;QACAyD,OAAA,EAAS,CAAC,CAACvC,KAAA,IAASA,KAAA,CAAMuC,OAAA,IAAWxD,OAAA,CAAQuD;MAAA;IAAA;IAIjDpC,UAAA,GAAa,KAAKZ,cAAA,CAAemD,eAAA,CAAgBvC,UAAA,EAAY;MAAEwC,KAAA,EAAO5D,SAAA;MAAW6D,OAAA,EAAS;MAAeC,4BAAA,EAA8B7D,OAAA,CAAQ6D;IAAA;IAC/IlB,GAAA,GAAM,KAAKpC,cAAA,CAAeuD,gBAAA,CAAiB/D,SAAA,EAAWoB,UAAA,EAAYnB,OAAA;IAElE,OAAO,MAAM,KAAKS,SAAA,CAAUH,KAAA,CAAMqC,GAAA,EAAK3C,OAAA;EAAA;AAAA;AAK3C+D,OAAA,CAAQlE,iBAAA,GAAoBA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}