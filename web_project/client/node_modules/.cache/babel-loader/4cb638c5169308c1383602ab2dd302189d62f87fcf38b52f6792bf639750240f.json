{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n__export(exports, {\n  JoinSQLFragmentsError: () => JoinSQLFragmentsError,\n  joinSQLFragments: () => joinSQLFragments\n});\nfunction doesNotWantLeadingSpace(str) {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str) {\n  return /\\($/.test(str);\n}\nfunction singleSpaceJoinHelper(parts) {\n  return parts.reduce(({\n    skipNextLeadingSpace,\n    result\n  }, part) => {\n    if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n      result += part.trim();\n    } else {\n      result += ` ${part.trim()}`;\n    }\n    return {\n      skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n      result\n    };\n  }, {\n    skipNextLeadingSpace: true,\n    result: \"\"\n  }).result;\n}\nfunction joinSQLFragments(array) {\n  if (array.length === 0) return \"\";\n  const truthyArray = array.filter(x => !!x);\n  const flattenedArray = truthyArray.map(fragment => {\n    if (Array.isArray(fragment)) {\n      return joinSQLFragments(fragment);\n    }\n    return fragment;\n  });\n  for (const fragment of flattenedArray) {\n    if (fragment && typeof fragment !== \"string\") {\n      throw new JoinSQLFragmentsError(flattenedArray, fragment, `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`);\n    }\n  }\n  const trimmedArray = flattenedArray.map(x => x.trim());\n  const nonEmptyStringArray = trimmedArray.filter(x => x !== \"\");\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\nclass JoinSQLFragmentsError extends TypeError {\n  constructor(args, fragment, message) {\n    super(message);\n    __publicField(this, \"args\");\n    __publicField(this, \"fragment\");\n    this.args = args;\n    this.fragment = fragment;\n    this.name = \"JoinSQLFragmentsError\";\n  }\n}","map":{"version":3,"names":["__export","exports","JoinSQLFragmentsError","joinSQLFragments","doesNotWantLeadingSpace","str","test","doesNotWantTrailingSpace","singleSpaceJoinHelper","parts","reduce","skipNextLeadingSpace","result","part","trim","array","length","truthyArray","filter","x","flattenedArray","map","fragment","Array","isArray","trimmedArray","nonEmptyStringArray","TypeError","constructor","args","message","__publicField","name"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\utils\\join-sql-fragments.ts"],"sourcesContent":["import { SQLFragment, TruthySQLFragment } from '../generic/sql-fragment';\n\nfunction doesNotWantLeadingSpace(str: string): boolean {\n  return /^[;,)]/.test(str);\n}\nfunction doesNotWantTrailingSpace(str: string): boolean {\n  return /\\($/.test(str);\n}\n\n/**\n * Joins an array of strings with a single space between them,\n * except for:\n *\n * - Strings starting with ';', ',' and ')', which do not get a leading space.\n * - Strings ending with '(', which do not get a trailing space.\n *\n * @param {string[]} parts\n * @returns {string}\n * @private\n */\nfunction singleSpaceJoinHelper(parts: string[]): string {\n  return parts.reduce(\n    ({ skipNextLeadingSpace, result }, part) => {\n      if (skipNextLeadingSpace || doesNotWantLeadingSpace(part)) {\n        result += part.trim();\n      } else {\n        result += ` ${part.trim()}`;\n      }\n      return {\n        skipNextLeadingSpace: doesNotWantTrailingSpace(part),\n        result\n      };\n    },\n    {\n      skipNextLeadingSpace: true,\n      result: ''\n    }\n  ).result;\n}\n\n/**\n * Joins an array with a single space, auto trimming when needed.\n *\n * Certain elements do not get leading/trailing spaces.\n *\n * @param {SQLFragment[]} array The array to be joined. Falsy values are skipped. If an\n * element is another array, this function will be called recursively on that array.\n * Otherwise, if a non-string, non-falsy value is present, a TypeError will be thrown.\n *\n * @returns {string} The joined string.\n *\n * @private\n */\nexport function joinSQLFragments(array: SQLFragment[]): string {\n  if (array.length === 0) return '';\n\n  const truthyArray: TruthySQLFragment[] = array.filter(\n    (x): x is string | SQLFragment[] => !!x\n  );\n  const flattenedArray: string[] = truthyArray.map(\n    (fragment: TruthySQLFragment) => {\n      if (Array.isArray(fragment)) {\n        return joinSQLFragments(fragment);\n      }\n\n      return fragment;\n    }\n  );\n\n  // Ensure strings\n  for (const fragment of flattenedArray) {\n    if (fragment && typeof fragment !== 'string') {\n      throw new JoinSQLFragmentsError(\n        flattenedArray,\n        fragment,\n        `Tried to construct a SQL string with a non-string, non-falsy fragment (${fragment}).`\n      );\n    }\n  }\n\n  // Trim fragments\n  const trimmedArray = flattenedArray.map(x => x.trim());\n\n  // Skip full-whitespace fragments (empty after the above trim)\n  const nonEmptyStringArray = trimmedArray.filter(x => x !== '');\n\n  return singleSpaceJoinHelper(nonEmptyStringArray);\n}\n\nexport class JoinSQLFragmentsError extends TypeError {\n  args: SQLFragment[];\n  fragment: any; // iirc this error is only used when we get an invalid fragment.\n\n  constructor(args: SQLFragment[], fragment: any, message: string) {\n    super(message);\n    \n    this.args = args;\n    this.fragment = fragment;\n    this.name = 'JoinSQLFragmentsError';\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAAA,QAAA,CAAAC,OAAA;EAAAC,qBAAA,EAAAA,CAAA,KAAAA,qBAAA;EAAAC,gBAAA,EAAAA,CAAA,KAAAA;AAAA;AAEA,SAAAC,wBAAiCC,GAAA,EAAsB;EACrD,OAAO,SAASC,IAAA,CAAKD,GAAA;AAAA;AAEvB,SAAAE,yBAAkCF,GAAA,EAAsB;EACtD,OAAO,MAAMC,IAAA,CAAKD,GAAA;AAAA;AAcpB,SAAAG,sBAA+BC,KAAA,EAAyB;EACtD,OAAOA,KAAA,CAAMC,MAAA,CACX,CAAC;IAAEC,oBAAA;IAAsBC;EAAA,GAAUC,IAAA,KAAS;IAC1C,IAAIF,oBAAA,IAAwBP,uBAAA,CAAwBS,IAAA,GAAO;MACzDD,MAAA,IAAUC,IAAA,CAAKC,IAAA;IAAA,OACV;MACLF,MAAA,IAAU,IAAIC,IAAA,CAAKC,IAAA;IAAA;IAErB,OAAO;MACLH,oBAAA,EAAsBJ,wBAAA,CAAyBM,IAAA;MAC/CD;IAAA;EAAA,GAGJ;IACED,oBAAA,EAAsB;IACtBC,MAAA,EAAQ;EAAA,GAEVA,MAAA;AAAA;AAgBG,SAAAT,iBAA0BY,KAAA,EAA8B;EAC7D,IAAIA,KAAA,CAAMC,MAAA,KAAW,GAAG,OAAO;EAE/B,MAAMC,WAAA,GAAmCF,KAAA,CAAMG,MAAA,CAC5CC,CAAA,IAAmC,CAAC,CAACA,CAAA;EAExC,MAAMC,cAAA,GAA2BH,WAAA,CAAYI,GAAA,CAC1CC,QAAA,IAAgC;IAC/B,IAAIC,KAAA,CAAMC,OAAA,CAAQF,QAAA,GAAW;MAC3B,OAAOnB,gBAAA,CAAiBmB,QAAA;IAAA;IAG1B,OAAOA,QAAA;EAAA;EAKX,WAAWA,QAAA,IAAYF,cAAA,EAAgB;IACrC,IAAIE,QAAA,IAAY,OAAOA,QAAA,KAAa,UAAU;MAC5C,MAAM,IAAIpB,qBAAA,CACRkB,cAAA,EACAE,QAAA,EACA,0EAA0EA,QAAA;IAAA;EAAA;EAMhF,MAAMG,YAAA,GAAeL,cAAA,CAAeC,GAAA,CAAIF,CAAA,IAAKA,CAAA,CAAEL,IAAA;EAG/C,MAAMY,mBAAA,GAAsBD,YAAA,CAAaP,MAAA,CAAOC,CAAA,IAAKA,CAAA,KAAM;EAE3D,OAAOX,qBAAA,CAAsBkB,mBAAA;AAAA;AAGxB,MAAAxB,qBAAA,SAAoCyB,SAAA,CAAU;EAInDC,YAAYC,IAAA,EAAqBP,QAAA,EAAeQ,OAAA,EAAiB;IAC/D,MAAMA,OAAA;IAJRC,aAAA;IACAA,aAAA;IAKE,KAAKF,IAAA,GAAOA,IAAA;IACZ,KAAKP,QAAA,GAAWA,QAAA;IAChB,KAAKU,IAAA,GAAO;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}