{"ast":null,"code":"\"use strict\";\n\nconst util = require(\"util\");\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst parserStore = require(\"../parserStore\")(\"db2\");\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst moment = require(\"moment\");\nconst debug = logger.debugContext(\"sql:db2\");\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return \"id\";\n  }\n  getSQLTypeFromJsType(value) {\n    if (Buffer.isBuffer(value)) {\n      return {\n        ParamType: \"INPUT\",\n        DataType: \"BLOB\",\n        Data: value\n      };\n    }\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n    return value;\n  }\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${this.connection.uuid || \"default\"}): ${this.sql}`, this.options);\n    }\n    const errStack = new Error().stack;\n    return new Promise((resolve, reject) => {\n      if (_.startsWith(this.sql, \"BEGIN TRANSACTION\")) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"COMMIT TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"ROLLBACK TRANSACTION\")) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, \"SAVE TRANSACTION\")) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err2 => {\n              if (err2) {\n                reject(this.formatError(err2, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, \"SELECT \")) && SQL.indexOf(\" FROM \", 8) === -1) {\n          if (this.sql.charAt(this.sql.length - 1) === \";\") {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n          newSql += \" FROM SYSIBM.SYSDUMMY1;\";\n        }\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n          stmt.execute(params, (err2, result, outparams) => {\n            debug(`executed(${this.connection.uuid || \"default\"}):${newSql} ${parameters ? util.inspect(parameters, {\n              compact: true,\n              breakLength: Infinity\n            }) : \"\"}`);\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || \"default\"}): ${newSql} ${parameters ? util.inspect(parameters, {\n                compact: true,\n                breakLength: Infinity\n              }) : \"\"}`, Date.now() - queryBegin, this.options);\n            }\n            if (err2 && err2.message) {\n              err2 = this.filterSQLError(err2, this.sql, connection);\n              if (err2 === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err2) {\n              err2.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err2, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === \"object\") {\n                if (_.startsWith(this.sql, \"DELETE FROM \")) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] = metadata[i].SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === \"TIMESTAMP\") {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === \"BLOB\") {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf(\"FOR BIT DATA\") > 0) {\n                        data[i][column] = new Buffer.from(value, \"hex\");\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values2) => {\n      if (values2[key] !== void 0) {\n        bindParam[key] = values2[key];\n        return \"?\";\n      }\n      return void 0;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === \"object\") {\n      bindParam = values;\n    }\n    return [sql, bindParam];\n  }\n  filterSQLError(err, sql, connection) {\n    if (err.message.search(\"SQL0204N\") != -1 && _.startsWith(sql, \"DROP \")) {\n      err = null;\n    } else if (err.message.search(\"SQL0443N\") != -1) {\n      if (this.isDropSchemaQuery()) {\n        connection.querySync(\"DROP TABLE ERRORSCHEMA.ERRORTABLE;\");\n        connection.querySync(this.sql);\n      }\n      err = null;\n    } else if (err.message.search(\"SQL0601N\") != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === \"TABLE\") {\n        let table;\n        const mtarray = match[1].split(\".\");\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        } else {\n          err = null;\n        }\n      } else {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0911N\") != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null;\n      }\n    } else if (err.message.search(\"SQL0605W\") != -1) {\n      err = null;\n    } else if (err.message.search(\"SQL0668N\") != -1 && _.startsWith(sql, \"ALTER TABLE \")) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(\" \")[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) {\n      err = null;\n    }\n    return err;\n  }\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", \"\").replace(\"')\", \"\").replace(/'/g, \"\");\n        }\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === \"Y\" ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === \"Y\" ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = \"DROP TABLE ERRORSCHEMA.ERRORTABLE\";\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n    return result;\n  }\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n  handleShowConstraintsQuery(data) {\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, \"SQL\");\n    });\n  }\n  formatError(err, errStack, conn, parameters) {\n    let match;\n    if (!(err && err.message)) {\n      err[\"message\"] = \"No error message found.\";\n    }\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = \"\";\n      let uniqueKey = \"\";\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0][\"INDNAME\"];\n      }\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n      if (uniqueKey) {\n        if (this.options.where && this.options.where[uniqueKey.column] !== void 0) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues && this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters[\"0\"];\n        }\n      }\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n      });\n      return new sequelizeErrors.UniqueConstraintError({\n        message,\n        errors,\n        parent: err,\n        fields,\n        stack: errStack\n      });\n    }\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) || err.message.match(/SQL0530N/) || err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : void 0;\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n    return new sequelizeErrors.DatabaseError(err, {\n      stack: errStack\n    });\n  }\n  isDropSchemaQuery() {\n    let result = false;\n    if (_.startsWith(this.sql, \"CALL SYSPROC.ADMIN_DROP_SCHEMA\")) {\n      result = true;\n    }\n    return result;\n  }\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith(\"select tablename = t.name, name = ind.name,\");\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"exec sys.sp_helpindex @objname\");\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === \"P\",\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === \"U\",\n          type: item.type\n        };\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => {\n          return ` ${x}`;\n        }).split(\" \"), column => {\n          let columnName = column.trim();\n          if (columnName) {\n            columnName = columnName.replace(/\\+|-/, \"\");\n            currItem.fields.push({\n              attribute: columnName,\n              length: void 0,\n              order: column.indexOf(\"-\") === -1 ? \"ASC\" : \"DESC\",\n              collate: void 0\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) && this.model.rawAttributes[autoIncrementAttribute].field !== void 0) autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["util","require","AbstractQuery","sequelizeErrors","parserStore","_","logger","moment","debug","debugContext","Query","getInsertIdField","getSQLTypeFromJsType","value","Buffer","isBuffer","ParamType","DataType","Data","toString","_run","connection","sql","parameters","benchmark","sequelize","options","queryBegin","Date","now","log","uuid","errStack","Error","stack","Promise","resolve","reject","startsWith","beginTransaction","err","formatError","formatResults","commitTransaction","rollbackTransaction","err2","transaction","name","params","forOwn","key","param","push","SQL","toUpperCase","newSql","isSelectQuery","indexOf","charAt","length","slice","prepare","stmt","execute","result","outparams","inspect","compact","breakLength","Infinity","message","filterSQLError","closeSync","data","metadata","affectedRows","getAffectedRowsSync","fetchAllSync","getColumnMetadataSync","datalen","coltypes","i","SQL_DESC_NAME","SQL_DESC_TYPE_NAME","column","parse","get","utc","from","unshift","run","formatBindParameters","values","dialect","bindParam","replacementFunc","match","values2","Array","isArray","search","isDropSchemaQuery","querySync","table","mtarray","split","dropTable","substring","rowCount","conn","instance","isInsertQuery","handleInsertQuery","plain","record","Object","keys","isShowTablesQuery","isDescribeQuery","_result","Default","replace","Name","type","Type","allowNull","IsNull","defaultValue","primaryKey","KeySeq","autoIncrement","IsIdentity","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","handleSelectQuery","isUpsertQuery","query","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","VERSION","isForeignKeysQuery","isUpdateQuery","isShowConstraintsQuery","handleShowConstraintsQuery","isRawQuery","handleShowTablesQuery","results","map","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","remove","constraint","constraintName","uniqueIndexName","uniqueKey","fields","model","uniqueKeys","where","dataValues","msg","errors","field","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","ForeignKeyConstraintError","index","UnknownConstraintError","DatabaseError","isShowOrDescribeQuery","toLowerCase","currItem","forEach","item","Key_name","primary","keyType","unique","COLNAMES","x","columnName","trim","attribute","order","collate","metaData","autoIncrementAttribute","id","autoIncrementAttributeAlias","prototype","hasOwnProperty","call","rawAttributes","module","exports","default"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\db2\\query.js"],"sourcesContent":["'use strict';\n\nconst util = require('util');\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('db2');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\nconst moment = require('moment');\nconst debug = logger.debugContext('sql:db2');\n\nclass Query extends AbstractQuery {\n  getInsertIdField() {\n    return 'id';\n  }\n\n  getSQLTypeFromJsType(value) {\n    if (Buffer.isBuffer(value)) {\n      return { ParamType: 'INPUT', DataType: 'BLOB', Data: value };\n    }\n\n    if (typeof value === 'bigint') {\n      // The ibm_db module does not handle bigint, send as a string instead:\n      return value.toString();\n    }\n\n    return value;\n  }\n\n  async _run(connection, sql, parameters) {\n    this.sql = sql;\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\n    let queryBegin;\n    if (benchmark) {\n      queryBegin = Date.now();\n    } else {\n      this.sequelize.log(`Executing (${ this.connection.uuid || 'default' }): ${ this.sql}`, this.options);\n    }\n\n    const errStack = new Error().stack;\n\n    return new Promise((resolve, reject) => {\n      // TRANSACTION SUPPORT\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\n        connection.beginTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\n        connection.rollbackTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            resolve(this.formatResults());\n          }\n        });\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\n        connection.commitTransaction(err => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          } else {\n            connection.beginTransaction(err => {\n              if (err) {\n                reject(this.formatError(err, errStack));\n              } else {\n                resolve(this.formatResults());\n              }\n            });\n          }\n        }, this.options.transaction.name);\n      } else {\n        const params = [];\n        if (parameters) {\n          _.forOwn(parameters, (value, key) => {\n            const param = this.getSQLTypeFromJsType(value, key);\n            params.push(param);\n          });\n        }\n        const SQL = this.sql.toUpperCase();\n        let newSql = this.sql;\n        if ((this.isSelectQuery() || _.startsWith(SQL, 'SELECT ')) &&\n            SQL.indexOf(' FROM ', 8) === -1 ) {\n          if (this.sql.charAt(this.sql.length - 1) === ';') {\n            newSql = this.sql.slice(0, this.sql.length - 1);\n          }\n          newSql += ' FROM SYSIBM.SYSDUMMY1;';\n        }\n\n        connection.prepare(newSql, (err, stmt) => {\n          if (err) {\n            reject(this.formatError(err, errStack));\n          }\n\n          stmt.execute(params, (err, result, outparams) => {\n            debug(`executed(${this.connection.uuid || 'default'}):${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`);\n\n            if (benchmark) {\n              this.sequelize.log(`Executed (${this.connection.uuid || 'default'}): ${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`, Date.now() - queryBegin, this.options);\n            }\n\n            if (err && err.message) {\n              err = this.filterSQLError(err, this.sql, connection);\n              if (err === null) {\n                stmt.closeSync();\n                resolve(this.formatResults([], 0));\n              }\n            }\n            if (err) {\n              err.sql = sql;\n              stmt.closeSync();\n              reject(this.formatError(err, errStack, connection, parameters));\n            } else {\n              let data = [];\n              let metadata = [];\n              let affectedRows = 0;\n              if (typeof result === 'object') {\n                if (_.startsWith(this.sql, 'DELETE FROM ')) {\n                  affectedRows = result.getAffectedRowsSync();\n                } else {\n                  data = result.fetchAllSync();\n                  metadata = result.getColumnMetadataSync();\n                }\n                result.closeSync();\n              }\n              stmt.closeSync();\n              const datalen = data.length;\n              if (datalen > 0) {\n                const coltypes = {};\n                for (let i = 0; i < metadata.length; i++) {\n                  coltypes[metadata[i].SQL_DESC_NAME] =\n                      metadata[i].SQL_DESC_TYPE_NAME;\n                }\n                for (let i = 0; i < datalen; i++) {\n                  for (const column in data[i]) {\n                    const parse = parserStore.get(coltypes[column]);\n                    const value = data[i][column];\n                    if (value !== null) {\n                      if (parse) {\n                        data[i][column] = parse(value);\n                      } else if (coltypes[column] === 'TIMESTAMP') {\n                        data[i][column] = new Date(moment.utc(value));\n                      } else if (coltypes[column] === 'BLOB') {\n                        data[i][column] = new Buffer.from(value);\n                      } else if (coltypes[column].indexOf('FOR BIT DATA') > 0) {\n                        data[i][column] = new Buffer.from(value, 'hex');\n                      }\n                    }\n                  }\n                }\n                if (outparams && outparams.length) {\n                  data.unshift(outparams);\n                }\n                resolve(this.formatResults(data, datalen, metadata, connection));\n              } else {\n                resolve(this.formatResults(data, affectedRows));\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  async run(sql, parameters) {\n    return await this._run(this.connection, sql, parameters);\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    let bindParam = {};\n    const replacementFunc = (match, key, values) => {\n      if (values[key] !== undefined) {\n        bindParam[key] = values[key];\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    if (Array.isArray(values) && typeof values[0] === 'object') {\n      bindParam = values;\n    }\n\n    return [sql, bindParam];\n  }\n\n  filterSQLError(err, sql, connection) {\n    if (err.message.search('SQL0204N') != -1 && _.startsWith(sql, 'DROP ')) {\n      err = null; // Ignore table not found error for drop table.\n    } else if (err.message.search('SQL0443N') != -1) {\n      if (this.isDropSchemaQuery()) {\n        // Delete ERRORSCHEMA.ERRORTABLE if it exist.\n        connection.querySync('DROP TABLE ERRORSCHEMA.ERRORTABLE;');\n        // Retry deleting the schema\n        connection.querySync(this.sql);\n      }\n      err = null; // Ignore drop schema error.\n    } else if (err.message.search('SQL0601N') != -1) {\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\n      if (match && match.length > 1 && match[2] === 'TABLE') {\n        let table;\n        const mtarray = match[1].split('.');\n        if (mtarray[1]) {\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\n        } else {\n          table = `\"${mtarray[0]}\"`;\n        }\n        if (connection.dropTable !== false) {\n          connection.querySync(`DROP TABLE ${table}`);\n          err = connection.querySync(sql);\n        }\n        else {\n          err = null;\n        }\n      } else {\n        err = null; // Ignore create schema error.\n      }\n    } else if (err.message.search('SQL0911N') != -1) {\n      if (err.message.search('Reason code \"2\"') != -1) {\n        err = null; // Ignore deadlock error due to program logic.\n      }\n    } else if (err.message.search('SQL0605W') != -1) {\n      err = null; // Ignore warning.\n    } else if (err.message.search('SQL0668N') != -1 &&\n      _.startsWith(sql, 'ALTER TABLE ')) {\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.substring(12).split(' ')[0]}')`);\n      err = connection.querySync(sql);\n    }\n    if (err && err.length === 0) { err = null; }\n    return err;\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @param {Integer} rowCount - The number of affected rows.\n   * @param {Array} metadata - Metadata of the returned result set.\n   * @param {object} conn - The connection object.\n   * @private\n   */\n  formatResults(data, rowCount, metadata, conn) {\n    let result = this.instance;\n    if (this.isInsertQuery(data, metadata)) {\n      this.handleInsertQuery(data, metadata);\n\n      if (!this.instance) {\n        if (this.options.plain) {\n          const record = data[0];\n          result = record[Object.keys(record)[0]];\n        } else {\n          result = data;\n        }\n      }\n    }\n\n    if (this.isShowTablesQuery()) {\n      result = data;\n    } else if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        if (_result.Default) {\n          _result.Default = _result.Default.replace(\"('\", '').replace(\"')\", '').replace(/'/g, '');\n        }\n\n        result[_result.Name] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.IsNull === 'Y' ? true : false,\n          defaultValue: _result.Default,\n          primaryKey: _result.KeySeq > 0,\n          autoIncrement: _result.IsIdentity === 'Y' ? true : false,\n          comment: _result.Comment\n        };\n      }\n    } else if (this.isShowIndexesQuery()) {\n      result = this.handleShowIndexesQuery(data);\n    } else if (this.isSelectQuery()) {\n      result = this.handleSelectQuery(data);\n    } else if (this.isUpsertQuery()) {\n      result = data;\n    } else if (this.isDropSchemaQuery()) {\n      result = data[0];\n      if (conn) {\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\n        conn.querySync(query);\n      }\n    } else if (this.isCallQuery()) {\n      result = data;\n    } else if (this.isBulkUpdateQuery()) {\n      result = data.length;\n    } else if (this.isBulkDeleteQuery()) {\n      result = rowCount;\n    } else if (this.isVersionQuery()) {\n      result = data[0].VERSION;\n    } else if (this.isForeignKeysQuery()) {\n      result = data;\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\n      result = [result, rowCount];\n    } else if (this.isShowConstraintsQuery()) {\n      result = this.handleShowConstraintsQuery(data);\n    } else if (this.isRawQuery()) {\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      result = [data, metadata];\n    } else {\n      result = data;\n    }\n\n    return result;\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => {\n      return {\n        tableName: resultSet.TABLE_NAME,\n        schema: resultSet.TABLE_SCHEMA\n      };\n    });\n  }\n\n  handleShowConstraintsQuery(data) {\n    // Remove SQL Contraints from constraints list.\n    return _.remove(data, constraint => {\n      return !_.startsWith(constraint.constraintName, 'SQL');\n    });\n  }\n\n  formatError(err, errStack, conn, parameters) {\n    let match;\n\n    if (!(err && err.message)) {\n      err['message'] = 'No error message found.';\n    }\n\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\n    if (match && match.length > 0) {\n      let uniqueIndexName = '';\n      let uniqueKey = '';\n      const fields = {};\n      let message = err.message;\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\n\n      if (!!conn && match.length > 3) {\n        uniqueIndexName = conn.querySync(query);\n        uniqueIndexName = uniqueIndexName[0]['INDNAME'];\n      }\n\n      if (this.model && !!uniqueIndexName) {\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\n      }\n\n      if (!uniqueKey && this.options.fields) {\n        uniqueKey = this.options.fields[match[1] - 1];\n      }\n\n      if (uniqueKey) {\n        if (this.options.where &&\n          this.options.where[uniqueKey.column] !== undefined) {\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\n        } else if (this.options.instance && this.options.instance.dataValues &&\n          this.options.instance.dataValues[uniqueKey.column]) {\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\n        } else if (parameters) {\n          fields[uniqueKey.column] = parameters['0'];\n        }\n      }\n\n      if (uniqueKey && !!uniqueKey.msg) {\n        message = uniqueKey.msg;\n      }\n\n      const errors = [];\n      _.forOwn(fields, (value, field) => {\n        errors.push(new sequelizeErrors.ValidationErrorItem(\n          this.getUniqueConstraintErrorMessage(field),\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n          field,\n          value,\n          this.instance,\n          'not_unique'\n        ));\n      });\n\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n    }\n\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/) ||\n      err.message.match(/SQL0530N/) ||\n      err.message.match(/SQL0531N/);\n    if (match && match.length > 0) {\n      return new sequelizeErrors.ForeignKeyConstraintError({\n        fields: null,\n        index: match[1],\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\n    if (match && match.length > 1) {\n      const constraint = match[1];\n      let table = err.sql.match(/table \"(.+?)\"/i);\n      table = table ? table[1] : undefined;\n\n      return new sequelizeErrors.UnknownConstraintError({\n        message: match[0],\n        constraint,\n        table,\n        parent: err,\n        stack: errStack\n      });\n    }\n\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n  }\n\n\n  isDropSchemaQuery() {\n    let result = false;\n\n    if (_.startsWith(this.sql, 'CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\n      result = true;\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith(\"select c.column_name as 'name', c.data_type as 'type', c.is_nullable as 'isnull'\");\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n\n    return result;\n  }\n  isShowIndexesQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\n    return result;\n  }\n\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.keyType === 'P',\n          fields: [],\n          name: item.name,\n          tableName: item.tableName,\n          unique: item.keyType === 'U',\n          type: item.type\n        };\n\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => { return ` ${ x}`; }).split(' '), column => {\n          let columnName = column.trim();\n          if ( columnName ) {\n            columnName = columnName.replace(/\\+|-/, '');\n            currItem.fields.push({\n              attribute: columnName,\n              length: undefined,\n              order: column.indexOf('-') === -1 ? 'ASC' : 'DESC',\n              collate: undefined\n            });\n          }\n        });\n        result.push(currItem);\n      }\n    });\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      let autoIncrementAttributeAlias = null;\n\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute) &&\n          this.model.rawAttributes[autoIncrementAttribute].field !== undefined)\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\n      id = id || results && results[0][this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      id = id || results && results[0][autoIncrementAttribute];\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}