{"ast":null,"code":"\"use strict\";\n\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst AsyncQueue = require(\"./async-queue\").default;\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst sequelizeErrors = require(\"../../errors\");\nconst DataTypes = require(\"../../data-types\").mssql;\nconst parserStore = require(\"../parserStore\")(\"mssql\");\nconst debug = logger.debugContext(\"connection:mssql\");\nconst debugTedious = logger.debugContext(\"connection:mssql:tedious\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"tedious\");\n    this.refreshTypeParser(DataTypes);\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: \"default\",\n        options: {\n          userName: config.username || void 0,\n          password: config.password || void 0\n        }\n      },\n      options: {\n        port: parseInt(config.port, 10),\n        database: config.database,\n        trustServerCertificate: true\n      }\n    };\n    if (config.dialectOptions) {\n      if (config.dialectOptions.options && config.dialectOptions.options.instanceName) {\n        delete connectionConfig.options.port;\n      }\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Connection(connectionConfig);\n        if (connection.state === connection.STATE.INITIALIZED) {\n          connection.connect();\n        }\n        connection.queue = new AsyncQueue();\n        connection.lib = this.lib;\n        const connectHandler = error => {\n          connection.removeListener(\"end\", endHandler);\n          connection.removeListener(\"error\", errorHandler);\n          if (error) return reject(error);\n          debug(\"connection acquired\");\n          resolve(connection);\n        };\n        const endHandler = () => {\n          connection.removeListener(\"connect\", connectHandler);\n          connection.removeListener(\"error\", errorHandler);\n          reject(new Error(\"Connection was closed by remote server\"));\n        };\n        const errorHandler = error => {\n          connection.removeListener(\"connect\", connectHandler);\n          connection.removeListener(\"end\", endHandler);\n          reject(error);\n        };\n        connection.once(\"error\", errorHandler);\n        connection.once(\"end\", endHandler);\n        connection.once(\"connect\", connectHandler);\n        connection.on(\"error\", error => {\n          switch (error.code) {\n            case \"ESOCKET\":\n            case \"ECONNRESET\":\n              this.pool.destroy(connection);\n          }\n        });\n        if (config.dialectOptions && config.dialectOptions.debug) {\n          connection.on(\"debug\", debugTedious.log.bind(debugTedious));\n        }\n      });\n    } catch (error) {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n      switch (error.code) {\n        case \"ESOCKET\":\n          if (error.message.includes(\"connect EHOSTUNREACH\")) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes(\"connect ENETUNREACH\")) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes(\"connect EADDRNOTAVAIL\")) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes(\"connect EAFNOSUPPORT\")) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes(\"getaddrinfo ENOTFOUND\")) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n          if (error.message.includes(\"connect ECONNREFUSED\")) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n          throw new sequelizeErrors.ConnectionError(error);\n        case \"ER_ACCESS_DENIED_ERROR\":\n        case \"ELOGIN\":\n          throw new sequelizeErrors.AccessDeniedError(error);\n        case \"EINVAL\":\n          throw new sequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (connection.closed) {\n      return;\n    }\n    connection.queue.close();\n    return new Promise(resolve => {\n      connection.on(\"end\", resolve);\n      connection.close();\n      debug(\"connection closed\");\n    });\n  }\n  validate(connection) {\n    return connection && (connection.loggedIn || connection.state.name === \"LoggedIn\");\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"names":["AbstractConnectionManager","require","AsyncQueue","default","logger","sequelizeErrors","DataTypes","mssql","parserStore","debug","debugContext","debugTedious","ConnectionManager","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","connect","connectionConfig","server","host","authentication","type","options","userName","username","password","parseInt","database","trustServerCertificate","dialectOptions","instanceName","Object","assign","Promise","resolve","reject","connection","Connection","state","STATE","INITIALIZED","queue","connectHandler","error","removeListener","endHandler","errorHandler","Error","once","on","code","pool","destroy","log","bind","ConnectionError","message","includes","HostNotReachableError","HostNotFoundError","ConnectionRefusedError","AccessDeniedError","InvalidConnectionError","disconnect","closed","close","validate","loggedIn","name","module","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\mssql\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst AsyncQueue = require('./async-queue').default;\nconst { logger } = require('../../utils/logger');\nconst sequelizeErrors = require('../../errors');\nconst DataTypes = require('../../data-types').mssql;\nconst parserStore = require('../parserStore')('mssql');\nconst debug = logger.debugContext('connection:mssql');\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\n\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 1433;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('tedious');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  async connect(config) {\n    const connectionConfig = {\n      server: config.host,\n      authentication: {\n        type: 'default',\n        options: {\n          userName: config.username || undefined,\n          password: config.password || undefined\n        }\n      },\n      options: {\n        port: parseInt(config.port, 10),\n        database: config.database,\n        trustServerCertificate: true\n      }\n    };\n\n    if (config.dialectOptions) {\n      // only set port if no instance name was provided\n      if (\n        config.dialectOptions.options &&\n        config.dialectOptions.options.instanceName\n      ) {\n        delete connectionConfig.options.port;\n      }\n\n      if (config.dialectOptions.authentication) {\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\n      }\n\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\n    }\n\n    try {\n      return await new Promise((resolve, reject) => {\n        const connection = new this.lib.Connection(connectionConfig);\n        if (connection.state === connection.STATE.INITIALIZED) {\n          connection.connect();\n        }\n        connection.queue = new AsyncQueue();\n        connection.lib = this.lib;\n\n        const connectHandler = error => {\n          connection.removeListener('end', endHandler);\n          connection.removeListener('error', errorHandler);\n\n          if (error) return reject(error);\n\n          debug('connection acquired');\n          resolve(connection);\n        };\n\n        const endHandler = () => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('error', errorHandler);\n          reject(new Error('Connection was closed by remote server'));\n        };\n\n        const errorHandler = error => {\n          connection.removeListener('connect', connectHandler);\n          connection.removeListener('end', endHandler);\n          reject(error);\n        };\n\n        connection.once('error', errorHandler);\n        connection.once('end', endHandler);\n        connection.once('connect', connectHandler);\n\n        /*\n         * Permanently attach this event before connection is even acquired\n         * tedious sometime emits error even after connect(with error).\n         *\n         * If we dont attach this even that unexpected error event will crash node process\n         *\n         * E.g. connectTimeout is set higher than requestTimeout\n         */\n        connection.on('error', error => {\n          switch (error.code) {\n            case 'ESOCKET':\n            case 'ECONNRESET':\n              this.pool.destroy(connection);\n          }\n        });\n\n        if (config.dialectOptions && config.dialectOptions.debug) {\n          connection.on('debug', debugTedious.log.bind(debugTedious));\n        }\n      });\n    } catch (error) {\n      if (!error.code) {\n        throw new sequelizeErrors.ConnectionError(error);\n      }\n\n      switch (error.code) {\n        case 'ESOCKET':\n          if (error.message.includes('connect EHOSTUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect ENETUNREACH')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('connect EAFNOSUPPORT')) {\n            throw new sequelizeErrors.HostNotReachableError(error);\n          }\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\n            throw new sequelizeErrors.HostNotFoundError(error);\n          }\n          if (error.message.includes('connect ECONNREFUSED')) {\n            throw new sequelizeErrors.ConnectionRefusedError(error);\n          }\n          throw new sequelizeErrors.ConnectionError(error);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ELOGIN':\n          throw new sequelizeErrors.AccessDeniedError(error);\n        case 'EINVAL':\n          throw new sequelizeErrors.InvalidConnectionError(error);\n        default:\n          throw new sequelizeErrors.ConnectionError(error);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect a connection that is already disconnected\n    if (connection.closed) {\n      return;\n    }\n\n    connection.queue.close();\n\n    return new Promise(resolve => {\n      connection.on('end', resolve);\n      connection.close();\n      debug('connection closed');\n    });\n  }\n\n  validate(connection) {\n    return connection && (connection.loggedIn || connection.state.name === 'LoggedIn');\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}