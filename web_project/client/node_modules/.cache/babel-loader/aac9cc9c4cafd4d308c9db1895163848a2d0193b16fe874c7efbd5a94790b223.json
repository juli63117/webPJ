{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst _ = require(\"lodash\");\nconst DataTypes = require(\"../../data-types\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:mariadb\");\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, __spreadValues({\n      showWarnings: false\n    }, options));\n  }\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n      return void 0;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n    const complete = this._logQuery(sql, debug, parameters);\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n    let results;\n    const errForStack = new Error();\n    try {\n      results = await connection.query(this.sql, parameters);\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n        options.transaction.finished = \"rollback\";\n      }\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n  formatResults(data) {\n    let result = this.instance;\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      if (!this.instance) {\n        if (this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = {\n              [pkField]: startId + i\n            };\n          }\n          return [result, data.affectedRows];\n        }\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith(\"enum\") ? _result.Type.replace(/^enum/i, \"ENUM\") : _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    return result;\n  }\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        rows = rows.map(row => {\n          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === \"string\" && !this.connection.info.hasMinVersion(10, 5, 2)) {\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\n          }\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options, row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n  formatError(err, errStack) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2] : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n          const errors = [];\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: err.errno === ER_ROW_IS_REFERENCED ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err,\n            stack: errStack\n          });\n        }\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n  handleShowIndexesQuery(data) {\n    let currItem;\n    const result = [];\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === \"PRIMARY\",\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n    });\n    return result;\n  }\n}\nmodule.exports = Query;","map":{"version":3,"names":["AbstractQuery","require","sequelizeErrors","_","DataTypes","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","Query","constructor","connection","sequelize","options","__spreadValues","showWarnings","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","values_","push","length","run","parameters","complete","_logQuery","results","errForStack","Error","query","error","transaction","errno","rollback","error_","finished","formatError","stack","warningStatus","logWarnings","formatResults","data","result","instance","isBulkUpdateQuery","isBulkDeleteQuery","affectedRows","isUpsertQuery","isInsertQuery","handleInsertQuery","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","Array","pkField","field","i","isSelectQuery","handleJsonSelectQuery","handleSelectQuery","isUpdateQuery","isCallQuery","isRawQuery","meta","isShowIndexesQuery","handleShowIndexesQuery","isForeignKeysQuery","isShowConstraintsQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Field","type","Type","toLowerCase","startsWith","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","comment","Comment","isVersionQuery","version","rows","fieldRawAttributesMap","_field","keys","modelField","JSON","map","row","fieldName","info","hasMinVersion","parse","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","join","log","err","errStack","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","table","index","DatabaseError","resultSet","tableName","TABLE_NAME","schema","TABLE_SCHEMA","currItem","forEach","item","name","Key_name","primary","Table","unique","Non_unique","Index_type","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","module","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\mariadb\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst DataTypes = require('../../data-types');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mariadb');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      results = await connection.query(this.sql, parameters);\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MariaDB automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MariaDB automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          // ONLY TRUE IF @auto_increment_increment is set to 1 !!\n          // Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node...)\n          const startId = data[this.getInsertIdField()];\n          result = new Array(data.affectedRows);\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\n          for (let i = 0; i < data.affectedRows; i++) {\n            result[i] = { [pkField]: startId + i };\n          }\n          return [result, data.affectedRows];\n        }\n\n        return [data[this.getInsertIdField()], data.affectedRows];\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      this.handleJsonSelectQuery(data);\n\n      return this.handleSelectQuery(data);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isRawQuery()) {\n      const meta = data.meta;\n      delete data.meta;\n      return [data, meta];\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\n            'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n\n    return result;\n  }\n\n  handleJsonSelectQuery(rows) {\n    if (!this.model || !this.model.fieldRawAttributesMap) {\n      return;\n    }\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\n      const modelField = this.model.fieldRawAttributesMap[_field];\n      if (modelField.type instanceof DataTypes.JSON) {\n        // Value is returned as String, not JSON\n        rows = rows.map(row => {\n          // JSON fields for MariaDB server 10.5.2+ already results in JSON format, skip JSON.parse\n          // this is due to this https://jira.mariadb.org/browse/MDEV-17832 and how mysql2 connector interacts with MariaDB and JSON fields\n          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === 'string' && !this.connection.info.hasMinVersion(10, 5, 2)) {\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\n          }\n          if (DataTypes.JSON.parse) {\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\n              row[modelField.fieldName]);\n          }\n          return row;\n        });\n      }\n    }\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    switch (err.errno) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(\n          /Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?\\s.*$/);\n\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: err.errno === ER_ROW_IS_REFERENCED ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowTablesQuery(results) {\n    return results.map(resultSet => ({\n      tableName: resultSet.TABLE_NAME,\n      schema: resultSet.TABLE_SCHEMA\n    }));\n  }\n\n  handleShowIndexesQuery(data) {\n\n    let currItem;\n    const result = [];\n\n    data.forEach(item => {\n      if (!currItem || currItem.name !== item.Key_name) {\n        currItem = {\n          primary: item.Key_name === 'PRIMARY',\n          fields: [],\n          name: item.Key_name,\n          tableName: item.Table,\n          unique: item.Non_unique !== 1,\n          type: item.Index_type\n        };\n        result.push(currItem);\n      }\n\n      currItem.fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n    });\n\n    return result;\n  }\n}\n\nmodule.exports = Query;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}