{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst SqlString = require(\"../../sql-string\");\nconst QueryTypes = require(\"../../query-types\");\nconst Dot = require(\"dottie\");\nconst deprecations = require(\"../../utils/deprecations\");\nconst uuid = require(\"uuid\").v4;\nconst {\n  safeStringifyJson\n} = require(\"../../utils.js\");\nclass AbstractQuery {\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = __spreadValues({\n      plain: false,\n      raw: false,\n      logging: console.log\n    }, options);\n    this.checkLoggingOption();\n    if (options.rawErrors) {\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n    options = options || {};\n    if (typeof replacementFunc !== \"function\") {\n      options = replacementFunc || {};\n      replacementFunc = void 0;\n    }\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values2) => {\n          if (values2[key] !== void 0) {\n            return match;\n          }\n          return void 0;\n        };\n      } else {\n        replacementFunc = (match, key, values2, timeZone2, dialect2) => {\n          if (values2[key] !== void 0) {\n            return SqlString.escape(values2[key], timeZone2, dialect2);\n          }\n          return void 0;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values2, timeZone2, dialect2, options2) => {\n        if (origReplacementFunc(match, key, values2, timeZone2, dialect2, options2) !== void 0) {\n          return match;\n        }\n        return void 0;\n      };\n    }\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if (key === \"$\") {\n        return options.skipUnescape ? match : key;\n      }\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === void 0) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n  formatError(error, errStack) {\n    error.stack = errStack;\n    return error;\n  }\n  run() {\n    throw new Error(\"The run method wasn't overwritten!\");\n  }\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      this.options.logging = console.log;\n    }\n  }\n  getInsertIdField() {\n    return \"insertId\";\n  }\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : \"Must be unique\";\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, \"\"))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n  isInsertQuery(results, metaData) {\n    let result = true;\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n    result = result && this.sql.toLowerCase().startsWith(\"insert into\");\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n    return result;\n  }\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n  handleSelectQuery(results) {\n    let result = null;\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result2 => _.reduce(fieldMap, (result3, name, field) => {\n        if (result3[field] !== void 0 && name !== field) {\n          result3[name] = result3[field];\n          delete result3[field];\n        }\n        return result3;\n      }, result2));\n    }\n    if (this.options.raw) {\n      result = results.map(result2 => {\n        let o = {};\n        for (const key in result2) {\n          if (Object.prototype.hasOwnProperty.call(result2, key)) {\n            o[key] = result2[key];\n          }\n        }\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n        return o;\n      });\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n  isShowOrDescribeQuery() {\n    let result = false;\n    result = result || this.sql.toLowerCase().startsWith(\"show\");\n    result = result || this.sql.toLowerCase().startsWith(\"describe\");\n    return result;\n  }\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith(\"call\");\n  }\n  _logQuery(sql, debugContext, parameters) {\n    const {\n      connection,\n      options\n    } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = \"\";\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(\";\") ? \"\" : \";\";\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p => safeStringifyJson(p)).join(\", \");\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || \"default\"}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n  static _groupJoinData(rows, includeOptions, options) {\n    if (!rows.length) {\n      return [];\n    }\n    let i;\n    let length;\n    let $i;\n    let $length;\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString;\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key2, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key2)) {\n        memo[key2] = key2.substr(0, key2.lastIndexOf(\".\"));\n      }\n      return memo[key2];\n    };\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key2)) {\n        const index = key2.lastIndexOf(\".\");\n        removeKeyPrefixMemo[key2] = key2.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key2];\n    };\n    const keyPrefixMemo = {};\n    const keyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key2)) {\n        const prefixString = keyPrefixString(key2, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split(\".\") : [];\n        }\n        keyPrefixMemo[key2] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key2];\n    };\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key2 => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key2)) {\n        const prefix2 = keyPrefix(key2);\n        const length2 = prefix2.length;\n        lastKeyPrefixMemo[key2] = !length2 ? \"\" : prefix2[length2 - 1];\n      }\n      return lastKeyPrefixMemo[key2];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes2 = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes2 = uniqueKeyAttributes2.result(`${uniqueKeyAttributes2.findKey()}.fields`).map(field => _.findKey(model.attributes, chr => chr.field === field)).value();\n      return uniqueKeyAttributes2;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString(\"hex\") : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n      if (rowsI === 0) {\n        keys = _.sortBy(Object.keys(row), item => [item.split(\".\").length]);\n        keyLength = keys.length;\n      }\n      if (checkExisting) {\n        topExists = false;\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = \"\";\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        } else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n      topValues = values = {};\n      $prevKeyPrefix = void 0;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[\"\"] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = void 0;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        if ($prevKeyPrefix !== void 0 && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                } else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n            values = {};\n          } else {\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            } else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n    return results;\n  }\n}\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;","map":{"version":3,"names":["_","require","SqlString","QueryTypes","Dot","deprecations","uuid","v4","safeStringifyJson","AbstractQuery","constructor","connection","sequelize","options","instance","model","__spreadValues","plain","raw","logging","console","log","checkLoggingOption","rawErrors","formatError","prototype","formatBindParameters","sql","values","dialect","replacementFunc","skipValueReplace","match","key","values2","timeZone2","dialect2","escape","origReplacementFunc","options2","timeZone","list","Array","isArray","replace","skipUnescape","replVal","Error","error","errStack","stack","run","noTrueLogging","getInsertIdField","getUniqueConstraintErrorMessage","field","message","Object","keys","uniqueKeys","fields","includes","msg","isRawQuery","type","RAW","isVersionQuery","VERSION","isUpsertQuery","UPSERT","isInsertQuery","results","metaData","result","INSERT","toLowerCase","startsWith","hasOwnProperty","call","handleInsertQuery","autoIncrementAttribute","id","isShowTablesQuery","SHOWTABLES","handleShowTablesQuery","flatten","map","resultSet","isShowIndexesQuery","SHOWINDEXES","isShowConstraintsQuery","SHOWCONSTRAINTS","isDescribeQuery","DESCRIBE","isSelectQuery","SELECT","isBulkUpdateQuery","BULKUPDATE","isBulkDeleteQuery","BULKDELETE","isForeignKeysQuery","FOREIGNKEYS","isUpdateQuery","UPDATE","handleSelectQuery","fieldMap","result2","reduce","result3","name","o","nest","transform","hasJoin","_groupJoinData","includeMap","includeNames","checkExisting","hasMultiAssociation","bulkBuild","isNewRecord","include","includeValidated","attributes","originalAttributes","length","isShowOrDescribeQuery","isCallQuery","_logQuery","debugContext","parameters","benchmark","logQueryParameters","startTime","Date","now","logParameter","delimiter","endsWith","paramStr","p","join","fmt","afterMsg","rows","includeOptions","i","$i","$length","rowsI","row","rowsLength","keyI","keyLength","prevKey","topValues","topExists","itemHash","parentHash","topHash","resultMap","$keyPrefix","$keyPrefixString","$prevKeyPrefixString","$prevKeyPrefix","$lastKeyPrefix","$current","$parent","previousPiece","buildIncludeMap","piece","keyPrefixStringMemo","keyPrefixString","key2","memo","substr","lastIndexOf","removeKeyPrefixMemo","removeKeyPrefix","index","keyPrefixMemo","keyPrefix","prefixString","split","lastKeyPrefixMemo","lastKeyPrefix","prefix2","length2","getUniqueKeyAttributes","uniqueKeyAttributes2","chain","findKey","chr","value","stringify","obj","Buffer","toString","primaryKeyAttributes","uniqueKeyAttributes","prefix","sortBy","item","isEmpty","forEach","association","isSingleAssociation","push","module","exports","default"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\abstract\\query.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst SqlString = require('../../sql-string');\nconst QueryTypes = require('../../query-types');\nconst Dot = require('dottie');\nconst deprecations = require('../../utils/deprecations');\nconst uuid = require('uuid').v4;\nconst { safeStringifyJson } = require('../../utils.js');\n\nclass AbstractQuery {\n\n  constructor(connection, sequelize, options) {\n    this.uuid = uuid();\n    this.connection = connection;\n    this.instance = options.instance;\n    this.model = options.model;\n    this.sequelize = sequelize;\n    this.options = {\n      plain: false,\n      raw: false,\n      // eslint-disable-next-line no-console\n      logging: console.log,\n      ...options\n    };\n    this.checkLoggingOption();\n\n    if (options.rawErrors) {\n      // The default implementation in AbstractQuery just returns the same\n      // error object. By overidding this.formatError, this saves every dialect\n      // having to check for options.rawErrors in their own formatError\n      // implementations.\n      this.formatError = AbstractQuery.prototype.formatError;\n    }\n  }\n\n  /**\n   * rewrite query with parameters\n   *\n   * Examples:\n   *\n   *   query.formatBindParameters('select $1 as foo', ['fooval']);\n   *\n   *   query.formatBindParameters('select $foo as foo', { foo: 'fooval' });\n   *\n   * Options\n   *   skipUnescape: bool, skip unescaping $$\n   *   skipValueReplace: bool, do not replace (but do unescape $$). Check correct syntax and if all values are available\n   *\n   * @param {string} sql\n   * @param {object|Array} values\n   * @param {string} dialect\n   * @param {Function} [replacementFunc]\n   * @param {object} [options]\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect, replacementFunc, options) {\n    if (!values) {\n      return [sql, []];\n    }\n\n    options = options || {};\n    if (typeof replacementFunc !== 'function') {\n      options = replacementFunc || {};\n      replacementFunc = undefined;\n    }\n\n    if (!replacementFunc) {\n      if (options.skipValueReplace) {\n        replacementFunc = (match, key, values) => {\n          if (values[key] !== undefined) {\n            return match;\n          }\n          return undefined;\n        };\n      } else {\n        replacementFunc = (match, key, values, timeZone, dialect) => {\n          if (values[key] !== undefined) {\n            return SqlString.escape(values[key], timeZone, dialect);\n          }\n          return undefined;\n        };\n      }\n    } else if (options.skipValueReplace) {\n      const origReplacementFunc = replacementFunc;\n      replacementFunc = (match, key, values, timeZone, dialect, options) => {\n        if (origReplacementFunc(match, key, values, timeZone, dialect, options) !== undefined) {\n          return match;\n        }\n        return undefined;\n      };\n    }\n\n    const timeZone = null;\n    const list = Array.isArray(values);\n    sql = sql.replace(/\\B\\$(\\$|\\w+)/g, (match, key) => {\n      if ('$' === key) {\n        return options.skipUnescape ? match : key;\n      }\n\n      let replVal;\n      if (list) {\n        if (key.match(/^[1-9]\\d*$/)) {\n          key = key - 1;\n          replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n        }\n      } else if (!key.match(/^\\d*$/)) {\n        replVal = replacementFunc(match, key, values, timeZone, dialect, options);\n      }\n      if (replVal === undefined) {\n        throw new Error(`Named bind parameter \"${match}\" has no value in the given object.`);\n      }\n      return replVal;\n    });\n    return [sql, []];\n  }\n\n  /**\n   * Formats a raw database error from the database library into a common Sequelize exception.\n   *\n   * @param {Error} error The exception object.\n   * @param {object} errStack The stack trace that started the database query.\n   * @returns {BaseError} the new formatted error object.\n   */\n  formatError(error, errStack) {\n    // Default implementation, no formatting.\n    // Each dialect overrides this method to parse errors from their respective the database engines.\n    error.stack = errStack;\n\n    return error;\n  }\n\n  /**\n   * Execute the passed sql query.\n   *\n   * Examples:\n   *\n   *     query.run('SELECT 1')\n   *\n   * @private\n   */\n  run() {\n    throw new Error('The run method wasn\\'t overwritten!');\n  }\n\n  /**\n   * Check the logging option of the instance and print deprecation warnings.\n   *\n   * @private\n   */\n  checkLoggingOption() {\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      // eslint-disable-next-line no-console\n      this.options.logging = console.log;\n    }\n  }\n\n  /**\n   * Get the attributes of an insert query, which contains the just inserted id.\n   *\n   * @returns {string} The field name.\n   * @private\n   */\n  getInsertIdField() {\n    return 'insertId';\n  }\n\n  getUniqueConstraintErrorMessage(field) {\n    let message = field ? `${field} must be unique` : 'Must be unique';\n\n    if (field && this.model) {\n      for (const key of Object.keys(this.model.uniqueKeys)) {\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, ''))) {\n          if (this.model.uniqueKeys[key].msg) {\n            message = this.model.uniqueKeys[key].msg;\n          }\n        }\n      }\n    }\n    return message;\n  }\n\n  isRawQuery() {\n    return this.options.type === QueryTypes.RAW;\n  }\n\n  isVersionQuery() {\n    return this.options.type === QueryTypes.VERSION;\n  }\n\n  isUpsertQuery() {\n    return this.options.type === QueryTypes.UPSERT;\n  }\n\n  isInsertQuery(results, metaData) {\n    let result = true;\n\n    if (this.options.type === QueryTypes.INSERT) {\n      return true;\n    }\n\n    // is insert query if sql contains insert into\n    result = result && this.sql.toLowerCase().startsWith('insert into');\n\n    // is insert query if no results are passed or if the result has the inserted id\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\n\n    // is insert query if no metadata are passed or if the metadata has the inserted id\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\n\n    return result;\n  }\n\n  handleInsertQuery(results, metaData) {\n    if (this.instance) {\n      // add the inserted row id to the instance\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\n      let id = null;\n\n      id = id || results && results[this.getInsertIdField()];\n      id = id || metaData && metaData[this.getInsertIdField()];\n\n      this.instance[autoIncrementAttribute] = id;\n    }\n  }\n\n  isShowTablesQuery() {\n    return this.options.type === QueryTypes.SHOWTABLES;\n  }\n\n  handleShowTablesQuery(results) {\n    return _.flatten(results.map(resultSet => Object.values(resultSet)));\n  }\n\n  isShowIndexesQuery() {\n    return this.options.type === QueryTypes.SHOWINDEXES;\n  }\n\n  isShowConstraintsQuery() {\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\n  }\n\n  isDescribeQuery() {\n    return this.options.type === QueryTypes.DESCRIBE;\n  }\n\n  isSelectQuery() {\n    return this.options.type === QueryTypes.SELECT;\n  }\n\n  isBulkUpdateQuery() {\n    return this.options.type === QueryTypes.BULKUPDATE;\n  }\n\n  isBulkDeleteQuery() {\n    return this.options.type === QueryTypes.BULKDELETE;\n  }\n\n  isForeignKeysQuery() {\n    return this.options.type === QueryTypes.FOREIGNKEYS;\n  }\n\n  isUpdateQuery() {\n    return this.options.type === QueryTypes.UPDATE;\n  }\n\n  handleSelectQuery(results) {\n    let result = null;\n\n    // Map raw fields to names if a mapping is provided\n    if (this.options.fieldMap) {\n      const fieldMap = this.options.fieldMap;\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\n        if (result[field] !== undefined && name !== field) {\n          result[name] = result[field];\n          delete result[field];\n        }\n        return result;\n      }, result));\n    }\n\n    // Raw queries\n    if (this.options.raw) {\n      result = results.map(result => {\n        let o = {};\n\n        for (const key in result) {\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\n            o[key] = result[key];\n          }\n        }\n\n        if (this.options.nest) {\n          o = Dot.transform(o);\n        }\n\n        return o;\n      });\n    // Queries with include\n    } else if (this.options.hasJoin === true) {\n      results = AbstractQuery._groupJoinData(results, {\n        model: this.model,\n        includeMap: this.options.includeMap,\n        includeNames: this.options.includeNames\n      }, {\n        checkExisting: this.options.hasMultiAssociation\n      });\n\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        include: this.options.include,\n        includeNames: this.options.includeNames,\n        includeMap: this.options.includeMap,\n        includeValidated: true,\n        attributes: this.options.originalAttributes || this.options.attributes,\n        raw: true\n      });\n    // Regular queries\n    } else {\n      result = this.model.bulkBuild(results, {\n        isNewRecord: false,\n        raw: true,\n        attributes: this.options.originalAttributes || this.options.attributes\n      });\n    }\n\n    // return the first real model instance if options.plain is set (e.g. Model.find)\n    if (this.options.plain) {\n      result = result.length === 0 ? null : result[0];\n    }\n    return result;\n  }\n\n  isShowOrDescribeQuery() {\n    let result = false;\n\n    result = result || this.sql.toLowerCase().startsWith('show');\n    result = result || this.sql.toLowerCase().startsWith('describe');\n\n    return result;\n  }\n\n  isCallQuery() {\n    return this.sql.toLowerCase().startsWith('call');\n  }\n\n  /**\n   * @param {string} sql\n   * @param {Function} debugContext\n   * @param {Array|object} parameters\n   * @protected\n   * @returns {Function} A function to call after the query was completed.\n   */\n  _logQuery(sql, debugContext, parameters) {\n    const { connection, options } = this;\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\n    const startTime = Date.now();\n    let logParameter = '';\n\n    if (logQueryParameters && parameters) {\n      const delimiter = sql.endsWith(';') ? '' : ';';\n      let paramStr;\n      if (Array.isArray(parameters)) {\n        paramStr = parameters.map(p=>safeStringifyJson(p)).join(', ');\n      } else {\n        paramStr = safeStringifyJson(parameters);\n      }\n      logParameter = `${delimiter} ${paramStr}`;\n    }\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\n    const msg = `Executing ${fmt}`;\n    debugContext(msg);\n    if (!benchmark) {\n      this.sequelize.log(`Executing ${fmt}`, options);\n    }\n    return () => {\n      const afterMsg = `Executed ${fmt}`;\n      debugContext(afterMsg);\n      if (benchmark) {\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\n      }\n    };\n  }\n\n  /**\n   * The function takes the result of the query execution and groups\n   * the associated data by the callee.\n   *\n   * Example:\n   *   groupJoinData([\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 1 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 2 }\n   *     }, {\n   *       some: 'data',\n   *       id: 1,\n   *       association: { foo: 'bar', id: 3 }\n   *     }\n   *   ])\n   *\n   * Result:\n   *   Something like this:\n   *\n   *   [\n   *     {\n   *       some: 'data',\n   *       id: 1,\n   *       association: [\n   *         { foo: 'bar', id: 1 },\n   *         { foo: 'bar', id: 2 },\n   *         { foo: 'bar', id: 3 }\n   *       ]\n   *     }\n   *   ]\n   *\n   * @param {Array} rows\n   * @param {object} includeOptions\n   * @param {object} options\n   * @private\n   */\n  static _groupJoinData(rows, includeOptions, options) {\n\n    /*\n     * Assumptions\n     * ID is not necessarily the first field\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\n     * Parent keys will be seen before any include/child keys\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\n     */\n\n    /*\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\n     */\n    if (!rows.length) {\n      return [];\n    }\n\n    // Generic looping\n    let i;\n    let length;\n    let $i;\n    let $length;\n    // Row specific looping\n    let rowsI;\n    let row;\n    const rowsLength = rows.length;\n    // Key specific looping\n    let keys;\n    let key;\n    let keyI;\n    let keyLength;\n    let prevKey;\n    let values;\n    let topValues;\n    let topExists;\n    const checkExisting = options.checkExisting;\n    // If we don't have to deduplicate we can pre-allocate the resulting array\n    let itemHash;\n    let parentHash;\n    let topHash;\n    const results = checkExisting ? [] : new Array(rowsLength);\n    const resultMap = {};\n    const includeMap = {};\n    // Result variables for the respective functions\n    let $keyPrefix;\n    let $keyPrefixString;\n    let $prevKeyPrefixString; // eslint-disable-line\n    let $prevKeyPrefix;\n    let $lastKeyPrefix;\n    let $current;\n    let $parent;\n    // Map each key to an include option\n    let previousPiece;\n    const buildIncludeMap = piece => {\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\n        includeMap[key] = $current = $current.includeMap[piece];\n        if (previousPiece) {\n          previousPiece = `${previousPiece}.${piece}`;\n        } else {\n          previousPiece = piece;\n        }\n        includeMap[previousPiece] = $current;\n      }\n    };\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\n    const keyPrefixStringMemo = {};\n    const keyPrefixString = (key, memo) => {\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\n        memo[key] = key.substr(0, key.lastIndexOf('.'));\n      }\n      return memo[key];\n    };\n    // Removes the prefix from a key ('id' for 'User.Results.id')\n    const removeKeyPrefixMemo = {};\n    const removeKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\n        const index = key.lastIndexOf('.');\n        removeKeyPrefixMemo[key] = key.substr(index === -1 ? 0 : index + 1);\n      }\n      return removeKeyPrefixMemo[key];\n    };\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\n    const keyPrefixMemo = {};\n    const keyPrefix = key => {\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\n        }\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\n      }\n      return keyPrefixMemo[key];\n    };\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\n    const lastKeyPrefixMemo = {};\n    const lastKeyPrefix = key => {\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\n        const prefix = keyPrefix(key);\n        const length = prefix.length;\n\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\n      }\n      return lastKeyPrefixMemo[key];\n    };\n    const getUniqueKeyAttributes = model => {\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\n      uniqueKeyAttributes = uniqueKeyAttributes\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\n        .value();\n\n      return uniqueKeyAttributes;\n    };\n    const stringify = obj => obj instanceof Buffer ? obj.toString('hex') : obj;\n    let primaryKeyAttributes;\n    let uniqueKeyAttributes;\n    let prefix;\n\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\n      row = rows[rowsI];\n\n      // Keys are the same for all rows, so only need to compute them on the first row\n      if (rowsI === 0) {\n        keys = _.sortBy(Object.keys(row), item => [item.split('.').length]);\n        keyLength = keys.length;\n      }\n\n      if (checkExisting) {\n        topExists = false;\n\n        // Compute top level hash key (this is usually just the primary key values)\n        $length = includeOptions.model.primaryKeyAttributes.length;\n        topHash = '';\n        if ($length === 1) {\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\n        }\n        else if ($length > 1) {\n          for ($i = 0; $i < $length; $i++) {\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\n          }\n        }\n        else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n            topHash += row[uniqueKeyAttributes[$i]];\n          }\n        }\n      }\n\n      topValues = values = {};\n      $prevKeyPrefix = undefined;\n      for (keyI = 0; keyI < keyLength; keyI++) {\n        key = keys[keyI];\n\n        // The string prefix isn't actualy needed\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\n        // TODO: Find a better way?\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\n        $keyPrefix = keyPrefix(key);\n\n        // On the first row we compute the includeMap\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\n          if (!$keyPrefix.length) {\n            includeMap[key] = includeMap[''] = includeOptions;\n          } else {\n            $current = includeOptions;\n            previousPiece = undefined;\n            $keyPrefix.forEach(buildIncludeMap);\n          }\n        }\n        // End of key set\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\n          if (checkExisting) {\n            // Compute hash key for this set instance\n            // TODO: Optimize\n            length = $prevKeyPrefix.length;\n            $parent = null;\n            parentHash = null;\n\n            if (length) {\n              for (i = 0; i < length; i++) {\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n                $length = primaryKeyAttributes.length;\n                itemHash = prefix;\n                if ($length === 1) {\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n                }\n                else if ($length > 1) {\n                  for ($i = 0; $i < $length; $i++) {\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n                  }\n                }\n                else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n                  }\n                }\n                if (!parentHash) {\n                  parentHash = topHash;\n                }\n\n                itemHash = parentHash + itemHash;\n                $parent = prefix;\n                if (i < length - 1) {\n                  parentHash = itemHash;\n                }\n              }\n            } else {\n              itemHash = topHash;\n            }\n\n            if (itemHash === topHash) {\n              if (!resultMap[itemHash]) {\n                resultMap[itemHash] = values;\n              } else {\n                topExists = true;\n              }\n            } else if (!resultMap[itemHash]) {\n              $parent = resultMap[parentHash];\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n              if (includeMap[prevKey].association.isSingleAssociation) {\n                if ($parent) {\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n                }\n              } else {\n                if (!$parent[$lastKeyPrefix]) {\n                  $parent[$lastKeyPrefix] = [];\n                }\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n              }\n            }\n\n            // Reset values\n            values = {};\n          } else {\n            // If checkExisting is false it's because there's only 1:1 associations in this query\n            // However we still need to map onto the appropriate parent\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\n            $current = topValues;\n            length = $keyPrefix.length;\n            if (length) {\n              for (i = 0; i < length; i++) {\n                if (i === length - 1) {\n                  values = $current[$keyPrefix[i]] = {};\n                }\n                $current = $current[$keyPrefix[i]] || {};\n              }\n            }\n          }\n        }\n\n        // End of iteration, set value and set prev values (for next iteration)\n        values[removeKeyPrefix(key)] = row[key];\n        prevKey = key;\n        $prevKeyPrefix = $keyPrefix;\n        $prevKeyPrefixString = $keyPrefixString;\n      }\n\n      if (checkExisting) {\n        length = $prevKeyPrefix.length;\n        $parent = null;\n        parentHash = null;\n\n        if (length) {\n          for (i = 0; i < length; i++) {\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\n            $length = primaryKeyAttributes.length;\n            itemHash = prefix;\n            if ($length === 1) {\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\n            }\n            else if ($length > 0) {\n              for ($i = 0; $i < $length; $i++) {\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\n              }\n            }\n            else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\n              }\n            }\n            if (!parentHash) {\n              parentHash = topHash;\n            }\n\n            itemHash = parentHash + itemHash;\n            $parent = prefix;\n            if (i < length - 1) {\n              parentHash = itemHash;\n            }\n          }\n        } else {\n          itemHash = topHash;\n        }\n\n        if (itemHash === topHash) {\n          if (!resultMap[itemHash]) {\n            resultMap[itemHash] = values;\n          } else {\n            topExists = true;\n          }\n        } else if (!resultMap[itemHash]) {\n          $parent = resultMap[parentHash];\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\n\n          if (includeMap[prevKey].association.isSingleAssociation) {\n            if ($parent) {\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\n            }\n          } else {\n            if (!$parent[$lastKeyPrefix]) {\n              $parent[$lastKeyPrefix] = [];\n            }\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\n          }\n        }\n        if (!topExists) {\n          results.push(topValues);\n        }\n      } else {\n        results[rowsI] = topValues;\n      }\n    }\n\n    return results;\n  }\n}\n\nmodule.exports = AbstractQuery;\nmodule.exports.AbstractQuery = AbstractQuery;\nmodule.exports.default = AbstractQuery;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,MAAMA,CAAA,GAAIC,OAAA,CAAQ;AAClB,MAAMC,SAAA,GAAYD,OAAA,CAAQ;AAC1B,MAAME,UAAA,GAAaF,OAAA,CAAQ;AAC3B,MAAMG,GAAA,GAAMH,OAAA,CAAQ;AACpB,MAAMI,YAAA,GAAeJ,OAAA,CAAQ;AAC7B,MAAMK,IAAA,GAAOL,OAAA,CAAQ,QAAQM,EAAA;AAC7B,MAAM;EAAEC;AAAA,IAAsBP,OAAA,CAAQ;AAEtC,MAAAQ,aAAA,CAAoB;EAElBC,YAAYC,UAAA,EAAYC,SAAA,EAAWC,OAAA,EAAS;IAC1C,KAAKP,IAAA,GAAOA,IAAA;IACZ,KAAKK,UAAA,GAAaA,UAAA;IAClB,KAAKG,QAAA,GAAWD,OAAA,CAAQC,QAAA;IACxB,KAAKC,KAAA,GAAQF,OAAA,CAAQE,KAAA;IACrB,KAAKH,SAAA,GAAYA,SAAA;IACjB,KAAKC,OAAA,GAAUG,cAAA;MACbC,KAAA,EAAO;MACPC,GAAA,EAAK;MAELC,OAAA,EAASC,OAAA,CAAQC;IAAA,GACdR,OAAA;IAEL,KAAKS,kBAAA;IAEL,IAAIT,OAAA,CAAQU,SAAA,EAAW;MAKrB,KAAKC,WAAA,GAAcf,aAAA,CAAcgB,SAAA,CAAUD,WAAA;IAAA;EAAA;EAAA,OAwBxCE,qBAAqBC,GAAA,EAAKC,MAAA,EAAQC,OAAA,EAASC,eAAA,EAAiBjB,OAAA,EAAS;IAC1E,IAAI,CAACe,MAAA,EAAQ;MACX,OAAO,CAACD,GAAA,EAAK;IAAA;IAGfd,OAAA,GAAUA,OAAA,IAAW;IACrB,IAAI,OAAOiB,eAAA,KAAoB,YAAY;MACzCjB,OAAA,GAAUiB,eAAA,IAAmB;MAC7BA,eAAA,GAAkB;IAAA;IAGpB,IAAI,CAACA,eAAA,EAAiB;MACpB,IAAIjB,OAAA,CAAQkB,gBAAA,EAAkB;QAC5BD,eAAA,GAAkBA,CAACE,KAAA,EAAOC,GAAA,EAAKC,OAAA,KAAW;UACxC,IAAIA,OAAA,CAAOD,GAAA,MAAS,QAAW;YAC7B,OAAOD,KAAA;UAAA;UAET,OAAO;QAAA;MAAA,OAEJ;QACLF,eAAA,GAAkBA,CAACE,KAAA,EAAOC,GAAA,EAAKC,OAAA,EAAQC,SAAA,EAAUC,QAAA,KAAY;UAC3D,IAAIF,OAAA,CAAOD,GAAA,MAAS,QAAW;YAC7B,OAAO/B,SAAA,CAAUmC,MAAA,CAAOH,OAAA,CAAOD,GAAA,GAAME,SAAA,EAAUC,QAAA;UAAA;UAEjD,OAAO;QAAA;MAAA;IAAA,WAGFvB,OAAA,CAAQkB,gBAAA,EAAkB;MACnC,MAAMO,mBAAA,GAAsBR,eAAA;MAC5BA,eAAA,GAAkBA,CAACE,KAAA,EAAOC,GAAA,EAAKC,OAAA,EAAQC,SAAA,EAAUC,QAAA,EAASG,QAAA,KAAY;QACpE,IAAID,mBAAA,CAAoBN,KAAA,EAAOC,GAAA,EAAKC,OAAA,EAAQC,SAAA,EAAUC,QAAA,EAASG,QAAA,MAAa,QAAW;UACrF,OAAOP,KAAA;QAAA;QAET,OAAO;MAAA;IAAA;IAIX,MAAMQ,QAAA,GAAW;IACjB,MAAMC,IAAA,GAAOC,KAAA,CAAMC,OAAA,CAAQf,MAAA;IAC3BD,GAAA,GAAMA,GAAA,CAAIiB,OAAA,CAAQ,iBAAiB,CAACZ,KAAA,EAAOC,GAAA,KAAQ;MACjD,IAAIA,GAAQ,KAAR,KAAa;QACf,OAAOpB,OAAA,CAAQgC,YAAA,GAAeb,KAAA,GAAQC,GAAA;MAAA;MAGxC,IAAIa,OAAA;MACJ,IAAIL,IAAA,EAAM;QACR,IAAIR,GAAA,CAAID,KAAA,CAAM,eAAe;UAC3BC,GAAA,GAAMA,GAAA,GAAM;UACZa,OAAA,GAAUhB,eAAA,CAAgBE,KAAA,EAAOC,GAAA,EAAKL,MAAA,EAAQY,QAAA,EAAUX,OAAA,EAAShB,OAAA;QAAA;MAAA,WAE1D,CAACoB,GAAA,CAAID,KAAA,CAAM,UAAU;QAC9Bc,OAAA,GAAUhB,eAAA,CAAgBE,KAAA,EAAOC,GAAA,EAAKL,MAAA,EAAQY,QAAA,EAAUX,OAAA,EAAShB,OAAA;MAAA;MAEnE,IAAIiC,OAAA,KAAY,QAAW;QACzB,MAAM,IAAIC,KAAA,CAAM,yBAAyBf,KAAA;MAAA;MAE3C,OAAOc,OAAA;IAAA;IAET,OAAO,CAACnB,GAAA,EAAK;EAAA;EAUfH,YAAYwB,KAAA,EAAOC,QAAA,EAAU;IAG3BD,KAAA,CAAME,KAAA,GAAQD,QAAA;IAEd,OAAOD,KAAA;EAAA;EAYTG,IAAA,EAAM;IACJ,MAAM,IAAIJ,KAAA,CAAM;EAAA;EAQlBzB,mBAAA,EAAqB;IACnB,IAAI,KAAKT,OAAA,CAAQM,OAAA,KAAY,MAAM;MACjCd,YAAA,CAAa+C,aAAA;MAEb,KAAKvC,OAAA,CAAQM,OAAA,GAAUC,OAAA,CAAQC,GAAA;IAAA;EAAA;EAUnCgC,iBAAA,EAAmB;IACjB,OAAO;EAAA;EAGTC,gCAAgCC,KAAA,EAAO;IACrC,IAAIC,OAAA,GAAUD,KAAA,GAAQ,GAAGA,KAAA,oBAAyB;IAElD,IAAIA,KAAA,IAAS,KAAKxC,KAAA,EAAO;MACvB,WAAWkB,GAAA,IAAOwB,MAAA,CAAOC,IAAA,CAAK,KAAK3C,KAAA,CAAM4C,UAAA,GAAa;QACpD,IAAI,KAAK5C,KAAA,CAAM4C,UAAA,CAAW1B,GAAA,EAAK2B,MAAA,CAAOC,QAAA,CAASN,KAAA,CAAMX,OAAA,CAAQ,MAAM,MAAM;UACvE,IAAI,KAAK7B,KAAA,CAAM4C,UAAA,CAAW1B,GAAA,EAAK6B,GAAA,EAAK;YAClCN,OAAA,GAAU,KAAKzC,KAAA,CAAM4C,UAAA,CAAW1B,GAAA,EAAK6B,GAAA;UAAA;QAAA;MAAA;IAAA;IAK7C,OAAON,OAAA;EAAA;EAGTO,WAAA,EAAa;IACX,OAAO,KAAKlD,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAW8D,GAAA;EAAA;EAG1CC,eAAA,EAAiB;IACf,OAAO,KAAKrD,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAWgE,OAAA;EAAA;EAG1CC,cAAA,EAAgB;IACd,OAAO,KAAKvD,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAWkE,MAAA;EAAA;EAG1CC,cAAcC,OAAA,EAASC,QAAA,EAAU;IAC/B,IAAIC,MAAA,GAAS;IAEb,IAAI,KAAK5D,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAWuE,MAAA,EAAQ;MAC3C,OAAO;IAAA;IAITD,MAAA,GAASA,MAAA,IAAU,KAAK9C,GAAA,CAAIgD,WAAA,GAAcC,UAAA,CAAW;IAGrDH,MAAA,GAASA,MAAA,KAAW,CAACF,OAAA,IAAWd,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAKP,OAAA,EAAS,KAAKlB,gBAAA;IAGnFoB,MAAA,GAASA,MAAA,KAAW,CAACD,QAAA,IAAYf,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAKN,QAAA,EAAU,KAAKnB,gBAAA;IAErF,OAAOoB,MAAA;EAAA;EAGTM,kBAAkBR,OAAA,EAASC,QAAA,EAAU;IACnC,IAAI,KAAK1D,QAAA,EAAU;MAEjB,MAAMkE,sBAAA,GAAyB,KAAKjE,KAAA,CAAMiE,sBAAA;MAC1C,IAAIC,EAAA,GAAK;MAETA,EAAA,GAAKA,EAAA,IAAMV,OAAA,IAAWA,OAAA,CAAQ,KAAKlB,gBAAA;MACnC4B,EAAA,GAAKA,EAAA,IAAMT,QAAA,IAAYA,QAAA,CAAS,KAAKnB,gBAAA;MAErC,KAAKvC,QAAA,CAASkE,sBAAA,IAA0BC,EAAA;IAAA;EAAA;EAI5CC,kBAAA,EAAoB;IAClB,OAAO,KAAKrE,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAWgF,UAAA;EAAA;EAG1CC,sBAAsBb,OAAA,EAAS;IAC7B,OAAOvE,CAAA,CAAEqF,OAAA,CAAQd,OAAA,CAAQe,GAAA,CAAIC,SAAA,IAAa9B,MAAA,CAAO7B,MAAA,CAAO2D,SAAA;EAAA;EAG1DC,mBAAA,EAAqB;IACnB,OAAO,KAAK3E,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAWsF,WAAA;EAAA;EAG1CC,uBAAA,EAAyB;IACvB,OAAO,KAAK7E,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAWwF,eAAA;EAAA;EAG1CC,gBAAA,EAAkB;IAChB,OAAO,KAAK/E,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAW0F,QAAA;EAAA;EAG1CC,cAAA,EAAgB;IACd,OAAO,KAAKjF,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAW4F,MAAA;EAAA;EAG1CC,kBAAA,EAAoB;IAClB,OAAO,KAAKnF,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAW8F,UAAA;EAAA;EAG1CC,kBAAA,EAAoB;IAClB,OAAO,KAAKrF,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAWgG,UAAA;EAAA;EAG1CC,mBAAA,EAAqB;IACnB,OAAO,KAAKvF,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAWkG,WAAA;EAAA;EAG1CC,cAAA,EAAgB;IACd,OAAO,KAAKzF,OAAA,CAAQmD,IAAA,KAAS7D,UAAA,CAAWoG,MAAA;EAAA;EAG1CC,kBAAkBjC,OAAA,EAAS;IACzB,IAAIE,MAAA,GAAS;IAGb,IAAI,KAAK5D,OAAA,CAAQ4F,QAAA,EAAU;MACzB,MAAMA,QAAA,GAAW,KAAK5F,OAAA,CAAQ4F,QAAA;MAC9BlC,OAAA,GAAUA,OAAA,CAAQe,GAAA,CAAIoB,OAAA,IAAU1G,CAAA,CAAE2G,MAAA,CAAOF,QAAA,EAAU,CAACG,OAAA,EAAQC,IAAA,EAAMtD,KAAA,KAAU;QAC1E,IAAIqD,OAAA,CAAOrD,KAAA,MAAW,UAAasD,IAAA,KAAStD,KAAA,EAAO;UACjDqD,OAAA,CAAOC,IAAA,IAAQD,OAAA,CAAOrD,KAAA;UACtB,OAAOqD,OAAA,CAAOrD,KAAA;QAAA;QAEhB,OAAOqD,OAAA;MAAA,GACNF,OAAA;IAAA;IAIL,IAAI,KAAK7F,OAAA,CAAQK,GAAA,EAAK;MACpBuD,MAAA,GAASF,OAAA,CAAQe,GAAA,CAAIoB,OAAA,IAAU;QAC7B,IAAII,CAAA,GAAI;QAER,WAAW7E,GAAA,IAAOyE,OAAA,EAAQ;UACxB,IAAIjD,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAK4B,OAAA,EAAQzE,GAAA,GAAM;YACrD6E,CAAA,CAAE7E,GAAA,IAAOyE,OAAA,CAAOzE,GAAA;UAAA;QAAA;QAIpB,IAAI,KAAKpB,OAAA,CAAQkG,IAAA,EAAM;UACrBD,CAAA,GAAI1G,GAAA,CAAI4G,SAAA,CAAUF,CAAA;QAAA;QAGpB,OAAOA,CAAA;MAAA;IAAA,WAGA,KAAKjG,OAAA,CAAQoG,OAAA,KAAY,MAAM;MACxC1C,OAAA,GAAU9D,aAAA,CAAcyG,cAAA,CAAe3C,OAAA,EAAS;QAC9CxD,KAAA,EAAO,KAAKA,KAAA;QACZoG,UAAA,EAAY,KAAKtG,OAAA,CAAQsG,UAAA;QACzBC,YAAA,EAAc,KAAKvG,OAAA,CAAQuG;MAAA,GAC1B;QACDC,aAAA,EAAe,KAAKxG,OAAA,CAAQyG;MAAA;MAG9B7C,MAAA,GAAS,KAAK1D,KAAA,CAAMwG,SAAA,CAAUhD,OAAA,EAAS;QACrCiD,WAAA,EAAa;QACbC,OAAA,EAAS,KAAK5G,OAAA,CAAQ4G,OAAA;QACtBL,YAAA,EAAc,KAAKvG,OAAA,CAAQuG,YAAA;QAC3BD,UAAA,EAAY,KAAKtG,OAAA,CAAQsG,UAAA;QACzBO,gBAAA,EAAkB;QAClBC,UAAA,EAAY,KAAK9G,OAAA,CAAQ+G,kBAAA,IAAsB,KAAK/G,OAAA,CAAQ8G,UAAA;QAC5DzG,GAAA,EAAK;MAAA;IAAA,OAGF;MACLuD,MAAA,GAAS,KAAK1D,KAAA,CAAMwG,SAAA,CAAUhD,OAAA,EAAS;QACrCiD,WAAA,EAAa;QACbtG,GAAA,EAAK;QACLyG,UAAA,EAAY,KAAK9G,OAAA,CAAQ+G,kBAAA,IAAsB,KAAK/G,OAAA,CAAQ8G;MAAA;IAAA;IAKhE,IAAI,KAAK9G,OAAA,CAAQI,KAAA,EAAO;MACtBwD,MAAA,GAASA,MAAA,CAAOoD,MAAA,KAAW,IAAI,OAAOpD,MAAA,CAAO;IAAA;IAE/C,OAAOA,MAAA;EAAA;EAGTqD,sBAAA,EAAwB;IACtB,IAAIrD,MAAA,GAAS;IAEbA,MAAA,GAASA,MAAA,IAAU,KAAK9C,GAAA,CAAIgD,WAAA,GAAcC,UAAA,CAAW;IACrDH,MAAA,GAASA,MAAA,IAAU,KAAK9C,GAAA,CAAIgD,WAAA,GAAcC,UAAA,CAAW;IAErD,OAAOH,MAAA;EAAA;EAGTsD,YAAA,EAAc;IACZ,OAAO,KAAKpG,GAAA,CAAIgD,WAAA,GAAcC,UAAA,CAAW;EAAA;EAU3CoD,UAAUrG,GAAA,EAAKsG,YAAA,EAAcC,UAAA,EAAY;IACvC,MAAM;MAAEvH,UAAA;MAAYE;IAAA,IAAY;IAChC,MAAMsH,SAAA,GAAY,KAAKvH,SAAA,CAAUC,OAAA,CAAQsH,SAAA,IAAatH,OAAA,CAAQsH,SAAA;IAC9D,MAAMC,kBAAA,GAAqB,KAAKxH,SAAA,CAAUC,OAAA,CAAQuH,kBAAA,IAAsBvH,OAAA,CAAQuH,kBAAA;IAChF,MAAMC,SAAA,GAAYC,IAAA,CAAKC,GAAA;IACvB,IAAIC,YAAA,GAAe;IAEnB,IAAIJ,kBAAA,IAAsBF,UAAA,EAAY;MACpC,MAAMO,SAAA,GAAY9G,GAAA,CAAI+G,QAAA,CAAS,OAAO,KAAK;MAC3C,IAAIC,QAAA;MACJ,IAAIjG,KAAA,CAAMC,OAAA,CAAQuF,UAAA,GAAa;QAC7BS,QAAA,GAAWT,UAAA,CAAW5C,GAAA,CAAIsD,CAAA,IAAGpI,iBAAA,CAAkBoI,CAAA,GAAIC,IAAA,CAAK;MAAA,OACnD;QACLF,QAAA,GAAWnI,iBAAA,CAAkB0H,UAAA;MAAA;MAE/BM,YAAA,GAAe,GAAGC,SAAA,IAAaE,QAAA;IAAA;IAEjC,MAAMG,GAAA,GAAM,IAAInI,UAAA,CAAWL,IAAA,IAAQ,eAAeqB,GAAA,GAAM6G,YAAA;IACxD,MAAM1E,GAAA,GAAM,aAAagF,GAAA;IACzBb,YAAA,CAAanE,GAAA;IACb,IAAI,CAACqE,SAAA,EAAW;MACd,KAAKvH,SAAA,CAAUS,GAAA,CAAI,aAAayH,GAAA,IAAOjI,OAAA;IAAA;IAEzC,OAAO,MAAM;MACX,MAAMkI,QAAA,GAAW,YAAYD,GAAA;MAC7Bb,YAAA,CAAac,QAAA;MACb,IAAIZ,SAAA,EAAW;QACb,KAAKvH,SAAA,CAAUS,GAAA,CAAI0H,QAAA,EAAUT,IAAA,CAAKC,GAAA,KAAQF,SAAA,EAAWxH,OAAA;MAAA;IAAA;EAAA;EAAA,OA8CpDqG,eAAe8B,IAAA,EAAMC,cAAA,EAAgBpI,OAAA,EAAS;IAcnD,IAAI,CAACmI,IAAA,CAAKnB,MAAA,EAAQ;MAChB,OAAO;IAAA;IAIT,IAAIqB,CAAA;IACJ,IAAIrB,MAAA;IACJ,IAAIsB,EAAA;IACJ,IAAIC,OAAA;IAEJ,IAAIC,KAAA;IACJ,IAAIC,GAAA;IACJ,MAAMC,UAAA,GAAaP,IAAA,CAAKnB,MAAA;IAExB,IAAInE,IAAA;IACJ,IAAIzB,GAAA;IACJ,IAAIuH,IAAA;IACJ,IAAIC,SAAA;IACJ,IAAIC,OAAA;IACJ,IAAI9H,MAAA;IACJ,IAAI+H,SAAA;IACJ,IAAIC,SAAA;IACJ,MAAMvC,aAAA,GAAgBxG,OAAA,CAAQwG,aAAA;IAE9B,IAAIwC,QAAA;IACJ,IAAIC,UAAA;IACJ,IAAIC,OAAA;IACJ,MAAMxF,OAAA,GAAU8C,aAAA,GAAgB,KAAK,IAAI3E,KAAA,CAAM6G,UAAA;IAC/C,MAAMS,SAAA,GAAY;IAClB,MAAM7C,UAAA,GAAa;IAEnB,IAAI8C,UAAA;IACJ,IAAIC,gBAAA;IACJ,IAAIC,oBAAA;IACJ,IAAIC,cAAA;IACJ,IAAIC,cAAA;IACJ,IAAIC,QAAA;IACJ,IAAIC,OAAA;IAEJ,IAAIC,aAAA;IACJ,MAAMC,eAAA,GAAkBC,KAAA,IAAS;MAC/B,IAAIjH,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAKwF,QAAA,CAASnD,UAAA,EAAYuD,KAAA,GAAQ;QACpEvD,UAAA,CAAWlF,GAAA,IAAOqI,QAAA,GAAWA,QAAA,CAASnD,UAAA,CAAWuD,KAAA;QACjD,IAAIF,aAAA,EAAe;UACjBA,aAAA,GAAgB,GAAGA,aAAA,IAAiBE,KAAA;QAAA,OAC/B;UACLF,aAAA,GAAgBE,KAAA;QAAA;QAElBvD,UAAA,CAAWqD,aAAA,IAAiBF,QAAA;MAAA;IAAA;IAIhC,MAAMK,mBAAA,GAAsB;IAC5B,MAAMC,eAAA,GAAkBA,CAACC,IAAA,EAAKC,IAAA,KAAS;MACrC,IAAI,CAACrH,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAKgG,IAAA,EAAMD,IAAA,GAAM;QACpDC,IAAA,CAAKD,IAAA,IAAOA,IAAA,CAAIE,MAAA,CAAO,GAAGF,IAAA,CAAIG,WAAA,CAAY;MAAA;MAE5C,OAAOF,IAAA,CAAKD,IAAA;IAAA;IAGd,MAAMI,mBAAA,GAAsB;IAC5B,MAAMC,eAAA,GAAkBL,IAAA,IAAO;MAC7B,IAAI,CAACpH,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAKmG,mBAAA,EAAqBJ,IAAA,GAAM;QACnE,MAAMM,KAAA,GAAQN,IAAA,CAAIG,WAAA,CAAY;QAC9BC,mBAAA,CAAoBJ,IAAA,IAAOA,IAAA,CAAIE,MAAA,CAAOI,KAAA,KAAU,KAAK,IAAIA,KAAA,GAAQ;MAAA;MAEnE,OAAOF,mBAAA,CAAoBJ,IAAA;IAAA;IAG7B,MAAMO,aAAA,GAAgB;IACtB,MAAMC,SAAA,GAAYR,IAAA,IAAO;MAEvB,IAAI,CAACpH,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAKsG,aAAA,EAAeP,IAAA,GAAM;QAC7D,MAAMS,YAAA,GAAeV,eAAA,CAAgBC,IAAA,EAAKF,mBAAA;QAC1C,IAAI,CAAClH,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAKsG,aAAA,EAAeE,YAAA,GAAe;UACtEF,aAAA,CAAcE,YAAA,IAAgBA,YAAA,GAAeA,YAAA,CAAaC,KAAA,CAAM,OAAO;QAAA;QAEzEH,aAAA,CAAcP,IAAA,IAAOO,aAAA,CAAcE,YAAA;MAAA;MAErC,OAAOF,aAAA,CAAcP,IAAA;IAAA;IAGvB,MAAMW,iBAAA,GAAoB;IAC1B,MAAMC,aAAA,GAAgBZ,IAAA,IAAO;MAC3B,IAAI,CAACpH,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAK0G,iBAAA,EAAmBX,IAAA,GAAM;QACjE,MAAMa,OAAA,GAASL,SAAA,CAAUR,IAAA;QACzB,MAAMc,OAAA,GAASD,OAAA,CAAO7D,MAAA;QAEtB2D,iBAAA,CAAkBX,IAAA,IAAO,CAACc,OAAA,GAAS,KAAKD,OAAA,CAAOC,OAAA,GAAS;MAAA;MAE1D,OAAOH,iBAAA,CAAkBX,IAAA;IAAA;IAE3B,MAAMe,sBAAA,GAAyB7K,KAAA,IAAS;MACtC,IAAI8K,oBAAA,GAAsB7L,CAAA,CAAE8L,KAAA,CAAM/K,KAAA,CAAM4C,UAAA;MACxCkI,oBAAA,GAAsBA,oBAAA,CACnBpH,MAAA,CAAO,GAAGoH,oBAAA,CAAoBE,OAAA,aAC9BzG,GAAA,CAAI/B,KAAA,IAASvD,CAAA,CAAE+L,OAAA,CAAQhL,KAAA,CAAM4G,UAAA,EAAYqE,GAAA,IAAOA,GAAA,CAAIzI,KAAA,KAAUA,KAAA,GAC9D0I,KAAA;MAEH,OAAOJ,oBAAA;IAAA;IAET,MAAMK,SAAA,GAAYC,GAAA,IAAOA,GAAA,YAAeC,MAAA,GAASD,GAAA,CAAIE,QAAA,CAAS,SAASF,GAAA;IACvE,IAAIG,oBAAA;IACJ,IAAIC,mBAAA;IACJ,IAAIC,MAAA;IAEJ,KAAKnD,KAAA,GAAQ,GAAGA,KAAA,GAAQE,UAAA,EAAYF,KAAA,IAAS;MAC3CC,GAAA,GAAMN,IAAA,CAAKK,KAAA;MAGX,IAAIA,KAAA,KAAU,GAAG;QACf3F,IAAA,GAAO1D,CAAA,CAAEyM,MAAA,CAAOhJ,MAAA,CAAOC,IAAA,CAAK4F,GAAA,GAAMoD,IAAA,IAAQ,CAACA,IAAA,CAAKnB,KAAA,CAAM,KAAK1D,MAAA;QAC3D4B,SAAA,GAAY/F,IAAA,CAAKmE,MAAA;MAAA;MAGnB,IAAIR,aAAA,EAAe;QACjBuC,SAAA,GAAY;QAGZR,OAAA,GAAUH,cAAA,CAAelI,KAAA,CAAMuL,oBAAA,CAAqBzE,MAAA;QACpDkC,OAAA,GAAU;QACV,IAAIX,OAAA,KAAY,GAAG;UACjBW,OAAA,GAAUmC,SAAA,CAAU5C,GAAA,CAAIL,cAAA,CAAelI,KAAA,CAAMuL,oBAAA,CAAqB;QAAA,WAE3DlD,OAAA,GAAU,GAAG;UACpB,KAAKD,EAAA,GAAK,GAAGA,EAAA,GAAKC,OAAA,EAASD,EAAA,IAAM;YAC/BY,OAAA,IAAWmC,SAAA,CAAU5C,GAAA,CAAIL,cAAA,CAAelI,KAAA,CAAMuL,oBAAA,CAAqBnD,EAAA;UAAA;QAAA,WAG9D,CAACnJ,CAAA,CAAE2M,OAAA,CAAQ1D,cAAA,CAAelI,KAAA,CAAM4C,UAAA,GAAa;UACpD4I,mBAAA,GAAsBX,sBAAA,CAAuB3C,cAAA,CAAelI,KAAA;UAC5D,KAAKoI,EAAA,GAAK,GAAGA,EAAA,GAAKoD,mBAAA,CAAoB1E,MAAA,EAAQsB,EAAA,IAAM;YAClDY,OAAA,IAAWT,GAAA,CAAIiD,mBAAA,CAAoBpD,EAAA;UAAA;QAAA;MAAA;MAKzCQ,SAAA,GAAY/H,MAAA,GAAS;MACrBwI,cAAA,GAAiB;MACjB,KAAKZ,IAAA,GAAO,GAAGA,IAAA,GAAOC,SAAA,EAAWD,IAAA,IAAQ;QACvCvH,GAAA,GAAMyB,IAAA,CAAK8F,IAAA;QAKXU,gBAAA,GAAmBU,eAAA,CAAgB3I,GAAA,EAAK0I,mBAAA;QACxCV,UAAA,GAAaoB,SAAA,CAAUpJ,GAAA;QAGvB,IAAIoH,KAAA,KAAU,KAAK,CAAC5F,MAAA,CAAOhC,SAAA,CAAUoD,cAAA,CAAeC,IAAA,CAAKqC,UAAA,EAAYlF,GAAA,GAAM;UACzE,IAAI,CAACgI,UAAA,CAAWpC,MAAA,EAAQ;YACtBV,UAAA,CAAWlF,GAAA,IAAOkF,UAAA,CAAW,MAAM8B,cAAA;UAAA,OAC9B;YACLqB,QAAA,GAAWrB,cAAA;YACXuB,aAAA,GAAgB;YAChBP,UAAA,CAAW2C,OAAA,CAAQnC,eAAA;UAAA;QAAA;QAIvB,IAAIL,cAAA,KAAmB,UAAaA,cAAA,KAAmBH,UAAA,EAAY;UACjE,IAAI5C,aAAA,EAAe;YAGjBQ,MAAA,GAASuC,cAAA,CAAevC,MAAA;YACxB0C,OAAA,GAAU;YACVT,UAAA,GAAa;YAEb,IAAIjC,MAAA,EAAQ;cACV,KAAKqB,CAAA,GAAI,GAAGA,CAAA,GAAIrB,MAAA,EAAQqB,CAAA,IAAK;gBAC3BsD,MAAA,GAASjC,OAAA,GAAU,GAAGA,OAAA,IAAWH,cAAA,CAAelB,CAAA,MAAOkB,cAAA,CAAelB,CAAA;gBACtEoD,oBAAA,GAAuBnF,UAAA,CAAWqF,MAAA,EAAQzL,KAAA,CAAMuL,oBAAA;gBAChDlD,OAAA,GAAUkD,oBAAA,CAAqBzE,MAAA;gBAC/BgC,QAAA,GAAW2C,MAAA;gBACX,IAAIpD,OAAA,KAAY,GAAG;kBACjBS,QAAA,IAAYqC,SAAA,CAAU5C,GAAA,CAAI,GAAGkD,MAAA,IAAUF,oBAAA,CAAqB;gBAAA,WAErDlD,OAAA,GAAU,GAAG;kBACpB,KAAKD,EAAA,GAAK,GAAGA,EAAA,GAAKC,OAAA,EAASD,EAAA,IAAM;oBAC/BU,QAAA,IAAYqC,SAAA,CAAU5C,GAAA,CAAI,GAAGkD,MAAA,IAAUF,oBAAA,CAAqBnD,EAAA;kBAAA;gBAAA,WAGvD,CAACnJ,CAAA,CAAE2M,OAAA,CAAQxF,UAAA,CAAWqF,MAAA,EAAQzL,KAAA,CAAM4C,UAAA,GAAa;kBACxD4I,mBAAA,GAAsBX,sBAAA,CAAuBzE,UAAA,CAAWqF,MAAA,EAAQzL,KAAA;kBAChE,KAAKoI,EAAA,GAAK,GAAGA,EAAA,GAAKoD,mBAAA,CAAoB1E,MAAA,EAAQsB,EAAA,IAAM;oBAClDU,QAAA,IAAYP,GAAA,CAAI,GAAGkD,MAAA,IAAUD,mBAAA,CAAoBpD,EAAA;kBAAA;gBAAA;gBAGrD,IAAI,CAACW,UAAA,EAAY;kBACfA,UAAA,GAAaC,OAAA;gBAAA;gBAGfF,QAAA,GAAWC,UAAA,GAAaD,QAAA;gBACxBU,OAAA,GAAUiC,MAAA;gBACV,IAAItD,CAAA,GAAIrB,MAAA,GAAS,GAAG;kBAClBiC,UAAA,GAAaD,QAAA;gBAAA;cAAA;YAAA,OAGZ;cACLA,QAAA,GAAWE,OAAA;YAAA;YAGb,IAAIF,QAAA,KAAaE,OAAA,EAAS;cACxB,IAAI,CAACC,SAAA,CAAUH,QAAA,GAAW;gBACxBG,SAAA,CAAUH,QAAA,IAAYjI,MAAA;cAAA,OACjB;gBACLgI,SAAA,GAAY;cAAA;YAAA,WAEL,CAACI,SAAA,CAAUH,QAAA,GAAW;cAC/BU,OAAA,GAAUP,SAAA,CAAUF,UAAA;cACpBO,cAAA,GAAiBoB,aAAA,CAAc/B,OAAA;cAE/B,IAAIvC,UAAA,CAAWuC,OAAA,EAASmD,WAAA,CAAYC,mBAAA,EAAqB;gBACvD,IAAIvC,OAAA,EAAS;kBACXA,OAAA,CAAQF,cAAA,IAAkBL,SAAA,CAAUH,QAAA,IAAYjI,MAAA;gBAAA;cAAA,OAE7C;gBACL,IAAI,CAAC2I,OAAA,CAAQF,cAAA,GAAiB;kBAC5BE,OAAA,CAAQF,cAAA,IAAkB;gBAAA;gBAE5BE,OAAA,CAAQF,cAAA,EAAgB0C,IAAA,CAAK/C,SAAA,CAAUH,QAAA,IAAYjI,MAAA;cAAA;YAAA;YAKvDA,MAAA,GAAS;UAAA,OACJ;YAIL0I,QAAA,GAAWX,SAAA;YACX9B,MAAA,GAASoC,UAAA,CAAWpC,MAAA;YACpB,IAAIA,MAAA,EAAQ;cACV,KAAKqB,CAAA,GAAI,GAAGA,CAAA,GAAIrB,MAAA,EAAQqB,CAAA,IAAK;gBAC3B,IAAIA,CAAA,KAAMrB,MAAA,GAAS,GAAG;kBACpBjG,MAAA,GAAS0I,QAAA,CAASL,UAAA,CAAWf,CAAA,KAAM;gBAAA;gBAErCoB,QAAA,GAAWA,QAAA,CAASL,UAAA,CAAWf,CAAA,MAAO;cAAA;YAAA;UAAA;QAAA;QAO9CtH,MAAA,CAAOsJ,eAAA,CAAgBjJ,GAAA,KAAQqH,GAAA,CAAIrH,GAAA;QACnCyH,OAAA,GAAUzH,GAAA;QACVmI,cAAA,GAAiBH,UAAA;QACjBE,oBAAA,GAAuBD,gBAAA;MAAA;MAGzB,IAAI7C,aAAA,EAAe;QACjBQ,MAAA,GAASuC,cAAA,CAAevC,MAAA;QACxB0C,OAAA,GAAU;QACVT,UAAA,GAAa;QAEb,IAAIjC,MAAA,EAAQ;UACV,KAAKqB,CAAA,GAAI,GAAGA,CAAA,GAAIrB,MAAA,EAAQqB,CAAA,IAAK;YAC3BsD,MAAA,GAASjC,OAAA,GAAU,GAAGA,OAAA,IAAWH,cAAA,CAAelB,CAAA,MAAOkB,cAAA,CAAelB,CAAA;YACtEoD,oBAAA,GAAuBnF,UAAA,CAAWqF,MAAA,EAAQzL,KAAA,CAAMuL,oBAAA;YAChDlD,OAAA,GAAUkD,oBAAA,CAAqBzE,MAAA;YAC/BgC,QAAA,GAAW2C,MAAA;YACX,IAAIpD,OAAA,KAAY,GAAG;cACjBS,QAAA,IAAYqC,SAAA,CAAU5C,GAAA,CAAI,GAAGkD,MAAA,IAAUF,oBAAA,CAAqB;YAAA,WAErDlD,OAAA,GAAU,GAAG;cACpB,KAAKD,EAAA,GAAK,GAAGA,EAAA,GAAKC,OAAA,EAASD,EAAA,IAAM;gBAC/BU,QAAA,IAAYqC,SAAA,CAAU5C,GAAA,CAAI,GAAGkD,MAAA,IAAUF,oBAAA,CAAqBnD,EAAA;cAAA;YAAA,WAGvD,CAACnJ,CAAA,CAAE2M,OAAA,CAAQxF,UAAA,CAAWqF,MAAA,EAAQzL,KAAA,CAAM4C,UAAA,GAAa;cACxD4I,mBAAA,GAAsBX,sBAAA,CAAuBzE,UAAA,CAAWqF,MAAA,EAAQzL,KAAA;cAChE,KAAKoI,EAAA,GAAK,GAAGA,EAAA,GAAKoD,mBAAA,CAAoB1E,MAAA,EAAQsB,EAAA,IAAM;gBAClDU,QAAA,IAAYP,GAAA,CAAI,GAAGkD,MAAA,IAAUD,mBAAA,CAAoBpD,EAAA;cAAA;YAAA;YAGrD,IAAI,CAACW,UAAA,EAAY;cACfA,UAAA,GAAaC,OAAA;YAAA;YAGfF,QAAA,GAAWC,UAAA,GAAaD,QAAA;YACxBU,OAAA,GAAUiC,MAAA;YACV,IAAItD,CAAA,GAAIrB,MAAA,GAAS,GAAG;cAClBiC,UAAA,GAAaD,QAAA;YAAA;UAAA;QAAA,OAGZ;UACLA,QAAA,GAAWE,OAAA;QAAA;QAGb,IAAIF,QAAA,KAAaE,OAAA,EAAS;UACxB,IAAI,CAACC,SAAA,CAAUH,QAAA,GAAW;YACxBG,SAAA,CAAUH,QAAA,IAAYjI,MAAA;UAAA,OACjB;YACLgI,SAAA,GAAY;UAAA;QAAA,WAEL,CAACI,SAAA,CAAUH,QAAA,GAAW;UAC/BU,OAAA,GAAUP,SAAA,CAAUF,UAAA;UACpBO,cAAA,GAAiBoB,aAAA,CAAc/B,OAAA;UAE/B,IAAIvC,UAAA,CAAWuC,OAAA,EAASmD,WAAA,CAAYC,mBAAA,EAAqB;YACvD,IAAIvC,OAAA,EAAS;cACXA,OAAA,CAAQF,cAAA,IAAkBL,SAAA,CAAUH,QAAA,IAAYjI,MAAA;YAAA;UAAA,OAE7C;YACL,IAAI,CAAC2I,OAAA,CAAQF,cAAA,GAAiB;cAC5BE,OAAA,CAAQF,cAAA,IAAkB;YAAA;YAE5BE,OAAA,CAAQF,cAAA,EAAgB0C,IAAA,CAAK/C,SAAA,CAAUH,QAAA,IAAYjI,MAAA;UAAA;QAAA;QAGvD,IAAI,CAACgI,SAAA,EAAW;UACdrF,OAAA,CAAQwI,IAAA,CAAKpD,SAAA;QAAA;MAAA,OAEV;QACLpF,OAAA,CAAQ8E,KAAA,IAASM,SAAA;MAAA;IAAA;IAIrB,OAAOpF,OAAA;EAAA;AAAA;AAIXyI,MAAA,CAAOC,OAAA,GAAUxM,aAAA;AACjBuM,MAAA,CAAOC,OAAA,CAAQxM,aAAA,GAAgBA,aAAA;AAC/BuM,MAAA,CAAOC,OAAA,CAAQC,OAAA,GAAUzM,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}