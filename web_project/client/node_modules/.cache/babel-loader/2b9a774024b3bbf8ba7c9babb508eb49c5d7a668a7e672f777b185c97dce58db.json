{"ast":null,"code":"import axios from 'axios';\nconst express = require('express');\nconst router = express.Router();\nconst {\n  Users\n} = require('../models');\nconst API_URL = 'http://localhost:3001/api'; // Замените на ваш URL API\n\nexport const getOrders = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/orderItem`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching orders:', error);\n    throw error;\n  }\n};\n\n// Endpoint для авторизации\nrouter.post('/login', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    // Поиск пользователя по имени и паролю\n    const user = await Users.findOne({\n      where: {\n        username,\n        password\n      }\n    });\n    if (user) {\n      // Пользователь найден, авторизация успешна\n      res.status(200).json({\n        message: 'User authenticated'\n      });\n    } else {\n      // Пользователь не найден или пароль неверный\n      res.status(401).json({\n        message: 'Invalid username or password'\n      });\n    }\n  } catch (error) {\n    console.error('Ошибка авторизации:', error);\n    res.status(500).json({\n      message: 'Internal server error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["axios","express","require","router","Router","Users","API_URL","getOrders","response","get","data","error","console","post","req","res","username","password","body","user","findOne","where","status","json","message","module","exports"],"sources":["C:/web_project/client/src/components/pages/api.js"],"sourcesContent":["import axios from 'axios';\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst { Users } = require('../models');\r\n\r\nconst API_URL = 'http://localhost:3001/api'; // Замените на ваш URL API\r\n\r\nexport const getOrders = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/orderItem`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching orders:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Endpoint для авторизации\r\nrouter.post('/login', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    // Поиск пользователя по имени и паролю\r\n    const user = await Users.findOne({ where: { username, password } });\r\n\r\n    if (user) {\r\n      // Пользователь найден, авторизация успешна\r\n      res.status(200).json({ message: 'User authenticated' });\r\n    } else {\r\n      // Пользователь не найден или пароль неверный\r\n      res.status(401).json({ message: 'Invalid username or password' });\r\n    }\r\n  } catch (error) {\r\n    console.error('Ошибка авторизации:', error);\r\n    res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAM;EAAEC;AAAM,CAAC,GAAGH,OAAO,CAAC,WAAW,CAAC;AAEtC,MAAMI,OAAO,GAAG,2BAA2B,CAAC,CAAC;;AAE7C,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAE,GAAEH,OAAQ,YAAW,CAAC;IACxD,OAAOE,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACAR,MAAM,CAACU,IAAI,CAAC,QAAQ,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,QAAQ;IAAEC;EAAS,CAAC,GAAGH,GAAG,CAACI,IAAI;EAEvC,IAAI;IACF;IACA,MAAMC,IAAI,GAAG,MAAMd,KAAK,CAACe,OAAO,CAAC;MAAEC,KAAK,EAAE;QAAEL,QAAQ;QAAEC;MAAS;IAAE,CAAC,CAAC;IAEnE,IAAIE,IAAI,EAAE;MACR;MACAJ,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAAqB,CAAC,CAAC;IACzD,CAAC,MAAM;MACL;MACAT,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;MAA+B,CAAC,CAAC;IACnE;EACF,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3CI,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE;IAAwB,CAAC,CAAC;EAC5D;AACF,CAAC,CAAC;AAEFC,MAAM,CAACC,OAAO,GAAGvB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}