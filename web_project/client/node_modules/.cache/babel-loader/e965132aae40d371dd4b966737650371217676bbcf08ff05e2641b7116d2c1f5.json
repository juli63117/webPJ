{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst sequelizeErrors = require(\"../../errors\");\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\nconst QueryTypes = require(\"../../query-types\");\nclass MySQLQueryInterface extends QueryInterface {\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n    const [results] = await this.sequelize.query(this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, columnName), __spreadValues({\n      raw: true\n    }, options));\n    if (results.length && results[0].constraint_name !== \"PRIMARY\") {\n      await Promise.all(results.map(constraint => this.sequelize.query(this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name), __spreadValues({\n        raw: true\n      }, options))));\n    }\n    return await this.sequelize.query(this.queryGenerator.removeColumnQuery(tableName, columnName), __spreadValues({\n      raw: true\n    }, options));\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = __spreadValues({}, options);\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Object.values(options.model.primaryKeys).map(item => item.field);\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(tableName.tableName ? tableName : {\n      tableName,\n      schema: this.sequelize.config.database\n    }, constraintName);\n    const constraints = await this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS\n    }));\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName\n      });\n    }\n    if (constraint.constraintType === \"FOREIGN KEY\") {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n    return await this.sequelize.query(query, options);\n  }\n}\nexports.MySQLQueryInterface = MySQLQueryInterface;","map":{"version":3,"names":["sequelizeErrors","require","QueryInterface","QueryTypes","MySQLQueryInterface","removeColumn","tableName","columnName","options","results","sequelize","query","queryGenerator","getForeignKeyQuery","schema","config","database","__spreadValues","raw","length","constraint_name","Promise","all","map","constraint","dropForeignKeyQuery","removeColumnQuery","upsert","insertValues","updateValues","where","type","UPSERT","updateOnDuplicate","Object","keys","upsertKeys","values","model","primaryKeys","item","field","sql","insertQuery","rawAttributes","removeConstraint","constraintName","showConstraintsQuery","constraints","__spreadProps","SHOWCONSTRAINTS","constraintType","UnknownConstraintError","message","table","removeIndexQuery","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\mysql\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst QueryTypes = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nclass MySQLQueryInterface extends QueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.query(\n      this.queryGenerator.getForeignKeyQuery(tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, columnName),\n      { raw: true, ...options }\n    );\n\n    //Exclude primary key constraint\n    if (results.length && results[0].constraint_name !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.query(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraint_name),\n        { raw: true, ...options }\n      )));\n    }\n\n    return await this.sequelize.query(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options }\n    );\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Object.values(options.model.primaryKeys).map(item => item.field);\n\n    const model = options.model;\n    const sql = this.queryGenerator.insertQuery(tableName, insertValues, model.rawAttributes, options);\n    return await this.sequelize.query(sql, options);\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database\n      }, constraintName);\n\n    const constraints = await this.sequelize.query(sql, { ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName\n        });\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.query(query, options);\n  }\n}\n\nexports.MySQLQueryInterface = MySQLQueryInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}