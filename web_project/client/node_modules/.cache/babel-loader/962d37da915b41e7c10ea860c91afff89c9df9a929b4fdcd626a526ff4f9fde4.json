{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:snowflake\");\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (_match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n      return void 0;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n    const complete = this._logQuery(sql, debug, parameters);\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n    let results;\n    try {\n      results = await new Promise((resolve, reject) => {\n        connection.execute({\n          sqlText: sql,\n          binds: parameters,\n          complete(err, _stmt, rows) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(rows);\n            }\n          }\n        });\n      });\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n        options.transaction.finished = \"rollback\";\n      }\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n  formatResults(data) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      if (!this.instance) {\n        if (data.constructor.name === \"ResultSetHeader\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n    if (this.isSelectQuery()) {\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const sfAttrMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toUpperCase()] = k;\n          return m;\n        }, {});\n        data = data.map(data2 => _.reduce(data2, (prev, value, key) => {\n          if (value !== void 0 && sfAttrMap[key]) {\n            prev[sfAttrMap[key]] = value;\n            delete prev[key];\n          }\n          return prev;\n        }, data2));\n      }\n      this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => {\n        return k.toUpperCase();\n      });\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data[0][\"number of rows updated\"];\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n    return result;\n  }\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `Snowflake Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n  formatError(err) {\n    const errCode = err.errno || err.code;\n    switch (errCode) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2] : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n          const errors = [];\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields\n          });\n        }\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err\n          });\n        }\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === \"PRIMARY\",\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["AbstractQuery","require","sequelizeErrors","_","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","Query","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","_match","key","values_","push","length","run","parameters","connection","options","showWarnings","sequelize","complete","_logQuery","results","Promise","resolve","reject","execute","sqlText","binds","err","_stmt","rows","error","transaction","errno","rollback","error_","finished","formatError","warningStatus","logWarnings","formatResults","data","result","instance","isInsertQuery","handleInsertQuery","constructor","name","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","field","isSelectQuery","raw","quoteIdentifiers","sfAttrMap","reduce","m","v","k","toUpperCase","map","data2","prev","value","fieldMap","mapKeys","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","Field","type","Type","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","toLowerCase","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","keys","join","log","errCode","code","match","message","fields","split","fieldKey","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","index","DatabaseError","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","default"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\snowflake\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:snowflake');\n\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (_match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n\n    try {\n      results = await new Promise((resolve, reject) => {\n        connection.execute({\n          sqlText: sql,\n          binds: parameters,\n          complete(err, _stmt, rows) {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(rows);\n            }\n          }\n        });\n      });\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // ignore errors\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      // Snowflake will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const sfAttrMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toUpperCase()] = k;\n          return m;\n        }, {});\n\n        data = data.map(data => _.reduce(data, (prev, value, key) => {\n          if ( value !== undefined && sfAttrMap[key] ) {\n            prev[sfAttrMap[key]] = value;\n            delete prev[key];\n          }\n          return prev;\n        }, data));\n      }\n\n      this.options.fieldMap = _.mapKeys(this.options.fieldMap, (v, k) => { return k.toUpperCase(); });\n\n      return this.handleSelectQuery(data);\n    }\n\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        result[_result.Field] = {\n          type: _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data[0]['number of rows updated'];\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `Snowflake Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2] : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err);\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":";;AAEA,MAAMA,aAAA,GAAgBC,OAAA,CAAQ;AAC9B,MAAMC,eAAA,GAAkBD,OAAA,CAAQ;AAChC,MAAME,CAAA,GAAIF,OAAA,CAAQ;AAClB,MAAM;EAAEG;AAAA,IAAWH,OAAA,CAAQ;AAE3B,MAAMI,YAAA,GAAe;AACrB,MAAMC,WAAA,GAAc;AACpB,MAAMC,oBAAA,GAAuB;AAC7B,MAAMC,oBAAA,GAAuB;AAE7B,MAAMC,KAAA,GAAQL,MAAA,CAAOM,YAAA,CAAa;AAElC,MAAAC,KAAA,SAAoBX,aAAA,CAAc;EAAA,OACzBY,qBAAqBC,GAAA,EAAKC,MAAA,EAAQC,OAAA,EAAS;IAChD,MAAMC,SAAA,GAAY;IAClB,MAAMC,eAAA,GAAkBA,CAACC,MAAA,EAAQC,GAAA,EAAKC,OAAA,KAAY;MAChD,IAAIA,OAAA,CAAQD,GAAA,MAAS,QAAW;QAC9BH,SAAA,CAAUK,IAAA,CAAKD,OAAA,CAAQD,GAAA;QACvB,OAAO;MAAA;MAET,OAAO;IAAA;IAETN,GAAA,GAAMb,aAAA,CAAcY,oBAAA,CAAqBC,GAAA,EAAKC,MAAA,EAAQC,OAAA,EAASE,eAAA,EAAiB;IAChF,OAAO,CAACJ,GAAA,EAAKG,SAAA,CAAUM,MAAA,GAAS,IAAIN,SAAA,GAAY;EAAA;EAAA,MAG5CO,IAAIV,GAAA,EAAKW,UAAA,EAAY;IACzB,KAAKX,GAAA,GAAMA,GAAA;IACX,MAAM;MAAEY,UAAA;MAAYC;IAAA,IAAY;IAEhC,MAAMC,YAAA,GAAe,KAAKC,SAAA,CAAUF,OAAA,CAAQC,YAAA,IAAgBD,OAAA,CAAQC,YAAA;IAEpE,MAAME,QAAA,GAAW,KAAKC,SAAA,CAAUjB,GAAA,EAAKJ,KAAA,EAAOe,UAAA;IAE5C,IAAIA,UAAA,EAAY;MACdf,KAAA,CAAM,kBAAkBe,UAAA;IAAA;IAG1B,IAAIO,OAAA;IAEJ,IAAI;MACFA,OAAA,GAAU,MAAM,IAAIC,OAAA,CAAQ,CAACC,OAAA,EAASC,MAAA,KAAW;QAC/CT,UAAA,CAAWU,OAAA,CAAQ;UACjBC,OAAA,EAASvB,GAAA;UACTwB,KAAA,EAAOb,UAAA;UACPK,SAASS,GAAA,EAAKC,KAAA,EAAOC,IAAA,EAAM;YACzB,IAAIF,GAAA,EAAK;cACPJ,MAAA,CAAOI,GAAA;YAAA,OACF;cACLL,OAAA,CAAQO,IAAA;YAAA;UAAA;QAAA;MAAA;IAAA,SAKTC,KAAA,EAAP;MACA,IAAIf,OAAA,CAAQgB,WAAA,IAAeD,KAAA,CAAME,KAAA,KAAUrC,WAAA,EAAa;QACtD,IAAI;UACF,MAAMoB,OAAA,CAAQgB,WAAA,CAAYE,QAAA;QAAA,SACnBC,MAAA,EAAP;QAIFnB,OAAA,CAAQgB,WAAA,CAAYI,QAAA,GAAW;MAAA;MAGjCL,KAAA,CAAM5B,GAAA,GAAMA,GAAA;MACZ4B,KAAA,CAAMjB,UAAA,GAAaA,UAAA;MACnB,MAAM,KAAKuB,WAAA,CAAYN,KAAA;IAAA,UACvB;MACAZ,QAAA;IAAA;IAGF,IAAIF,YAAA,IAAgBI,OAAA,IAAWA,OAAA,CAAQiB,aAAA,GAAgB,GAAG;MACxD,MAAM,KAAKC,WAAA,CAAYlB,OAAA;IAAA;IAEzB,OAAO,KAAKmB,aAAA,CAAcnB,OAAA;EAAA;EAoB5BmB,cAAcC,IAAA,EAAM;IAClB,IAAIC,MAAA,GAAS,KAAKC,QAAA;IAElB,IAAI,KAAKC,aAAA,CAAcH,IAAA,GAAO;MAC5B,KAAKI,iBAAA,CAAkBJ,IAAA;MAEvB,IAAI,CAAC,KAAKE,QAAA,EAAU;QAElB,IACEF,IAAA,CAAKK,WAAA,CAAYC,IAAA,KAAS,qBACvB,KAAKC,KAAA,IACL,KAAKA,KAAA,CAAMC,sBAAA,IACX,KAAKD,KAAA,CAAMC,sBAAA,KAA2B,KAAKD,KAAA,CAAME,mBAAA,IACjD,KAAKF,KAAA,CAAMG,aAAA,CAAc,KAAKH,KAAA,CAAME,mBAAA,GACvC;UACA,MAAME,OAAA,GAAUX,IAAA,CAAK,KAAKY,gBAAA;UAC1BX,MAAA,GAAS;UACT,SAASY,CAAA,GAAIF,OAAA,EAASE,CAAA,GAAIF,OAAA,GAAUX,IAAA,CAAKc,YAAA,EAAcD,CAAA,IAAK;YAC1DZ,MAAA,CAAO/B,IAAA,CAAK;cAAA,CAAG,KAAKqC,KAAA,CAAMG,aAAA,CAAc,KAAKH,KAAA,CAAME,mBAAA,EAAqBM,KAAA,GAAQF;YAAA;UAAA;QAAA,OAE7E;UACLZ,MAAA,GAASD,IAAA,CAAK,KAAKY,gBAAA;QAAA;MAAA;IAAA;IAKzB,IAAI,KAAKI,aAAA,IAAiB;MAGxB,IAAI,KAAKzC,OAAA,CAAQ0C,GAAA,KAAQ,SAAS,KAAKxC,SAAA,CAAUF,OAAA,CAAQ2C,gBAAA,KAAqB,OAAO;QACnF,MAAMC,SAAA,GAAYnE,CAAA,CAAEoE,MAAA,CAAO,KAAKb,KAAA,CAAMG,aAAA,EAAe,CAACW,CAAA,EAAGC,CAAA,EAAGC,CAAA,KAAM;UAChEF,CAAA,CAAEE,CAAA,CAAEC,WAAA,MAAiBD,CAAA;UACrB,OAAOF,CAAA;QAAA,GACN;QAEHrB,IAAA,GAAOA,IAAA,CAAKyB,GAAA,CAAIC,KAAA,IAAQ1E,CAAA,CAAEoE,MAAA,CAAOM,KAAA,EAAM,CAACC,IAAA,EAAMC,KAAA,EAAO5D,GAAA,KAAQ;UAC3D,IAAK4D,KAAA,KAAU,UAAaT,SAAA,CAAUnD,GAAA,GAAO;YAC3C2D,IAAA,CAAKR,SAAA,CAAUnD,GAAA,KAAQ4D,KAAA;YACvB,OAAOD,IAAA,CAAK3D,GAAA;UAAA;UAEd,OAAO2D,IAAA;QAAA,GACND,KAAA;MAAA;MAGL,KAAKnD,OAAA,CAAQsD,QAAA,GAAW7E,CAAA,CAAE8E,OAAA,CAAQ,KAAKvD,OAAA,CAAQsD,QAAA,EAAU,CAACP,CAAA,EAAGC,CAAA,KAAM;QAAE,OAAOA,CAAA,CAAEC,WAAA;MAAA;MAE9E,OAAO,KAAKO,iBAAA,CAAkB/B,IAAA;IAAA;IAGhC,IAAI,KAAKgC,iBAAA,IAAqB;MAC5B,OAAO,KAAKC,qBAAA,CAAsBjC,IAAA;IAAA;IAGpC,IAAI,KAAKkC,eAAA,IAAmB;MAC1BjC,MAAA,GAAS;MAET,WAAWkC,OAAA,IAAWnC,IAAA,EAAM;QAC1BC,MAAA,CAAOkC,OAAA,CAAQC,KAAA,IAAS;UACtBC,IAAA,EAAMF,OAAA,CAAQG,IAAA,CAAKd,WAAA;UACnBe,SAAA,EAAWJ,OAAA,CAAQK,IAAA,KAAS;UAC5BC,YAAA,EAAcN,OAAA,CAAQO,OAAA;UACtBC,UAAA,EAAYR,OAAA,CAAQS,GAAA,KAAQ;UAC5BC,aAAA,EAAeC,MAAA,CAAOC,SAAA,CAAUC,cAAA,CAAeC,IAAA,CAAKd,OAAA,EAAS,YACxDA,OAAA,CAAQe,KAAA,CAAMC,WAAA,OAAkB;UACrCC,OAAA,EAASjB,OAAA,CAAQkB,OAAA,GAAUlB,OAAA,CAAQkB,OAAA,GAAU;QAAA;MAAA;MAGjD,OAAOpD,MAAA;IAAA;IAET,IAAI,KAAKqD,kBAAA,IAAsB;MAC7B,OAAO,KAAKC,sBAAA,CAAuBvD,IAAA;IAAA;IAErC,IAAI,KAAKwD,WAAA,IAAe;MACtB,OAAOxD,IAAA,CAAK;IAAA;IAEd,IAAI,KAAKyD,iBAAA,MAAuB,KAAKC,iBAAA,IAAqB;MACxD,OAAO1D,IAAA,CAAK,GAAG;IAAA;IAEjB,IAAI,KAAK2D,cAAA,IAAkB;MACzB,OAAO3D,IAAA,CAAK,GAAG4D,OAAA;IAAA;IAEjB,IAAI,KAAKC,kBAAA,IAAsB;MAC7B,OAAO7D,IAAA;IAAA;IAET,IAAI,KAAK8D,aAAA,IAAiB;MACxB,OAAO,CAAC7D,MAAA,EAAQD,IAAA,CAAKc,YAAA,KAAiB;IAAA;IAExC,IAAI,KAAKX,aAAA,MAAmB,KAAK4D,aAAA,IAAiB;MAChD,OAAO,CAAC9D,MAAA,EAAQD,IAAA,CAAKc,YAAA;IAAA;IAEvB,IAAI,KAAKkD,sBAAA,IAA0B;MACjC,OAAOhE,IAAA;IAAA;IAET,IAAI,KAAKiE,UAAA,IAAc;MACrB,OAAO,CAACjE,IAAA,EAAMA,IAAA;IAAA;IAGhB,OAAOC,MAAA;EAAA;EAAA,MAGHH,YAAYlB,OAAA,EAAS;IACzB,MAAMsF,cAAA,GAAiB,MAAM,KAAK9F,GAAA,CAAI;IACtC,MAAM+F,cAAA,GAAiB,uBAAuB,KAAK7F,UAAA,CAAW8F,IAAA,IAAQ;IACtE,MAAMC,QAAA,GAAW;IACjB,WAAWC,WAAA,IAAeJ,cAAA,EAAgB;MACxC,IAAII,WAAA,KAAgB,UAAa,OAAOA,WAAA,CAAYC,MAAA,CAAOC,QAAA,MAAc,YAAY;QACnF;MAAA;MAEF,WAAWC,cAAA,IAAkBH,WAAA,EAAa;QACxC,IAAIxB,MAAA,CAAOC,SAAA,CAAUC,cAAA,CAAeC,IAAA,CAAKwB,cAAA,EAAgB,YAAY;UACnEJ,QAAA,CAASnG,IAAA,CAAKuG,cAAA,CAAeC,OAAA;QAAA,OACxB;UACL,WAAWC,UAAA,IAAcF,cAAA,CAAeG,IAAA,IAAQ;YAC9CP,QAAA,CAASnG,IAAA,CAAK,CAACyG,UAAA,EAAYF,cAAA,CAAeE,UAAA,GAAaE,IAAA,CAAK;UAAA;QAAA;MAAA;IAAA;IAMpE,KAAKpG,SAAA,CAAUqG,GAAA,CAAIX,cAAA,GAAiBE,QAAA,CAASQ,IAAA,CAAK,OAAO,KAAKtG,OAAA;IAE9D,OAAOK,OAAA;EAAA;EAGTgB,YAAYT,GAAA,EAAK;IACf,MAAM4F,OAAA,GAAU5F,GAAA,CAAIK,KAAA,IAASL,GAAA,CAAI6F,IAAA;IAEjC,QAAQD,OAAA;MAAA,KACD7H,YAAA;QAAc;UACjB,MAAM+H,KAAA,GAAQ9F,GAAA,CAAI+F,OAAA,CAAQD,KAAA,CAAM;UAChC,IAAIE,MAAA,GAAS;UACb,IAAID,OAAA,GAAU;UACd,MAAMvH,MAAA,GAASsH,KAAA,GAAQA,KAAA,CAAM,GAAGG,KAAA,CAAM,OAAO;UAC7C,MAAMC,QAAA,GAAWJ,KAAA,GAAQA,KAAA,CAAM,KAAK;UACpC,MAAMK,QAAA,GAAWL,KAAA,GAAQA,KAAA,CAAM,KAAK;UACpC,MAAMM,SAAA,GAAY,KAAKhF,KAAA,IAAS,KAAKA,KAAA,CAAMiF,UAAA,CAAWH,QAAA;UAEtD,IAAIE,SAAA,EAAW;YACb,IAAIA,SAAA,CAAUE,GAAA,EAAKP,OAAA,GAAUK,SAAA,CAAUE,GAAA;YACvCN,MAAA,GAASnI,CAAA,CAAE0I,SAAA,CAAUH,SAAA,CAAUJ,MAAA,EAAQxH,MAAA;UAAA,OAClC;YACLwH,MAAA,CAAOE,QAAA,IAAYC,QAAA;UAAA;UAGrB,MAAMK,MAAA,GAAS;UACf3I,CAAA,CAAE4I,MAAA,CAAOT,MAAA,EAAQ,CAACvD,KAAA,EAAOb,KAAA,KAAU;YACjC4E,MAAA,CAAOzH,IAAA,CAAK,IAAInB,eAAA,CAAgB8I,mBAAA,CAC9B,KAAKC,+BAAA,CAAgC/E,KAAA,GACrC,oBACAA,KAAA,EACAa,KAAA,EACA,KAAK1B,QAAA,EACL;UAAA;UAIJ,OAAO,IAAInD,eAAA,CAAgBgJ,qBAAA,CAAsB;YAAEb,OAAA;YAASS,MAAA;YAAQK,MAAA,EAAQ7G,GAAA;YAAKgG;UAAA;QAAA;MAAA,KAG9E/H,oBAAA;MAAA,KACAC,oBAAA;QAAsB;UAEzB,MAAM4H,KAAA,GAAQ9F,GAAA,CAAI+F,OAAA,CAAQD,KAAA,CACxB;UAEF,MAAMgB,SAAA,GAAYhB,KAAA,GAAQA,KAAA,CAAM,KAAK;UACrC,MAAME,MAAA,GAASF,KAAA,GAAQA,KAAA,CAAM,GAAGG,KAAA,CAAM,IAAIc,MAAA,CAAO,GAAGD,SAAA,MAAeA,SAAA,OAAgB;UAEnF,OAAO,IAAIlJ,eAAA,CAAgBoJ,yBAAA,CAA0B;YACnDC,OAAA,EAASC,MAAA,CAAOtB,OAAA,MAAasB,MAAA,CAAOjJ,oBAAA,IAAwB,WAAW;YACvEkJ,KAAA,EAAOrB,KAAA,GAAQA,KAAA,CAAM,KAAK;YAC1BE,MAAA;YACAvD,KAAA,EAAOuD,MAAA,IAAUA,MAAA,CAAOhH,MAAA,IAAU,KAAK+B,QAAA,IAAY,KAAKA,QAAA,CAASiF,MAAA,CAAO,OAAO;YAC/EoB,KAAA,EAAOtB,KAAA,GAAQA,KAAA,CAAM,KAAK;YAC1Be,MAAA,EAAQ7G;UAAA;QAAA;MAAA;QAKV,OAAO,IAAIpC,eAAA,CAAgByJ,aAAA,CAAcrH,GAAA;IAAA;EAAA;EAI/CoE,uBAAuBvD,IAAA,EAAM;IAE3BA,IAAA,GAAOA,IAAA,CAAKoB,MAAA,CAAO,CAACqF,GAAA,EAAKC,IAAA,KAAS;MAChC,IAAI,EAAEA,IAAA,CAAKC,QAAA,IAAYF,GAAA,GAAM;QAC3BA,GAAA,CAAIC,IAAA,CAAKC,QAAA,IAAYD,IAAA;QACrBA,IAAA,CAAKvB,MAAA,GAAS;MAAA;MAGhBsB,GAAA,CAAIC,IAAA,CAAKC,QAAA,EAAUxB,MAAA,CAAOuB,IAAA,CAAKE,YAAA,GAAe,KAAK;QACjDC,SAAA,EAAWH,IAAA,CAAKI,WAAA;QAChB3I,MAAA,EAAQuI,IAAA,CAAKK,QAAA,IAAY;QACzBC,KAAA,EAAON,IAAA,CAAKO,SAAA,KAAc,MAAM,QAAQ;MAAA;MAE1C,OAAOP,IAAA,CAAKQ,WAAA;MAEZ,OAAOT,GAAA;IAAA,GACN;IAEH,OAAOzJ,CAAA,CAAEyE,GAAA,CAAIzB,IAAA,EAAM0G,IAAA,KAAS;MAC1BS,OAAA,EAAST,IAAA,CAAKC,QAAA,KAAa;MAC3BxB,MAAA,EAAQuB,IAAA,CAAKvB,MAAA;MACb7E,IAAA,EAAMoG,IAAA,CAAKC,QAAA;MACXS,SAAA,EAAWV,IAAA,CAAKW,KAAA;MAChBC,MAAA,EAAQZ,IAAA,CAAKa,UAAA,KAAe;MAC5BlF,IAAA,EAAMqE,IAAA,CAAKc;IAAA;EAAA;AAAA;AAKjBC,MAAA,CAAOC,OAAA,GAAUlK,KAAA;AACjBiK,MAAA,CAAOC,OAAA,CAAQlK,KAAA,GAAQA,KAAA;AACvBiK,MAAA,CAAOC,OAAA,CAAQC,OAAA,GAAUnK,KAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}