{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst AbstractQuery = require(\"../abstract/query\");\nconst sequelizeErrors = require(\"../../errors\");\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\nconst debug = logger.debugContext(\"sql:mysql\");\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, __spreadValues({\n      showWarnings: false\n    }, options));\n  }\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== void 0) {\n        bindParam.push(values_[key]);\n        return \"?\";\n      }\n      return void 0;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : void 0];\n  }\n  async run(sql, parameters) {\n    this.sql = sql;\n    const {\n      connection,\n      options\n    } = this;\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n    const complete = this._logQuery(sql, debug, parameters);\n    if (parameters) {\n      debug(\"parameters(%j)\", parameters);\n    }\n    let results;\n    const errForStack = new Error();\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection.execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection.query({\n            sql\n          }, (error, result) => error ? reject(error) : resolve(result)).setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {}\n        options.transaction.finished = \"rollback\";\n      }\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n  formatResults(data) {\n    let result = this.instance;\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n      if (!this.instance) {\n        if (data.constructor.name === \"ResultSetHeader\" && this.model && this.model.autoIncrementAttribute && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute && this.model.rawAttributes[this.model.primaryKeyAttribute]) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({\n              [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i\n            });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, \"ENUM\") : _result.Type.toUpperCase(),\n          allowNull: _result.Null === \"YES\",\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === \"PRI\",\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, \"Extra\") && _result.Extra.toLowerCase() === \"auto_increment\",\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      return [data, data];\n    }\n    return result;\n  }\n  async logWarnings(results) {\n    const warningResults = await this.run(\"SHOW WARNINGS\");\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || \"default\"}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === void 0 || typeof _warningRow[Symbol.iterator] !== \"function\") {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, \"Message\")) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(\": \"));\n          }\n        }\n      }\n    }\n    this.sequelize.log(warningMessage + messages.join(\"; \"), this.options);\n    return results;\n  }\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n    switch (errCode) {\n      case ER_DUP_ENTRY:\n        {\n          const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n          let fields = {};\n          let message = \"Validation error\";\n          const values = match ? match[1].split(\"-\") : void 0;\n          const fieldKey = match ? match[2].split(\".\").pop() : void 0;\n          const fieldVal = match ? match[1] : void 0;\n          const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n          if (uniqueKey) {\n            if (uniqueKey.msg) message = uniqueKey.msg;\n            fields = _.zipObject(uniqueKey.fields, values);\n          } else {\n            fields[fieldKey] = fieldVal;\n          }\n          const errors = [];\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW:\n        {\n          const match = err.message.match(/CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/);\n          const quoteChar = match ? match[1] : \"`\";\n          const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : void 0;\n          return new sequelizeErrors.ForeignKeyConstraintError({\n            reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? \"parent\" : \"child\",\n            table: match ? match[4] : void 0,\n            fields,\n            value: fields && fields.length && this.instance && this.instance[fields[0]] || void 0,\n            index: match ? match[2] : void 0,\n            parent: err,\n            stack: errStack\n          });\n        }\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n  handleShowIndexesQuery(data) {\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || void 0,\n        order: item.Collation === \"A\" ? \"ASC\" : void 0\n      };\n      delete item.column_name;\n      return acc;\n    }, {});\n    return _.map(data, item => ({\n      primary: item.Key_name === \"PRIMARY\",\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["AbstractQuery","require","sequelizeErrors","_","logger","ER_DUP_ENTRY","ER_DEADLOCK","ER_ROW_IS_REFERENCED","ER_NO_REFERENCED_ROW","debug","debugContext","Query","constructor","connection","sequelize","options","__spreadValues","showWarnings","formatBindParameters","sql","values","dialect","bindParam","replacementFunc","match","key","values_","push","length","run","parameters","complete","_logQuery","results","errForStack","Error","Promise","resolve","reject","execute","error","result","setMaxListeners","query","transaction","errno","rollback","error_","finished","formatError","stack","warningStatus","logWarnings","formatResults","data","instance","isInsertQuery","handleInsertQuery","name","model","autoIncrementAttribute","primaryKeyAttribute","rawAttributes","startId","getInsertIdField","i","affectedRows","field","isSelectQuery","handleSelectQuery","isShowTablesQuery","handleShowTablesQuery","isDescribeQuery","_result","enumRegex","Field","type","test","Type","replace","toUpperCase","allowNull","Null","defaultValue","Default","primaryKey","Key","autoIncrement","Object","prototype","hasOwnProperty","call","Extra","toLowerCase","comment","Comment","isShowIndexesQuery","handleShowIndexesQuery","isCallQuery","isBulkUpdateQuery","isBulkDeleteQuery","isVersionQuery","version","isForeignKeysQuery","isUpsertQuery","isUpdateQuery","isShowConstraintsQuery","isRawQuery","warningResults","warningMessage","uuid","messages","_warningRow","Symbol","iterator","_warningResult","Message","_objectKey","keys","join","log","err","errStack","errCode","code","message","fields","split","fieldKey","pop","fieldVal","uniqueKey","uniqueKeys","msg","zipObject","errors","forOwn","value","ValidationErrorItem","getUniqueConstraintErrorMessage","UniqueConstraintError","parent","quoteChar","RegExp","ForeignKeyConstraintError","reltype","String","table","index","DatabaseError","reduce","acc","item","Key_name","Seq_in_index","attribute","Column_name","Sub_part","order","Collation","column_name","map","primary","tableName","Table","unique","Non_unique","Index_type","module","exports","default"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\mysql\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst ER_DUP_ENTRY = 1062;\nconst ER_DEADLOCK = 1213;\nconst ER_ROW_IS_REFERENCED = 1451;\nconst ER_NO_REFERENCED_ROW = 1452;\n\nconst debug = logger.debugContext('sql:mysql');\n\nclass Query extends AbstractQuery {\n  constructor(connection, sequelize, options) {\n    super(connection, sequelize, { showWarnings: false, ...options });\n  }\n\n  static formatBindParameters(sql, values, dialect) {\n    const bindParam = [];\n    const replacementFunc = (match, key, values_) => {\n      if (values_[key] !== undefined) {\n        bindParam.push(values_[key]);\n        return '?';\n      }\n      return undefined;\n    };\n    sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    return [sql, bindParam.length > 0 ? bindParam : undefined];\n  }\n\n  async run(sql, parameters) {\n    this.sql = sql;\n    const { connection, options } = this;\n\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    if (parameters) {\n      debug('parameters(%j)', parameters);\n    }\n\n    let results;\n    const errForStack = new Error();\n\n    try {\n      if (parameters && parameters.length) {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .execute(sql, parameters, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      } else {\n        results = await new Promise((resolve, reject) => {\n          connection\n            .query({ sql }, (error, result) => error ? reject(error) : resolve(result))\n            .setMaxListeners(100);\n        });\n      }\n    } catch (error) {\n      if (options.transaction && error.errno === ER_DEADLOCK) {\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\n        try {\n          await options.transaction.rollback();\n        } catch (error_) {\n          // Ignore errors - since MySQL automatically rolled back, we're\n          // not that worried about this redundant rollback failing.\n        }\n\n        options.transaction.finished = 'rollback';\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    } finally {\n      complete();\n    }\n\n    if (showWarnings && results && results.warningStatus > 0) {\n      await this.logWarnings(results);\n    }\n    return this.formatResults(results);\n  }\n\n  /**\n   * High level function that handles the results of a query execution.\n   *\n   *\n   * Example:\n   *  query.formatResults([\n   *    {\n   *      id: 1,              // this is from the main table\n   *      attr2: 'snafu',     // this is from the main table\n   *      Tasks.id: 1,        // this is from the associated table\n   *      Tasks.title: 'task' // this is from the associated table\n   *    }\n   *  ])\n   *\n   * @param {Array} data - The result of the query execution.\n   * @private\n   */\n  formatResults(data) {\n    let result = this.instance;\n\n    if (this.isInsertQuery(data)) {\n      this.handleInsertQuery(data);\n\n      if (!this.instance) {\n        // handle bulkCreate AI primary key\n        if (\n          data.constructor.name === 'ResultSetHeader'\n          && this.model\n          && this.model.autoIncrementAttribute\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\n        ) {\n          const startId = data[this.getInsertIdField()];\n          result = [];\n          for (let i = startId; i < startId + data.affectedRows; i++) {\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\n          }\n        } else {\n          result = data[this.getInsertIdField()];\n        }\n      }\n    }\n\n    if (this.isSelectQuery()) {\n      return this.handleSelectQuery(data);\n    }\n    if (this.isShowTablesQuery()) {\n      return this.handleShowTablesQuery(data);\n    }\n    if (this.isDescribeQuery()) {\n      result = {};\n\n      for (const _result of data) {\n        const enumRegex = /^enum/i;\n        result[_result.Field] = {\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\n          allowNull: _result.Null === 'YES',\n          defaultValue: _result.Default,\n          primaryKey: _result.Key === 'PRI',\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\n            && _result.Extra.toLowerCase() === 'auto_increment',\n          comment: _result.Comment ? _result.Comment : null\n        };\n      }\n      return result;\n    }\n    if (this.isShowIndexesQuery()) {\n      return this.handleShowIndexesQuery(data);\n    }\n    if (this.isCallQuery()) {\n      return data[0];\n    }\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\n      return data.affectedRows;\n    }\n    if (this.isVersionQuery()) {\n      return data[0].version;\n    }\n    if (this.isForeignKeysQuery()) {\n      return data;\n    }\n    if (this.isUpsertQuery()) {\n      return [result, data.affectedRows === 1];\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\n      return [result, data.affectedRows];\n    }\n    if (this.isShowConstraintsQuery()) {\n      return data;\n    }\n    if (this.isRawQuery()) {\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\n      return [data, data];\n    }\n\n    return result;\n  }\n\n  async logWarnings(results) {\n    const warningResults = await this.run('SHOW WARNINGS');\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\n    const messages = [];\n    for (const _warningRow of warningResults) {\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\n        continue;\n      }\n      for (const _warningResult of _warningRow) {\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\n          messages.push(_warningResult.Message);\n        } else {\n          for (const _objectKey of _warningResult.keys()) {\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\n          }\n        }\n      }\n    }\n\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\n\n    return results;\n  }\n\n  formatError(err, errStack) {\n    const errCode = err.errno || err.code;\n\n    switch (errCode) {\n      case ER_DUP_ENTRY: {\n        const match = err.message.match(/Duplicate entry '([\\s\\S]*)' for key '?((.|\\s)*?)'?$/);\n        let fields = {};\n        let message = 'Validation error';\n        const values = match ? match[1].split('-') : undefined;\n        const fieldKey = match ? match[2].split('.').pop() : undefined;\n        const fieldVal = match ? match[1] : undefined;\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\n\n        if (uniqueKey) {\n          if (uniqueKey.msg) message = uniqueKey.msg;\n          fields = _.zipObject(uniqueKey.fields, values);\n        } else {\n          fields[fieldKey] = fieldVal;\n        }\n\n        const errors = [];\n        _.forOwn(fields, (value, field) => {\n          errors.push(new sequelizeErrors.ValidationErrorItem(\n            this.getUniqueConstraintErrorMessage(field),\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n            field,\n            value,\n            this.instance,\n            'not_unique'\n          ));\n        });\n\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n      }\n\n      case ER_ROW_IS_REFERENCED:\n      case ER_NO_REFERENCED_ROW: {\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\n        const match = err.message.match(\n          /CONSTRAINT ([`\"])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/\n        );\n        const quoteChar = match ? match[1] : '`';\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\n          table: match ? match[4] : undefined,\n          fields,\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\n          index: match ? match[2] : undefined,\n          parent: err,\n          stack: errStack\n        });\n      }\n\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  handleShowIndexesQuery(data) {\n    // Group by index name, and collect all fields\n    data = data.reduce((acc, item) => {\n      if (!(item.Key_name in acc)) {\n        acc[item.Key_name] = item;\n        item.fields = [];\n      }\n\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\n        attribute: item.Column_name,\n        length: item.Sub_part || undefined,\n        order: item.Collation === 'A' ? 'ASC' : undefined\n      };\n      delete item.column_name;\n\n      return acc;\n    }, {});\n\n    return _.map(data, item => ({\n      primary: item.Key_name === 'PRIMARY',\n      fields: item.fields,\n      name: item.Key_name,\n      tableName: item.Table,\n      unique: item.Non_unique !== 1,\n      type: item.Index_type\n    }));\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}