{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:3001/api';\n\n// Функция для выполнения запросов к API\nconst fetchData = async () => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    throw new Error('Failed to fetch data');\n  }\n};\nexport const getOrdersByUser = async username => {\n  try {\n    if (!username) {\n      throw new Error('Пользователь не авторизован');\n    }\n    const url = `${API_URL}/ordertables/${username}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching orders:', error);\n    throw error;\n  }\n};\nexport const findOrder = async orderid => {\n  try {\n    if (!orderid) {\n      throw new Error('Нет orderid');\n    }\n    const url = `${API_URL}/ordertables/findorder/${orderid}`; // Добавляем orderid в URL\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    console.error('Error finding order:', error);\n    throw error;\n  }\n};\nexport const createOrder = async (orderid, username) => {\n  try {\n    if (!username) {\n      throw new Error('Пользователь не авторизован');\n    }\n    if (!orderid) {\n      throw new Error('Нет orderid');\n    }\n    const response = await axios.post(`${API_URL}/ordertables/createorder/${orderid}/${username}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order:', error);\n    throw error;\n  }\n};\nexport const allMedicines = async () => {\n  try {\n    const url = `${API_URL}/medicines`;\n    const response = await axios.get(url); // Передаем username в теле запроса\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order:', error);\n    throw error;\n  }\n};\nexport const addOrderItem = async (medicineid, orderid, amount) => {\n  try {\n    const url = `${API_URL}/orderitem`;\n    const response = await axios.post(url, {\n      medicineid: medicineid,\n      orderid: orderid,\n      amount: amount\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error creating order:', error);\n    throw error;\n  }\n};\nexport const login = async (username, password) => {\n  // Добавляем параметры\n  try {\n    const response = await axios.post(`${API_URL}/login`, {\n      username,\n      password\n    });\n    if (response.status === 200) {\n      localStorage.setItem('username', username); // Сохраняем имя в localStorage\n    }\n    return response;\n  } catch (error) {\n    console.error('Error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","fetchData","response","get","data","error","Error","getOrdersByUser","username","url","console","findOrder","orderid","createOrder","post","allMedicines","addOrderItem","medicineid","amount","login","password","status","localStorage","setItem"],"sources":["C:/Users/teply/Downloads/Telegram Desktop/web_project/client/src/components/pages/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:3001/api';\r\n\r\n// Функция для выполнения запросов к API\r\nconst fetchData = async () => {\r\n  try {\r\n    const response = await axios.get(API_URL);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch data');\r\n  }\r\n};\r\n\r\n\r\nexport const getOrdersByUser = async (username) => {\r\n  try {\r\n    if (!username) {\r\n      throw new Error('Пользователь не авторизован');\r\n    }\r\n    const url = `${API_URL}/ordertables/${username}`;\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching orders:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const findOrder = async (orderid) => {\r\n  try {\r\n    if (!orderid) {\r\n      throw new Error('Нет orderid');\r\n    }\r\n    const url = `${API_URL}/ordertables/findorder/${orderid}`; // Добавляем orderid в URL\r\n    const response = await axios.get(url);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error finding order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const createOrder = async (orderid, username) => {\r\n  try {\r\n    if (!username) {\r\n      throw new Error('Пользователь не авторизован');\r\n    }\r\n    if (!orderid) {\r\n      throw new Error('Нет orderid');\r\n    }\r\n    const response = await axios.post(`${API_URL}/ordertables/createorder/${orderid}/${username}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const allMedicines = async () => {\r\n  try {\r\n    const url = `${API_URL}/medicines`;\r\n    const response = await axios.get(url); // Передаем username в теле запроса\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const addOrderItem = async (medicineid, orderid, amount) => {\r\n  try {\r\n    const url = `${API_URL}/orderitem`;\r\n    const response = await axios.post(url, {\r\n      medicineid: medicineid,\r\n      orderid: orderid,\r\n      amount: amount\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating order:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const login = async (username, password) => { // Добавляем параметры\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, {\r\n      username,\r\n      password\r\n    });\r\n    if (response.status === 200) {\r\n      localStorage.setItem('username', username); // Сохраняем имя в localStorage\r\n    }\r\n    return response;\r\n  } catch (error) {\r\n    console.error('Error:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}