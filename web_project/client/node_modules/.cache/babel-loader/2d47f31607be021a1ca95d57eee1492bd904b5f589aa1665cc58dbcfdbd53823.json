{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst _ = require(\"lodash\");\nconst Utils = require(\"../../utils\");\nconst QueryTypes = require(\"../../query-types\");\nconst Op = require(\"../../operators\");\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\nclass MSSqlQueryInterface extends QueryInterface {\n  async removeColumn(tableName, attributeName, options) {\n    options = __spreadValues({\n      raw: true\n    }, options || {});\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length) {\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n    options = __spreadValues({}, options);\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n    where = {\n      [Op.or]: wheres\n    };\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\nexports.MSSqlQueryInterface = MSSqlQueryInterface;","map":{"version":3,"names":["_","require","Utils","QueryTypes","Op","QueryInterface","MSSqlQueryInterface","removeColumn","tableName","attributeName","options","__spreadValues","raw","findConstraintSql","queryGenerator","getDefaultConstraintQuery","results0","sequelize","query","length","dropConstraintSql","dropConstraintQuery","name","findForeignKeySql","getForeignKeyQuery","results","dropForeignKeySql","dropForeignKeyQuery","constraint_name","primaryKeyConstraintSql","getPrimaryKeyConstraintQuery","result","constraintName","removeSql","removeColumnQuery","upsert","insertValues","updateValues","where","model","wheres","isWhereEmpty","push","indexes","Object","values","uniqueKeys","map","item","fields","concat","_indexes","filter","unique","attributes","keys","index","intersection","field","or","type","UPSERT","sql","upsertQuery","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\mssql\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\n\nconst Utils = require('../../utils');\nconst QueryTypes = require('../../query-types');\nconst Op = require('../../operators');\nconst { QueryInterface } = require('../abstract/query-interface');\n\n/**\n * The interface that Sequelize uses to talk with MSSQL database\n */\nclass MSSqlQueryInterface extends QueryInterface {\n  /**\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\n  *\n  * @override\n  */\n  async removeColumn(tableName, attributeName, options) {\n    options = { raw: true, ...options || {} };\n\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\n    const [results0] = await this.sequelize.query(findConstraintSql, options);\n    if (results0.length) {\n      // No default constraint found -- we can cleanly remove the column\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\n    const [results] = await this.sequelize.query(findForeignKeySql, options);\n    if (results.length) {\n      // No foreign key constraints found, so we can remove the column\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\n      await this.sequelize.query(dropForeignKeySql, options);\n    }\n    //Check if the current column is a primaryKey\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\n    const [result] = await this.sequelize.query(primaryKeyConstraintSql, options);\n    if (result.length) {\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\n      await this.sequelize.query(dropConstraintSql, options);\n    }\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\n    return this.sequelize.query(removeSql, options);\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    const model = options.model;\n    const wheres = [];\n\n    options = { ...options };\n\n    if (!Utils.isWhereEmpty(where)) {\n      wheres.push(where);\n    }\n\n    // Lets combine unique keys and indexes into one\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\n\n    const attributes = Object.keys(insertValues);\n    for (const index of indexes) {\n      if (_.intersection(attributes, index).length === index.length) {\n        where = {};\n        for (const field of index) {\n          where[field] = insertValues[field];\n        }\n        wheres.push(where);\n      }\n    }\n\n    where = { [Op.or]: wheres };\n\n    options.type = QueryTypes.UPSERT;\n    options.raw = true;\n\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\n    return await this.sequelize.query(sql, options);\n  }\n}\n\nexports.MSSqlQueryInterface = MSSqlQueryInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}