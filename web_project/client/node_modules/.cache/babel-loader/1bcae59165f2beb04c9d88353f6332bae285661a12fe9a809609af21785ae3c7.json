{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n};\nconst DataTypes = require(\"../../data-types\");\nconst QueryTypes = require(\"../../query-types\");\nconst {\n  QueryInterface\n} = require(\"../abstract/query-interface\");\nconst Utils = require(\"../../utils\");\nconst Deferrable = require(\"../../deferrable\");\nclass PostgresQueryInterface extends QueryInterface {\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n    let sql = \"\";\n    let promises = [];\n    let i = 0;\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n          plain: true,\n          raw: true,\n          type: QueryTypes.SELECT\n        })));\n      }\n    }\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n    const addEnumValue = (field, value, relativeValue, position = \"before\", spliceStart = promises.length) => {\n      const valueOptions = __spreadValues({}, options);\n      valueOptions.before = null;\n      valueOptions.after = null;\n      switch (position) {\n        case \"after\":\n          valueOptions.after = relativeValue;\n          break;\n        case \"before\":\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(tableName, field, value, valueOptions), valueOptions);\n      });\n    };\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n      if (type instanceof DataTypes.ENUM || type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM) {\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), __spreadProps(__spreadValues({}, options), {\n              raw: true\n            }));\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n            if (newIdx === -1) {\n              continue;\n            }\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, \"before\", promisesLength);\n            }\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, \"after\");\n            }\n          }\n          enumIdx++;\n        }\n      }\n    }\n    const result = await promises.reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = __spreadProps(__spreadValues({}, options), {\n      type: QueryTypes.FOREIGNKEYS\n    });\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database, table.schema);\n    const result = await this.sequelize.query(query, queryOptions);\n    return result.map(fkMeta => {\n      const _a = Utils.camelizeObjectKeys(fkMeta),\n        {\n          initiallyDeferred,\n          isDeferrable\n        } = _a,\n        remaining = __objRest(_a, [\"initiallyDeferred\", \"isDeferrable\"]);\n      return __spreadProps(__spreadValues({}, remaining), {\n        deferrable: isDeferrable === \"NO\" ? Deferrable.NOT : initiallyDeferred === \"NO\" ? Deferrable.INITIALLY_IMMEDIATE : Deferrable.INITIALLY_DEFERRED\n      });\n    });\n  }\n  async dropEnum(enumName, options) {\n    options = options || {};\n    return this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)), __spreadProps(__spreadValues({}, options), {\n      raw: true\n    }));\n  }\n  async dropAllEnums(options) {\n    options = options || {};\n    const enums = await this.pgListEnums(null, options);\n    return await Promise.all(enums.map(result => this.sequelize.query(this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)), __spreadProps(__spreadValues({}, options), {\n      raw: true\n    }))));\n  }\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n      plain: false,\n      raw: true,\n      type: QueryTypes.SELECT\n    }));\n  }\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, {\n      attribute: \"tableName\"\n    });\n    if (!instanceTable) {\n      return;\n    }\n    const getTableName = (!options || !options.schema || options.schema === \"public\" ? \"\" : `${options.schema}_`) + tableName;\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, __spreadProps(__spreadValues({}, options), {\n          raw: true\n        })));\n      }\n    }\n    await Promise.all(promises);\n  }\n}\nexports.PostgresQueryInterface = PostgresQueryInterface;","map":{"version":3,"names":["DataTypes","require","QueryTypes","QueryInterface","Utils","Deferrable","PostgresQueryInterface","ensureEnums","tableName","attributes","options","model","keys","Object","keyLen","length","sql","promises","i","attribute","type","ENUM","ARRAY","queryGenerator","pgListEnums","field","push","sequelize","query","__spreadProps","__spreadValues","plain","raw","SELECT","results","Promise","all","enumIdx","addEnumValue","value","relativeValue","position","spliceStart","valueOptions","before","after","splice","pgEnumAdd","enumType","pgEnum","enumVals","fromArray","enum_value","vals","values","lastOldEnumValue","rightestPosition","oldIndex","enumVal","newIdx","indexOf","newValuesBefore","slice","promisesLength","reverseIdx","remainingEnumValues","result","reduce","promise","asyncFunction","resolve","dialect","connectionManager","_refreshDynamicOIDs","getForeignKeyReferencesForTable","table","queryOptions","FOREIGNKEYS","getForeignKeyReferencesQuery","config","database","schema","map","fkMeta","_a","camelizeObjectKeys","initiallyDeferred","isDeferrable","remaining","__objRest","deferrable","NOT","INITIALLY_IMMEDIATE","INITIALLY_DEFERRED","dropEnum","enumName","pgEnumDrop","pgEscapeAndQuote","dropAllEnums","enums","enum_name","dropTable","instanceTable","modelManager","getModel","getTableName","rawAttributes","supportsSearchPath","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\postgres\\query-interface.js"],"sourcesContent":["'use strict';\n\nconst DataTypes = require('../../data-types');\nconst QueryTypes = require('../../query-types');\nconst { QueryInterface } = require('../abstract/query-interface');\nconst Utils = require('../../utils');\nconst Deferrable = require('../../deferrable');\n\n/**\n * The interface that Sequelize uses to talk with Postgres database\n */\nclass PostgresQueryInterface extends QueryInterface {\n  /**\n   * Ensure enum and their values.\n   *\n   * @param {string} tableName  Name of table to create\n   * @param {object} attributes Object representing a list of normalized table attributes\n   * @param {object} [options]\n   * @param {Model}  [model]\n   *\n   * @protected\n   */\n  async ensureEnums(tableName, attributes, options, model) {\n    const keys = Object.keys(attributes);\n    const keyLen = keys.length;\n\n    let sql = '';\n    let promises = [];\n    let i = 0;\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && type.type instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        sql = this.queryGenerator.pgListEnums(tableName, attribute.field || keys[i], options);\n        promises.push(this.sequelize.query(\n          sql,\n          { ...options, plain: true, raw: true, type: QueryTypes.SELECT }\n        ));\n      }\n    }\n\n    const results = await Promise.all(promises);\n    promises = [];\n    let enumIdx = 0;\n\n    // This little function allows us to re-use the same code that prepends or appends new value to enum array\n    const addEnumValue = (field, value, relativeValue, position = 'before', spliceStart = promises.length) => {\n      const valueOptions = { ...options };\n      valueOptions.before = null;\n      valueOptions.after = null;\n\n      switch (position) {\n        case 'after':\n          valueOptions.after = relativeValue;\n          break;\n        case 'before':\n        default:\n          valueOptions.before = relativeValue;\n          break;\n      }\n\n      promises.splice(spliceStart, 0, () => {\n        return this.sequelize.query(this.queryGenerator.pgEnumAdd(\n          tableName, field, value, valueOptions\n        ), valueOptions);\n      });\n    };\n\n    for (i = 0; i < keyLen; i++) {\n      const attribute = attributes[keys[i]];\n      const type = attribute.type;\n      const enumType = type.type || type;\n      const field = attribute.field || keys[i];\n\n      if (\n        type instanceof DataTypes.ENUM ||\n        type instanceof DataTypes.ARRAY && enumType instanceof DataTypes.ENUM //ARRAY sub type is ENUM\n      ) {\n        // If the enum type doesn't exist then create it\n        if (!results[enumIdx]) {\n          promises.push(() => {\n            return this.sequelize.query(this.queryGenerator.pgEnum(tableName, field, enumType, options), { ...options, raw: true });\n          });\n        } else if (!!results[enumIdx] && !!model) {\n          const enumVals = this.queryGenerator.fromArray(results[enumIdx].enum_value);\n          const vals = enumType.values;\n\n          // Going through already existing values allows us to make queries that depend on those values\n          // We will prepend all new values between the old ones, but keep in mind - we can't change order of already existing values\n          // Then we append the rest of new values AFTER the latest already existing value\n          // E.g.: [1,2] -> [0,2,1] ==> [1,0,2]\n          // E.g.: [1,2,3] -> [2,1,3,4] ==> [1,2,3,4]\n          // E.g.: [1] -> [0,2,3] ==> [1,0,2,3]\n          let lastOldEnumValue;\n          let rightestPosition = -1;\n          for (let oldIndex = 0; oldIndex < enumVals.length; oldIndex++) {\n            const enumVal = enumVals[oldIndex];\n            const newIdx = vals.indexOf(enumVal);\n            lastOldEnumValue = enumVal;\n\n            if (newIdx === -1) {\n              continue;\n            }\n\n            const newValuesBefore = vals.slice(0, newIdx);\n            const promisesLength = promises.length;\n            // we go in reverse order so we could stop when we meet old value\n            for (let reverseIdx = newValuesBefore.length - 1; reverseIdx >= 0; reverseIdx--) {\n              if (~enumVals.indexOf(newValuesBefore[reverseIdx])) {\n                break;\n              }\n\n              addEnumValue(field, newValuesBefore[reverseIdx], lastOldEnumValue, 'before', promisesLength);\n            }\n\n            // we detect the most 'right' position of old value in new enum array so we can append new values to it\n            if (newIdx > rightestPosition) {\n              rightestPosition = newIdx;\n            }\n          }\n\n          if (lastOldEnumValue && rightestPosition < vals.length - 1) {\n            const remainingEnumValues = vals.slice(rightestPosition + 1);\n            for (let reverseIdx = remainingEnumValues.length - 1; reverseIdx >= 0; reverseIdx--) {\n              addEnumValue(field, remainingEnumValues[reverseIdx], lastOldEnumValue, 'after');\n            }\n          }\n\n          enumIdx++;\n        }\n      }\n    }\n\n    const result = await promises\n      .reduce(async (promise, asyncFunction) => await asyncFunction(await promise), Promise.resolve());\n\n    // If ENUM processed, then refresh OIDs\n    if (promises.length) {\n      await this.sequelize.dialect.connectionManager._refreshDynamicOIDs();\n    }\n    return result;\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(table, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS\n    };\n\n    // postgres needs some special treatment as those field names returned are all lowercase\n    // in order to keep same result with other dialects.\n    const query = this.queryGenerator.getForeignKeyReferencesQuery(table.tableName || table, this.sequelize.config.database, table.schema);\n    const result = await this.sequelize.query(query, queryOptions);\n\n    return result.map(fkMeta => {\n      const { initiallyDeferred, isDeferrable, ...remaining } = Utils.camelizeObjectKeys(fkMeta);\n\n      return {\n        ...remaining,\n        deferrable: isDeferrable === 'NO' ? Deferrable.NOT\n          : initiallyDeferred === 'NO' ? Deferrable.INITIALLY_IMMEDIATE\n            : Deferrable.INITIALLY_DEFERRED\n      };\n    });\n  }\n\n  /**\n   * Drop specified enum from database (Postgres only)\n   *\n   * @param {string} [enumName]  Enum name to drop\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropEnum(enumName, options) {\n    options = options || {};\n\n    return this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(enumName)),\n      { ...options, raw: true }\n    );\n  }\n\n  /**\n   * Drop all enums from database (Postgres only)\n   *\n   * @param {object} options Query options\n   *\n   * @returns {Promise}\n   */\n  async dropAllEnums(options) {\n    options = options || {};\n\n    const enums = await this.pgListEnums(null, options);\n\n    return await Promise.all(enums.map(result => this.sequelize.query(\n      this.queryGenerator.pgEnumDrop(null, null, this.queryGenerator.pgEscapeAndQuote(result.enum_name)),\n      { ...options, raw: true }\n    )));\n  }\n\n  /**\n   * List all enums (Postgres only)\n   *\n   * @param {string} [tableName]  Table whose enum to list\n   * @param {object} [options]    Query options\n   *\n   * @returns {Promise}\n   */\n  async pgListEnums(tableName, options) {\n    options = options || {};\n    const sql = this.queryGenerator.pgListEnums(tableName);\n    return this.sequelize.query(sql, { ...options, plain: false, raw: true, type: QueryTypes.SELECT });\n  }\n\n  /**\n   * Since postgres has a special case for enums, we should drop the related\n   * enum type within the table and attribute\n   *\n   * @override\n   */\n  async dropTable(tableName, options) {\n    await super.dropTable(tableName, options);\n    const promises = [];\n    const instanceTable = this.sequelize.modelManager.getModel(tableName, { attribute: 'tableName' });\n\n    if (!instanceTable) {\n      // Do nothing when model is not available\n      return;\n    }\n\n    const getTableName = (!options || !options.schema || options.schema === 'public' ? '' : `${options.schema}_`) + tableName;\n\n    const keys = Object.keys(instanceTable.rawAttributes);\n    const keyLen = keys.length;\n\n    for (let i = 0; i < keyLen; i++) {\n      if (instanceTable.rawAttributes[keys[i]].type instanceof DataTypes.ENUM) {\n        const sql = this.queryGenerator.pgEnumDrop(getTableName, keys[i]);\n        options.supportsSearchPath = false;\n        promises.push(this.sequelize.query(sql, { ...options, raw: true }));\n      }\n    }\n\n    await Promise.all(promises);\n  }\n}\n\nexports.PostgresQueryInterface = PostgresQueryInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}