{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst url = require(\"url\");\nconst path = require(\"path\");\nconst pgConnectionString = require(\"pg-connection-string\");\nconst retry = require(\"retry-as-promised\").default;\nconst _ = require(\"lodash\");\nconst Utils = require(\"./utils\");\nconst Model = require(\"./model\");\nconst DataTypes = require(\"./data-types\");\nconst Deferrable = require(\"./deferrable\");\nconst ModelManager = require(\"./model-manager\");\nconst Transaction = require(\"./transaction\");\nconst QueryTypes = require(\"./query-types\");\nconst TableHints = require(\"./table-hints\");\nconst IndexHints = require(\"./index-hints\");\nconst sequelizeErrors = require(\"./errors\");\nconst Hooks = require(\"./hooks\");\nconst Association = require(\"./associations/index\");\nconst Validator = require(\"./utils/validator-extras\").validator;\nconst Op = require(\"./operators\");\nconst deprecations = require(\"./utils/deprecations\");\nconst {\n  QueryInterface\n} = require(\"./dialects/abstract/query-interface\");\nconst {\n  BelongsTo\n} = require(\"./associations/belongs-to\");\nconst HasOne = require(\"./associations/has-one\");\nconst {\n  BelongsToMany\n} = require(\"./associations/belongs-to-many\");\nconst {\n  HasMany\n} = require(\"./associations/has-many\");\nconst {\n  withSqliteForeignKeysOff\n} = require(\"./dialects/sqlite/sqlite-utils\");\nconst {\n  injectReplacements\n} = require(\"./utils/sql\");\nclass Sequelize {\n  constructor(database, username, password, options) {\n    let config;\n    if (arguments.length === 1 && typeof database === \"object\") {\n      options = database;\n      config = _.pick(options, \"host\", \"port\", \"database\", \"username\", \"password\");\n    } else if (arguments.length === 1 && typeof database === \"string\" || arguments.length === 2 && typeof username === \"object\") {\n      config = {};\n      options = username || {};\n      const urlParts = url.parse(arguments[0], true);\n      options.dialect = urlParts.protocol.replace(/:$/, \"\");\n      options.host = urlParts.hostname;\n      if (options.dialect === \"sqlite\" && urlParts.pathname && !urlParts.pathname.startsWith(\"/:memory\")) {\n        const storagePath = path.join(options.host, urlParts.pathname);\n        options.storage = path.resolve(options.storage || storagePath);\n      }\n      if (urlParts.pathname) {\n        config.database = urlParts.pathname.replace(/^\\//, \"\");\n      }\n      if (urlParts.port) {\n        options.port = urlParts.port;\n      }\n      if (urlParts.auth) {\n        const authParts = urlParts.auth.split(\":\");\n        config.username = authParts[0];\n        if (authParts.length > 1) config.password = authParts.slice(1).join(\":\");\n      }\n      if (urlParts.query) {\n        if (urlParts.query.host) {\n          options.host = urlParts.query.host;\n        }\n        if (options.dialectOptions) {\n          Object.assign(options.dialectOptions, urlParts.query);\n        } else {\n          options.dialectOptions = urlParts.query;\n          if (urlParts.query.options) {\n            try {\n              const o = JSON.parse(urlParts.query.options);\n              options.dialectOptions.options = o;\n            } catch (e) {}\n          }\n        }\n      }\n      if ([\"postgres\", \"postgresql\"].includes(options.dialect)) {\n        Object.assign(options.dialectOptions, pgConnectionString.parse(arguments[0]));\n      }\n    } else {\n      options = options || {};\n      config = {\n        database,\n        username,\n        password\n      };\n    }\n    Sequelize.runHooks(\"beforeInit\", config, options);\n    this.options = __spreadValues({\n      dialect: null,\n      dialectModule: null,\n      dialectModulePath: null,\n      host: \"localhost\",\n      protocol: \"tcp\",\n      define: {},\n      query: {},\n      sync: {},\n      timezone: \"+00:00\",\n      standardConformingStrings: true,\n      logging: console.log,\n      omitNull: false,\n      native: false,\n      replication: false,\n      ssl: void 0,\n      pool: {},\n      quoteIdentifiers: true,\n      hooks: {},\n      retry: {\n        max: 5,\n        match: [\"SQLITE_BUSY: database is locked\"]\n      },\n      transactionType: Transaction.TYPES.DEFERRED,\n      isolationLevel: null,\n      databaseVersion: 0,\n      typeValidation: false,\n      benchmark: false,\n      minifyAliases: false,\n      logQueryParameters: false,\n      attributeBehavior: \"throw\"\n    }, options);\n    if (!this.options.dialect) {\n      throw new Error(\"Dialect needs to be explicitly supplied as of v4.0.0\");\n    }\n    if (this.options.dialect === \"postgresql\") {\n      this.options.dialect = \"postgres\";\n    }\n    if (this.options.dialect === \"sqlite\" && this.options.timezone !== \"+00:00\") {\n      throw new Error(\"Setting a custom timezone is not supported by SQLite, dates are always returned as UTC. Please remove the custom timezone parameter.\");\n    }\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      this.options.logging = console.log;\n    }\n    this._setupHooks(options.hooks);\n    this.config = {\n      database: config.database || this.options.database,\n      username: config.username || this.options.username,\n      password: config.password || this.options.password || null,\n      host: config.host || this.options.host,\n      port: config.port || this.options.port,\n      pool: this.options.pool,\n      protocol: this.options.protocol,\n      native: this.options.native,\n      ssl: this.options.ssl,\n      replication: this.options.replication,\n      dialectModule: this.options.dialectModule,\n      dialectModulePath: this.options.dialectModulePath,\n      keepDefaultTimezone: this.options.keepDefaultTimezone,\n      dialectOptions: this.options.dialectOptions\n    };\n    let Dialect;\n    switch (this.getDialect()) {\n      case \"mariadb\":\n        Dialect = require(\"./dialects/mariadb\");\n        break;\n      case \"mssql\":\n        Dialect = require(\"./dialects/mssql\");\n        break;\n      case \"mysql\":\n        Dialect = require(\"./dialects/mysql\");\n        break;\n      case \"oracle\":\n        Dialect = require(\"./dialects/oracle\");\n        break;\n      case \"postgres\":\n        Dialect = require(\"./dialects/postgres\");\n        break;\n      case \"sqlite\":\n        Dialect = require(\"./dialects/sqlite\");\n        break;\n      case \"db2\":\n        Dialect = require(\"./dialects/db2\");\n        break;\n      case \"snowflake\":\n        Dialect = require(\"./dialects/snowflake\");\n        break;\n      default:\n        throw new Error(`The dialect ${this.getDialect()} is not supported. Supported dialects: mssql, mariadb, mysql, oracle, postgres, db2 and sqlite.`);\n    }\n    this.dialect = new Dialect(this);\n    this.dialect.queryGenerator.typeValidation = options.typeValidation;\n    if (_.isPlainObject(this.options.operatorsAliases)) {\n      deprecations.noStringOperators();\n      this.dialect.queryGenerator.setOperatorsAliases(this.options.operatorsAliases);\n    } else if (typeof this.options.operatorsAliases === \"boolean\") {\n      deprecations.noBoolOperatorAliases();\n    }\n    this.queryInterface = this.dialect.queryInterface;\n    this.models = {};\n    this.modelManager = new ModelManager(this);\n    this.connectionManager = this.dialect.connectionManager;\n    Sequelize.runHooks(\"afterInit\", this);\n  }\n  refreshTypes() {\n    this.connectionManager.refreshTypeParser(DataTypes);\n  }\n  getDialect() {\n    return this.options.dialect;\n  }\n  getDatabaseName() {\n    return this.config.database;\n  }\n  getQueryInterface() {\n    return this.queryInterface;\n  }\n  define(modelName, attributes, options = {}) {\n    options.modelName = modelName;\n    options.sequelize = this;\n    const model = class extends Model {};\n    model.init(attributes, options);\n    return model;\n  }\n  model(modelName) {\n    if (!this.isDefined(modelName)) {\n      throw new Error(`${modelName} has not been defined`);\n    }\n    return this.modelManager.getModel(modelName);\n  }\n  isDefined(modelName) {\n    return !!this.modelManager.models.find(model => model.name === modelName);\n  }\n  async query(sql, options) {\n    options = __spreadValues(__spreadValues({}, this.options.query), options);\n    if (options.instance && !options.model) {\n      options.model = options.instance.constructor;\n    }\n    if (!options.instance && !options.model) {\n      options.raw = true;\n    }\n    if (options.mapToModel) {\n      options.fieldMap = _.get(options, \"model.fieldAttributeMap\", {});\n    }\n    options = _.defaults(options, {\n      logging: Object.prototype.hasOwnProperty.call(this.options, \"logging\") ? this.options.logging : console.log,\n      searchPath: Object.prototype.hasOwnProperty.call(this.options, \"searchPath\") ? this.options.searchPath : \"DEFAULT\"\n    });\n    if (!options.type) {\n      if (options.model || options.nest || options.plain) {\n        options.type = QueryTypes.SELECT;\n      } else {\n        options.type = QueryTypes.RAW;\n      }\n    }\n    if (!this.dialect.supports.searchPath || !this.options.dialectOptions || !this.options.dialectOptions.prependSearchPath || options.supportsSearchPath === false) {\n      delete options.searchPath;\n    } else if (!options.searchPath) {\n      options.searchPath = \"DEFAULT\";\n    }\n    if (typeof sql === \"object\") {\n      if (sql.values !== void 0) {\n        if (options.replacements !== void 0) {\n          throw new Error(\"Both `sql.values` and `options.replacements` cannot be set at the same time\");\n        }\n        options.replacements = sql.values;\n      }\n      if (sql.bind !== void 0) {\n        if (options.bind !== void 0) {\n          throw new Error(\"Both `sql.bind` and `options.bind` cannot be set at the same time\");\n        }\n        options.bind = sql.bind;\n      }\n      if (sql.query !== void 0) {\n        sql = sql.query;\n      }\n    }\n    sql = sql.trim();\n    if (options.replacements && options.bind) {\n      throw new Error(\"Both `replacements` and `bind` cannot be set at the same time\");\n    }\n    if (options.replacements) {\n      sql = injectReplacements(sql, this.dialect, options.replacements);\n    }\n    let bindParameters;\n    if (options.bind) {\n      [sql, bindParameters] = this.dialect.Query.formatBindParameters(sql, options.bind, this.options.dialect);\n    }\n    const checkTransaction = () => {\n      if (options.transaction && options.transaction.finished && !options.completesTransaction) {\n        const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`);\n        error.sql = sql;\n        throw error;\n      }\n    };\n    const retryOptions = __spreadValues(__spreadValues({}, this.options.retry), options.retry);\n    return retry(async () => {\n      if (options.transaction === void 0 && Sequelize._cls) {\n        options.transaction = Sequelize._cls.get(\"transaction\");\n      }\n      checkTransaction();\n      const connection = await (options.transaction ? options.transaction.connection : this.connectionManager.getConnection(options));\n      if (this.options.dialect === \"db2\" && options.alter) {\n        if (options.alter.drop === false) {\n          connection.dropTable = false;\n        }\n      }\n      const query = new this.dialect.Query(connection, this, options);\n      try {\n        await this.runHooks(\"beforeQuery\", options, query);\n        checkTransaction();\n        return await query.run(sql, bindParameters);\n      } finally {\n        await this.runHooks(\"afterQuery\", options, query);\n        if (!options.transaction) {\n          this.connectionManager.releaseConnection(connection);\n        }\n      }\n    }, retryOptions);\n  }\n  async set(variables, options) {\n    options = __spreadValues(__spreadValues({}, this.options.set), typeof options === \"object\" && options);\n    if (![\"mysql\", \"mariadb\"].includes(this.options.dialect)) {\n      throw new Error(\"sequelize.set is only supported for mysql or mariadb\");\n    }\n    if (!options.transaction || !(options.transaction instanceof Transaction)) {\n      throw new TypeError(\"options.transaction is required\");\n    }\n    options.raw = true;\n    options.plain = true;\n    options.type = \"SET\";\n    const query = `SET ${_.map(variables, (v, k) => `@${k} := ${typeof v === \"string\" ? `\"${v}\"` : v}`).join(\", \")}`;\n    return await this.query(query, options);\n  }\n  escape(value) {\n    return this.dialect.queryGenerator.escape(value);\n  }\n  async createSchema(schema, options) {\n    return await this.getQueryInterface().createSchema(schema, options);\n  }\n  async showAllSchemas(options) {\n    return await this.getQueryInterface().showAllSchemas(options);\n  }\n  async dropSchema(schema, options) {\n    return await this.getQueryInterface().dropSchema(schema, options);\n  }\n  async dropAllSchemas(options) {\n    return await this.getQueryInterface().dropAllSchemas(options);\n  }\n  async sync(options) {\n    options = __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, this.options), this.options.sync), options), {\n      hooks: options ? options.hooks !== false : true\n    });\n    if (options.match) {\n      if (!options.match.test(this.config.database)) {\n        throw new Error(`Database \"${this.config.database}\" does not match sync match parameter \"${options.match}\"`);\n      }\n    }\n    if (options.hooks) {\n      await this.runHooks(\"beforeBulkSync\", options);\n    }\n    if (options.force) {\n      await this.drop(options);\n    }\n    if (this.modelManager.models.length === 0) {\n      await this.authenticate(options);\n    } else {\n      const models = this.modelManager.getModelsTopoSortedByForeignKey();\n      if (models == null) {\n        return this._syncModelsWithCyclicReferences(options);\n      }\n      models.reverse();\n      for (const model of models) {\n        await model.sync(options);\n      }\n    }\n    if (options.hooks) {\n      await this.runHooks(\"afterBulkSync\", options);\n    }\n    return this;\n  }\n  async _syncModelsWithCyclicReferences(options) {\n    if (this.dialect.name === \"sqlite\") {\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.sync(options);\n        }\n      });\n      return;\n    }\n    for (const model of this.modelManager.models) {\n      await model.sync(__spreadProps(__spreadValues({}, options), {\n        withoutForeignKeyConstraints: true\n      }));\n    }\n    for (const model of this.modelManager.models) {\n      await model.sync(__spreadProps(__spreadValues({}, options), {\n        force: false,\n        alter: true\n      }));\n    }\n  }\n  async truncate(options) {\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n    const models = sortedModels || this.modelManager.models;\n    const hasCyclicDependencies = sortedModels == null;\n    if (hasCyclicDependencies && (!options || !options.cascade)) {\n      throw new Error('Sequelize#truncate: Some of your models have cyclic references (foreign keys). You need to use the \"cascade\" option to be able to delete rows from models that have cyclic references.');\n    }\n    if (hasCyclicDependencies && this.dialect.name === \"sqlite\") {\n      return withSqliteForeignKeysOff(this, options, async () => {\n        await Promise.all(models.map(model => model.truncate(options)));\n      });\n    }\n    if (options && options.cascade) {\n      for (const model of models) await model.truncate(options);\n    } else {\n      await Promise.all(models.map(model => model.truncate(options)));\n    }\n  }\n  async drop(options) {\n    if (options && options.cascade) {\n      for (const model of this.modelManager.models) {\n        await model.drop(options);\n      }\n    }\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n    if (sortedModels) {\n      for (const model of sortedModels) {\n        await model.drop(options);\n      }\n    }\n    if (this.dialect.name === \"sqlite\") {\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.drop(options);\n        }\n      });\n      return;\n    }\n    for (const model of this.modelManager.models) {\n      const tableName = model.getTableName();\n      const foreignKeys = await this.queryInterface.getForeignKeyReferencesForTable(tableName, options);\n      await Promise.all(foreignKeys.map(foreignKey => {\n        return this.queryInterface.removeConstraint(tableName, foreignKey.constraintName, options);\n      }));\n    }\n    for (const model of this.modelManager.models) {\n      await model.drop(options);\n    }\n  }\n  async authenticate(options) {\n    options = __spreadValues({\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    }, options);\n    await this.query(this.dialect.queryGenerator.authTestQuery(), options);\n    return;\n  }\n  async databaseVersion(options) {\n    return await this.getQueryInterface().databaseVersion(options);\n  }\n  random() {\n    if ([\"postgres\", \"sqlite\", \"snowflake\"].includes(this.getDialect())) {\n      return this.fn(\"RANDOM\");\n    }\n    return this.fn(\"RAND\");\n  }\n  static fn(fn, ...args) {\n    return new Utils.Fn(fn, args);\n  }\n  static col(col) {\n    return new Utils.Col(col);\n  }\n  static cast(val, type) {\n    return new Utils.Cast(val, type);\n  }\n  static literal(val) {\n    return new Utils.Literal(val);\n  }\n  static and(...args) {\n    return {\n      [Op.and]: args\n    };\n  }\n  static or(...args) {\n    return {\n      [Op.or]: args\n    };\n  }\n  static json(conditionsOrPath, value) {\n    return new Utils.Json(conditionsOrPath, value);\n  }\n  static where(attr, comparator, logic) {\n    return new Utils.Where(attr, comparator, logic);\n  }\n  async transaction(options, autoCallback) {\n    if (typeof options === \"function\") {\n      autoCallback = options;\n      options = void 0;\n    }\n    const transaction = new Transaction(this, options);\n    if (!autoCallback) {\n      await transaction.prepareEnvironment(false);\n      return transaction;\n    }\n    return Sequelize._clsRun(async () => {\n      await transaction.prepareEnvironment(true);\n      let result;\n      try {\n        result = await autoCallback(transaction);\n      } catch (err) {\n        try {\n          await transaction.rollback();\n        } catch (ignore) {}\n        throw err;\n      }\n      await transaction.commit();\n      return result;\n    });\n  }\n  static useCLS(ns) {\n    if (!ns || typeof ns !== \"object\" || typeof ns.bind !== \"function\" || typeof ns.run !== \"function\") throw new Error(\"Must provide CLS namespace\");\n    Sequelize._cls = ns;\n    return this;\n  }\n  static _clsRun(fn) {\n    const ns = Sequelize._cls;\n    if (!ns) return fn();\n    let res;\n    ns.run(context => res = fn(context));\n    return res;\n  }\n  log(...args) {\n    let options;\n    const last = _.last(args);\n    if (last && _.isPlainObject(last) && Object.prototype.hasOwnProperty.call(last, \"logging\")) {\n      options = last;\n      if (options.logging === console.log) {\n        args.splice(args.length - 1, 1);\n      }\n    } else {\n      options = this.options;\n    }\n    if (options.logging) {\n      if (options.logging === true) {\n        deprecations.noTrueLogging();\n        options.logging = console.log;\n      }\n      if ((this.options.benchmark || options.benchmark) && options.logging === console.log) {\n        args = [`${args[0]} Elapsed time: ${args[1]}ms`];\n      }\n      options.logging(...args);\n    }\n  }\n  close() {\n    return this.connectionManager.close();\n  }\n  normalizeDataType(Type) {\n    let type = typeof Type === \"function\" ? new Type() : Type;\n    const dialectTypes = this.dialect.DataTypes || {};\n    if (dialectTypes[type.key]) {\n      type = dialectTypes[type.key].extend(type);\n    }\n    if (type instanceof DataTypes.ARRAY) {\n      if (!type.type) {\n        throw new Error(\"ARRAY is missing type definition for its values.\");\n      }\n      if (dialectTypes[type.type.key]) {\n        type.type = dialectTypes[type.type.key].extend(type.type);\n      }\n    }\n    return type;\n  }\n  normalizeAttribute(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute\n      };\n    }\n    if (!attribute.type) return attribute;\n    attribute.type = this.normalizeDataType(attribute.type);\n    if (Object.prototype.hasOwnProperty.call(attribute, \"defaultValue\")) {\n      if (typeof attribute.defaultValue === \"function\" && [DataTypes.NOW, DataTypes.UUIDV1, DataTypes.UUIDV4].includes(attribute.defaultValue)) {\n        attribute.defaultValue = new attribute.defaultValue();\n      }\n    }\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.values) {\n        attribute.type.values = attribute.type.options.values = attribute.values;\n      } else {\n        attribute.values = attribute.type.values;\n      }\n      if (!attribute.values.length) {\n        throw new Error(\"Values for ENUM have not been defined.\");\n      }\n    }\n    return attribute;\n  }\n}\nSequelize.prototype.fn = Sequelize.fn;\nSequelize.prototype.col = Sequelize.col;\nSequelize.prototype.cast = Sequelize.cast;\nSequelize.prototype.literal = Sequelize.literal;\nSequelize.prototype.and = Sequelize.and;\nSequelize.prototype.or = Sequelize.or;\nSequelize.prototype.json = Sequelize.json;\nSequelize.prototype.where = Sequelize.where;\nSequelize.prototype.validate = Sequelize.prototype.authenticate;\nObject.defineProperty(Sequelize, \"version\", {\n  enumerable: true,\n  get() {\n    return require(\"../package.json\").version;\n  }\n});\nSequelize.options = {\n  hooks: {}\n};\nSequelize.Utils = Utils;\nSequelize.Op = Op;\nSequelize.TableHints = TableHints;\nSequelize.IndexHints = IndexHints;\nSequelize.Transaction = Transaction;\nSequelize.prototype.Sequelize = Sequelize;\nSequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;\nSequelize.prototype.Validator = Sequelize.Validator = Validator;\nSequelize.Model = Model;\nSequelize.QueryInterface = QueryInterface;\nSequelize.BelongsTo = BelongsTo;\nSequelize.HasOne = HasOne;\nSequelize.HasMany = HasMany;\nSequelize.BelongsToMany = BelongsToMany;\nSequelize.DataTypes = DataTypes;\nfor (const dataType in DataTypes) {\n  Sequelize[dataType] = DataTypes[dataType];\n}\nSequelize.Deferrable = Deferrable;\nSequelize.prototype.Association = Sequelize.Association = Association;\nSequelize.useInflection = Utils.useInflection;\nHooks.applyTo(Sequelize);\nHooks.applyTo(Sequelize.prototype);\nSequelize.Error = sequelizeErrors.BaseError;\nfor (const error of Object.keys(sequelizeErrors)) {\n  Sequelize[error] = sequelizeErrors[error];\n}\nmodule.exports = Sequelize;\nmodule.exports.Sequelize = Sequelize;\nmodule.exports.default = Sequelize;","map":{"version":3,"names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","url","require","path","pgConnectionString","retry","default","_","Utils","Model","DataTypes","Deferrable","ModelManager","Transaction","QueryTypes","TableHints","IndexHints","sequelizeErrors","Hooks","Association","Validator","validator","Op","deprecations","QueryInterface","BelongsTo","HasOne","BelongsToMany","HasMany","withSqliteForeignKeysOff","injectReplacements","Sequelize","constructor","database","username","password","options","config","arguments","length","pick","urlParts","parse","dialect","protocol","replace","host","hostname","pathname","startsWith","storagePath","join","storage","resolve","port","auth","authParts","split","slice","query","dialectOptions","assign","o","JSON","e","includes","runHooks","dialectModule","dialectModulePath","define","sync","timezone","standardConformingStrings","logging","console","log","omitNull","native","replication","ssl","pool","quoteIdentifiers","hooks","max","match","transactionType","TYPES","DEFERRED","isolationLevel","databaseVersion","typeValidation","benchmark","minifyAliases","logQueryParameters","attributeBehavior","Error","noTrueLogging","_setupHooks","keepDefaultTimezone","Dialect","getDialect","queryGenerator","isPlainObject","operatorsAliases","noStringOperators","setOperatorsAliases","noBoolOperatorAliases","queryInterface","models","modelManager","connectionManager","refreshTypes","refreshTypeParser","getDatabaseName","getQueryInterface","modelName","attributes","sequelize","model","init","isDefined","getModel","find","name","sql","instance","raw","mapToModel","fieldMap","get","defaults","searchPath","type","nest","plain","SELECT","RAW","supports","prependSearchPath","supportsSearchPath","values","replacements","bind","trim","bindParameters","Query","formatBindParameters","checkTransaction","transaction","finished","completesTransaction","error","id","retryOptions","_cls","connection","getConnection","alter","drop","dropTable","run","releaseConnection","set","variables","TypeError","map","v","k","escape","createSchema","schema","showAllSchemas","dropSchema","dropAllSchemas","test","force","authenticate","getModelsTopoSortedByForeignKey","_syncModelsWithCyclicReferences","reverse","withoutForeignKeyConstraints","truncate","sortedModels","hasCyclicDependencies","cascade","Promise","all","tableName","getTableName","foreignKeys","getForeignKeyReferencesForTable","foreignKey","removeConstraint","constraintName","authTestQuery","random","fn","args","Fn","col","Col","cast","val","Cast","literal","Literal","and","or","json","conditionsOrPath","Json","where","attr","comparator","logic","Where","autoCallback","prepareEnvironment","_clsRun","result","err","rollback","ignore","commit","useCLS","ns","res","context","last","splice","close","normalizeDataType","Type","dialectTypes","extend","ARRAY","normalizeAttribute","attribute","defaultValue","NOW","UUIDV1","UUIDV4","ENUM","validate","version","dataType","useInflection","applyTo","BaseError","keys","module","exports"],"sources":["C:/Users/teply/OneDrive/Рабочий стол/web_project/client/node_modules/sequelize/lib/sequelize.js"],"sourcesContent":["\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst url = require(\"url\");\nconst path = require(\"path\");\nconst pgConnectionString = require(\"pg-connection-string\");\nconst retry = require(\"retry-as-promised\").default;\nconst _ = require(\"lodash\");\nconst Utils = require(\"./utils\");\nconst Model = require(\"./model\");\nconst DataTypes = require(\"./data-types\");\nconst Deferrable = require(\"./deferrable\");\nconst ModelManager = require(\"./model-manager\");\nconst Transaction = require(\"./transaction\");\nconst QueryTypes = require(\"./query-types\");\nconst TableHints = require(\"./table-hints\");\nconst IndexHints = require(\"./index-hints\");\nconst sequelizeErrors = require(\"./errors\");\nconst Hooks = require(\"./hooks\");\nconst Association = require(\"./associations/index\");\nconst Validator = require(\"./utils/validator-extras\").validator;\nconst Op = require(\"./operators\");\nconst deprecations = require(\"./utils/deprecations\");\nconst { QueryInterface } = require(\"./dialects/abstract/query-interface\");\nconst { BelongsTo } = require(\"./associations/belongs-to\");\nconst HasOne = require(\"./associations/has-one\");\nconst { BelongsToMany } = require(\"./associations/belongs-to-many\");\nconst { HasMany } = require(\"./associations/has-many\");\nconst { withSqliteForeignKeysOff } = require(\"./dialects/sqlite/sqlite-utils\");\nconst { injectReplacements } = require(\"./utils/sql\");\nclass Sequelize {\n  constructor(database, username, password, options) {\n    let config;\n    if (arguments.length === 1 && typeof database === \"object\") {\n      options = database;\n      config = _.pick(options, \"host\", \"port\", \"database\", \"username\", \"password\");\n    } else if (arguments.length === 1 && typeof database === \"string\" || arguments.length === 2 && typeof username === \"object\") {\n      config = {};\n      options = username || {};\n      const urlParts = url.parse(arguments[0], true);\n      options.dialect = urlParts.protocol.replace(/:$/, \"\");\n      options.host = urlParts.hostname;\n      if (options.dialect === \"sqlite\" && urlParts.pathname && !urlParts.pathname.startsWith(\"/:memory\")) {\n        const storagePath = path.join(options.host, urlParts.pathname);\n        options.storage = path.resolve(options.storage || storagePath);\n      }\n      if (urlParts.pathname) {\n        config.database = urlParts.pathname.replace(/^\\//, \"\");\n      }\n      if (urlParts.port) {\n        options.port = urlParts.port;\n      }\n      if (urlParts.auth) {\n        const authParts = urlParts.auth.split(\":\");\n        config.username = authParts[0];\n        if (authParts.length > 1)\n          config.password = authParts.slice(1).join(\":\");\n      }\n      if (urlParts.query) {\n        if (urlParts.query.host) {\n          options.host = urlParts.query.host;\n        }\n        if (options.dialectOptions) {\n          Object.assign(options.dialectOptions, urlParts.query);\n        } else {\n          options.dialectOptions = urlParts.query;\n          if (urlParts.query.options) {\n            try {\n              const o = JSON.parse(urlParts.query.options);\n              options.dialectOptions.options = o;\n            } catch (e) {\n            }\n          }\n        }\n      }\n      if ([\"postgres\", \"postgresql\"].includes(options.dialect)) {\n        Object.assign(options.dialectOptions, pgConnectionString.parse(arguments[0]));\n      }\n    } else {\n      options = options || {};\n      config = { database, username, password };\n    }\n    Sequelize.runHooks(\"beforeInit\", config, options);\n    this.options = __spreadValues({\n      dialect: null,\n      dialectModule: null,\n      dialectModulePath: null,\n      host: \"localhost\",\n      protocol: \"tcp\",\n      define: {},\n      query: {},\n      sync: {},\n      timezone: \"+00:00\",\n      standardConformingStrings: true,\n      logging: console.log,\n      omitNull: false,\n      native: false,\n      replication: false,\n      ssl: void 0,\n      pool: {},\n      quoteIdentifiers: true,\n      hooks: {},\n      retry: {\n        max: 5,\n        match: [\n          \"SQLITE_BUSY: database is locked\"\n        ]\n      },\n      transactionType: Transaction.TYPES.DEFERRED,\n      isolationLevel: null,\n      databaseVersion: 0,\n      typeValidation: false,\n      benchmark: false,\n      minifyAliases: false,\n      logQueryParameters: false,\n      attributeBehavior: \"throw\"\n    }, options);\n    if (!this.options.dialect) {\n      throw new Error(\"Dialect needs to be explicitly supplied as of v4.0.0\");\n    }\n    if (this.options.dialect === \"postgresql\") {\n      this.options.dialect = \"postgres\";\n    }\n    if (this.options.dialect === \"sqlite\" && this.options.timezone !== \"+00:00\") {\n      throw new Error(\"Setting a custom timezone is not supported by SQLite, dates are always returned as UTC. Please remove the custom timezone parameter.\");\n    }\n    if (this.options.logging === true) {\n      deprecations.noTrueLogging();\n      this.options.logging = console.log;\n    }\n    this._setupHooks(options.hooks);\n    this.config = {\n      database: config.database || this.options.database,\n      username: config.username || this.options.username,\n      password: config.password || this.options.password || null,\n      host: config.host || this.options.host,\n      port: config.port || this.options.port,\n      pool: this.options.pool,\n      protocol: this.options.protocol,\n      native: this.options.native,\n      ssl: this.options.ssl,\n      replication: this.options.replication,\n      dialectModule: this.options.dialectModule,\n      dialectModulePath: this.options.dialectModulePath,\n      keepDefaultTimezone: this.options.keepDefaultTimezone,\n      dialectOptions: this.options.dialectOptions\n    };\n    let Dialect;\n    switch (this.getDialect()) {\n      case \"mariadb\":\n        Dialect = require(\"./dialects/mariadb\");\n        break;\n      case \"mssql\":\n        Dialect = require(\"./dialects/mssql\");\n        break;\n      case \"mysql\":\n        Dialect = require(\"./dialects/mysql\");\n        break;\n      case \"oracle\":\n        Dialect = require(\"./dialects/oracle\");\n        break;\n      case \"postgres\":\n        Dialect = require(\"./dialects/postgres\");\n        break;\n      case \"sqlite\":\n        Dialect = require(\"./dialects/sqlite\");\n        break;\n      case \"db2\":\n        Dialect = require(\"./dialects/db2\");\n        break;\n      case \"snowflake\":\n        Dialect = require(\"./dialects/snowflake\");\n        break;\n      default:\n        throw new Error(`The dialect ${this.getDialect()} is not supported. Supported dialects: mssql, mariadb, mysql, oracle, postgres, db2 and sqlite.`);\n    }\n    this.dialect = new Dialect(this);\n    this.dialect.queryGenerator.typeValidation = options.typeValidation;\n    if (_.isPlainObject(this.options.operatorsAliases)) {\n      deprecations.noStringOperators();\n      this.dialect.queryGenerator.setOperatorsAliases(this.options.operatorsAliases);\n    } else if (typeof this.options.operatorsAliases === \"boolean\") {\n      deprecations.noBoolOperatorAliases();\n    }\n    this.queryInterface = this.dialect.queryInterface;\n    this.models = {};\n    this.modelManager = new ModelManager(this);\n    this.connectionManager = this.dialect.connectionManager;\n    Sequelize.runHooks(\"afterInit\", this);\n  }\n  refreshTypes() {\n    this.connectionManager.refreshTypeParser(DataTypes);\n  }\n  getDialect() {\n    return this.options.dialect;\n  }\n  getDatabaseName() {\n    return this.config.database;\n  }\n  getQueryInterface() {\n    return this.queryInterface;\n  }\n  define(modelName, attributes, options = {}) {\n    options.modelName = modelName;\n    options.sequelize = this;\n    const model = class extends Model {\n    };\n    model.init(attributes, options);\n    return model;\n  }\n  model(modelName) {\n    if (!this.isDefined(modelName)) {\n      throw new Error(`${modelName} has not been defined`);\n    }\n    return this.modelManager.getModel(modelName);\n  }\n  isDefined(modelName) {\n    return !!this.modelManager.models.find((model) => model.name === modelName);\n  }\n  async query(sql, options) {\n    options = __spreadValues(__spreadValues({}, this.options.query), options);\n    if (options.instance && !options.model) {\n      options.model = options.instance.constructor;\n    }\n    if (!options.instance && !options.model) {\n      options.raw = true;\n    }\n    if (options.mapToModel) {\n      options.fieldMap = _.get(options, \"model.fieldAttributeMap\", {});\n    }\n    options = _.defaults(options, {\n      logging: Object.prototype.hasOwnProperty.call(this.options, \"logging\") ? this.options.logging : console.log,\n      searchPath: Object.prototype.hasOwnProperty.call(this.options, \"searchPath\") ? this.options.searchPath : \"DEFAULT\"\n    });\n    if (!options.type) {\n      if (options.model || options.nest || options.plain) {\n        options.type = QueryTypes.SELECT;\n      } else {\n        options.type = QueryTypes.RAW;\n      }\n    }\n    if (!this.dialect.supports.searchPath || !this.options.dialectOptions || !this.options.dialectOptions.prependSearchPath || options.supportsSearchPath === false) {\n      delete options.searchPath;\n    } else if (!options.searchPath) {\n      options.searchPath = \"DEFAULT\";\n    }\n    if (typeof sql === \"object\") {\n      if (sql.values !== void 0) {\n        if (options.replacements !== void 0) {\n          throw new Error(\"Both `sql.values` and `options.replacements` cannot be set at the same time\");\n        }\n        options.replacements = sql.values;\n      }\n      if (sql.bind !== void 0) {\n        if (options.bind !== void 0) {\n          throw new Error(\"Both `sql.bind` and `options.bind` cannot be set at the same time\");\n        }\n        options.bind = sql.bind;\n      }\n      if (sql.query !== void 0) {\n        sql = sql.query;\n      }\n    }\n    sql = sql.trim();\n    if (options.replacements && options.bind) {\n      throw new Error(\"Both `replacements` and `bind` cannot be set at the same time\");\n    }\n    if (options.replacements) {\n      sql = injectReplacements(sql, this.dialect, options.replacements);\n    }\n    let bindParameters;\n    if (options.bind) {\n      [sql, bindParameters] = this.dialect.Query.formatBindParameters(sql, options.bind, this.options.dialect);\n    }\n    const checkTransaction = () => {\n      if (options.transaction && options.transaction.finished && !options.completesTransaction) {\n        const error = new Error(`${options.transaction.finished} has been called on this transaction(${options.transaction.id}), you can no longer use it. (The rejected query is attached as the 'sql' property of this error)`);\n        error.sql = sql;\n        throw error;\n      }\n    };\n    const retryOptions = __spreadValues(__spreadValues({}, this.options.retry), options.retry);\n    return retry(async () => {\n      if (options.transaction === void 0 && Sequelize._cls) {\n        options.transaction = Sequelize._cls.get(\"transaction\");\n      }\n      checkTransaction();\n      const connection = await (options.transaction ? options.transaction.connection : this.connectionManager.getConnection(options));\n      if (this.options.dialect === \"db2\" && options.alter) {\n        if (options.alter.drop === false) {\n          connection.dropTable = false;\n        }\n      }\n      const query = new this.dialect.Query(connection, this, options);\n      try {\n        await this.runHooks(\"beforeQuery\", options, query);\n        checkTransaction();\n        return await query.run(sql, bindParameters);\n      } finally {\n        await this.runHooks(\"afterQuery\", options, query);\n        if (!options.transaction) {\n          this.connectionManager.releaseConnection(connection);\n        }\n      }\n    }, retryOptions);\n  }\n  async set(variables, options) {\n    options = __spreadValues(__spreadValues({}, this.options.set), typeof options === \"object\" && options);\n    if (![\"mysql\", \"mariadb\"].includes(this.options.dialect)) {\n      throw new Error(\"sequelize.set is only supported for mysql or mariadb\");\n    }\n    if (!options.transaction || !(options.transaction instanceof Transaction)) {\n      throw new TypeError(\"options.transaction is required\");\n    }\n    options.raw = true;\n    options.plain = true;\n    options.type = \"SET\";\n    const query = `SET ${_.map(variables, (v, k) => `@${k} := ${typeof v === \"string\" ? `\"${v}\"` : v}`).join(\", \")}`;\n    return await this.query(query, options);\n  }\n  escape(value) {\n    return this.dialect.queryGenerator.escape(value);\n  }\n  async createSchema(schema, options) {\n    return await this.getQueryInterface().createSchema(schema, options);\n  }\n  async showAllSchemas(options) {\n    return await this.getQueryInterface().showAllSchemas(options);\n  }\n  async dropSchema(schema, options) {\n    return await this.getQueryInterface().dropSchema(schema, options);\n  }\n  async dropAllSchemas(options) {\n    return await this.getQueryInterface().dropAllSchemas(options);\n  }\n  async sync(options) {\n    options = __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, this.options), this.options.sync), options), {\n      hooks: options ? options.hooks !== false : true\n    });\n    if (options.match) {\n      if (!options.match.test(this.config.database)) {\n        throw new Error(`Database \"${this.config.database}\" does not match sync match parameter \"${options.match}\"`);\n      }\n    }\n    if (options.hooks) {\n      await this.runHooks(\"beforeBulkSync\", options);\n    }\n    if (options.force) {\n      await this.drop(options);\n    }\n    if (this.modelManager.models.length === 0) {\n      await this.authenticate(options);\n    } else {\n      const models = this.modelManager.getModelsTopoSortedByForeignKey();\n      if (models == null) {\n        return this._syncModelsWithCyclicReferences(options);\n      }\n      models.reverse();\n      for (const model of models) {\n        await model.sync(options);\n      }\n    }\n    if (options.hooks) {\n      await this.runHooks(\"afterBulkSync\", options);\n    }\n    return this;\n  }\n  async _syncModelsWithCyclicReferences(options) {\n    if (this.dialect.name === \"sqlite\") {\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.sync(options);\n        }\n      });\n      return;\n    }\n    for (const model of this.modelManager.models) {\n      await model.sync(__spreadProps(__spreadValues({}, options), { withoutForeignKeyConstraints: true }));\n    }\n    for (const model of this.modelManager.models) {\n      await model.sync(__spreadProps(__spreadValues({}, options), { force: false, alter: true }));\n    }\n  }\n  async truncate(options) {\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n    const models = sortedModels || this.modelManager.models;\n    const hasCyclicDependencies = sortedModels == null;\n    if (hasCyclicDependencies && (!options || !options.cascade)) {\n      throw new Error('Sequelize#truncate: Some of your models have cyclic references (foreign keys). You need to use the \"cascade\" option to be able to delete rows from models that have cyclic references.');\n    }\n    if (hasCyclicDependencies && this.dialect.name === \"sqlite\") {\n      return withSqliteForeignKeysOff(this, options, async () => {\n        await Promise.all(models.map((model) => model.truncate(options)));\n      });\n    }\n    if (options && options.cascade) {\n      for (const model of models)\n        await model.truncate(options);\n    } else {\n      await Promise.all(models.map((model) => model.truncate(options)));\n    }\n  }\n  async drop(options) {\n    if (options && options.cascade) {\n      for (const model of this.modelManager.models) {\n        await model.drop(options);\n      }\n    }\n    const sortedModels = this.modelManager.getModelsTopoSortedByForeignKey();\n    if (sortedModels) {\n      for (const model of sortedModels) {\n        await model.drop(options);\n      }\n    }\n    if (this.dialect.name === \"sqlite\") {\n      await withSqliteForeignKeysOff(this, options, async () => {\n        for (const model of this.modelManager.models) {\n          await model.drop(options);\n        }\n      });\n      return;\n    }\n    for (const model of this.modelManager.models) {\n      const tableName = model.getTableName();\n      const foreignKeys = await this.queryInterface.getForeignKeyReferencesForTable(tableName, options);\n      await Promise.all(foreignKeys.map((foreignKey) => {\n        return this.queryInterface.removeConstraint(tableName, foreignKey.constraintName, options);\n      }));\n    }\n    for (const model of this.modelManager.models) {\n      await model.drop(options);\n    }\n  }\n  async authenticate(options) {\n    options = __spreadValues({\n      raw: true,\n      plain: true,\n      type: QueryTypes.SELECT\n    }, options);\n    await this.query(this.dialect.queryGenerator.authTestQuery(), options);\n    return;\n  }\n  async databaseVersion(options) {\n    return await this.getQueryInterface().databaseVersion(options);\n  }\n  random() {\n    if ([\"postgres\", \"sqlite\", \"snowflake\"].includes(this.getDialect())) {\n      return this.fn(\"RANDOM\");\n    }\n    return this.fn(\"RAND\");\n  }\n  static fn(fn, ...args) {\n    return new Utils.Fn(fn, args);\n  }\n  static col(col) {\n    return new Utils.Col(col);\n  }\n  static cast(val, type) {\n    return new Utils.Cast(val, type);\n  }\n  static literal(val) {\n    return new Utils.Literal(val);\n  }\n  static and(...args) {\n    return { [Op.and]: args };\n  }\n  static or(...args) {\n    return { [Op.or]: args };\n  }\n  static json(conditionsOrPath, value) {\n    return new Utils.Json(conditionsOrPath, value);\n  }\n  static where(attr, comparator, logic) {\n    return new Utils.Where(attr, comparator, logic);\n  }\n  async transaction(options, autoCallback) {\n    if (typeof options === \"function\") {\n      autoCallback = options;\n      options = void 0;\n    }\n    const transaction = new Transaction(this, options);\n    if (!autoCallback) {\n      await transaction.prepareEnvironment(false);\n      return transaction;\n    }\n    return Sequelize._clsRun(async () => {\n      await transaction.prepareEnvironment(true);\n      let result;\n      try {\n        result = await autoCallback(transaction);\n      } catch (err) {\n        try {\n          await transaction.rollback();\n        } catch (ignore) {\n        }\n        throw err;\n      }\n      await transaction.commit();\n      return result;\n    });\n  }\n  static useCLS(ns) {\n    if (!ns || typeof ns !== \"object\" || typeof ns.bind !== \"function\" || typeof ns.run !== \"function\")\n      throw new Error(\"Must provide CLS namespace\");\n    Sequelize._cls = ns;\n    return this;\n  }\n  static _clsRun(fn) {\n    const ns = Sequelize._cls;\n    if (!ns)\n      return fn();\n    let res;\n    ns.run((context) => res = fn(context));\n    return res;\n  }\n  log(...args) {\n    let options;\n    const last = _.last(args);\n    if (last && _.isPlainObject(last) && Object.prototype.hasOwnProperty.call(last, \"logging\")) {\n      options = last;\n      if (options.logging === console.log) {\n        args.splice(args.length - 1, 1);\n      }\n    } else {\n      options = this.options;\n    }\n    if (options.logging) {\n      if (options.logging === true) {\n        deprecations.noTrueLogging();\n        options.logging = console.log;\n      }\n      if ((this.options.benchmark || options.benchmark) && options.logging === console.log) {\n        args = [`${args[0]} Elapsed time: ${args[1]}ms`];\n      }\n      options.logging(...args);\n    }\n  }\n  close() {\n    return this.connectionManager.close();\n  }\n  normalizeDataType(Type) {\n    let type = typeof Type === \"function\" ? new Type() : Type;\n    const dialectTypes = this.dialect.DataTypes || {};\n    if (dialectTypes[type.key]) {\n      type = dialectTypes[type.key].extend(type);\n    }\n    if (type instanceof DataTypes.ARRAY) {\n      if (!type.type) {\n        throw new Error(\"ARRAY is missing type definition for its values.\");\n      }\n      if (dialectTypes[type.type.key]) {\n        type.type = dialectTypes[type.type.key].extend(type.type);\n      }\n    }\n    return type;\n  }\n  normalizeAttribute(attribute) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = { type: attribute };\n    }\n    if (!attribute.type)\n      return attribute;\n    attribute.type = this.normalizeDataType(attribute.type);\n    if (Object.prototype.hasOwnProperty.call(attribute, \"defaultValue\")) {\n      if (typeof attribute.defaultValue === \"function\" && [DataTypes.NOW, DataTypes.UUIDV1, DataTypes.UUIDV4].includes(attribute.defaultValue)) {\n        attribute.defaultValue = new attribute.defaultValue();\n      }\n    }\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.values) {\n        attribute.type.values = attribute.type.options.values = attribute.values;\n      } else {\n        attribute.values = attribute.type.values;\n      }\n      if (!attribute.values.length) {\n        throw new Error(\"Values for ENUM have not been defined.\");\n      }\n    }\n    return attribute;\n  }\n}\nSequelize.prototype.fn = Sequelize.fn;\nSequelize.prototype.col = Sequelize.col;\nSequelize.prototype.cast = Sequelize.cast;\nSequelize.prototype.literal = Sequelize.literal;\nSequelize.prototype.and = Sequelize.and;\nSequelize.prototype.or = Sequelize.or;\nSequelize.prototype.json = Sequelize.json;\nSequelize.prototype.where = Sequelize.where;\nSequelize.prototype.validate = Sequelize.prototype.authenticate;\nObject.defineProperty(Sequelize, \"version\", {\n  enumerable: true,\n  get() {\n    return require(\"../package.json\").version;\n  }\n});\nSequelize.options = { hooks: {} };\nSequelize.Utils = Utils;\nSequelize.Op = Op;\nSequelize.TableHints = TableHints;\nSequelize.IndexHints = IndexHints;\nSequelize.Transaction = Transaction;\nSequelize.prototype.Sequelize = Sequelize;\nSequelize.prototype.QueryTypes = Sequelize.QueryTypes = QueryTypes;\nSequelize.prototype.Validator = Sequelize.Validator = Validator;\nSequelize.Model = Model;\nSequelize.QueryInterface = QueryInterface;\nSequelize.BelongsTo = BelongsTo;\nSequelize.HasOne = HasOne;\nSequelize.HasMany = HasMany;\nSequelize.BelongsToMany = BelongsToMany;\nSequelize.DataTypes = DataTypes;\nfor (const dataType in DataTypes) {\n  Sequelize[dataType] = DataTypes[dataType];\n}\nSequelize.Deferrable = Deferrable;\nSequelize.prototype.Association = Sequelize.Association = Association;\nSequelize.useInflection = Utils.useInflection;\nHooks.applyTo(Sequelize);\nHooks.applyTo(Sequelize.prototype);\nSequelize.Error = sequelizeErrors.BaseError;\nfor (const error of Object.keys(sequelizeErrors)) {\n  Sequelize[error] = sequelizeErrors[error];\n}\nmodule.exports = Sequelize;\nmodule.exports.Sequelize = Sequelize;\nmodule.exports.default = Sequelize;\n//# sourceMappingURL=sequelize.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}