{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst AbstractDialect = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").db2;\nconst {\n  Db2QueryInterface\n} = require(\"./query-interface\");\nclass Db2Dialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);\n  }\n}\nDb2Dialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  \"DEFAULT\": true,\n  \"DEFAULT VALUES\": false,\n  \"VALUES ()\": false,\n  \"LIMIT ON UPDATE\": false,\n  \"ORDER NULLS\": false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: false,\n  schemas: true,\n  finalTable: true,\n  autoIncrement: {\n    identityInsert: false,\n    defaultValue: false,\n    update: true\n  },\n  constraints: {\n    restrict: true,\n    default: false\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\nDb2Dialect.prototype.defaultVersion = \"1.0.0\";\nDb2Dialect.prototype.Query = Query;\nDb2Dialect.prototype.name = \"db2\";\nDb2Dialect.prototype.TICK_CHAR = '\"';\nDb2Dialect.prototype.TICK_CHAR_LEFT = '\"';\nDb2Dialect.prototype.TICK_CHAR_RIGHT = '\"';\nDb2Dialect.prototype.DataTypes = DataTypes;\nmodule.exports = Db2Dialect;","map":{"version":3,"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","db2","Db2QueryInterface","Db2Dialect","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","prototype","supports","merge","cloneDeep","lock","transactions","migrations","returnValues","schemas","finalTable","autoIncrement","identityInsert","defaultValue","update","constraints","restrict","default","index","collate","length","parser","type","using","where","NUMERIC","tmpTableTrigger","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\db2\\index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').db2;\nconst { Db2QueryInterface } = require('./query-interface');\n\nclass Db2Dialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new Db2QueryInterface(sequelize, this.queryGenerator);\n  }\n}\n\nDb2Dialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  'DEFAULT': true,\n  'DEFAULT VALUES': false,\n  'VALUES ()': false,\n  'LIMIT ON UPDATE': false,\n  'ORDER NULLS': false,\n  lock: false,\n  transactions: true,\n  migrations: false,\n  returnValues: false,\n  schemas: true,\n  finalTable: true,\n  autoIncrement: {\n    identityInsert: false,\n    defaultValue: false,\n    update: true\n  },\n  constraints: {\n    restrict: true,\n    default: false\n  },\n  index: {\n    collate: false,\n    length: false,\n    parser: false,\n    type: false,\n    using: false,\n    where: true\n  },\n  NUMERIC: true,\n  tmpTableTrigger: true\n});\n\nDb2Dialect.prototype.defaultVersion = '1.0.0'; // Db2 supported version comes here\nDb2Dialect.prototype.Query = Query;\nDb2Dialect.prototype.name = 'db2';\nDb2Dialect.prototype.TICK_CHAR = '\"';\nDb2Dialect.prototype.TICK_CHAR_LEFT = '\"';\nDb2Dialect.prototype.TICK_CHAR_RIGHT = '\"';\nDb2Dialect.prototype.DataTypes = DataTypes;\n\nmodule.exports = Db2Dialect;\n"],"mappings":";;AAEA,MAAMA,CAAA,GAAIC,OAAA,CAAQ;AAClB,MAAMC,eAAA,GAAkBD,OAAA,CAAQ;AAChC,MAAME,iBAAA,GAAoBF,OAAA,CAAQ;AAClC,MAAMG,KAAA,GAAQH,OAAA,CAAQ;AACtB,MAAMI,cAAA,GAAiBJ,OAAA,CAAQ;AAC/B,MAAMK,SAAA,GAAYL,OAAA,CAAQ,oBAAoBM,GAAA;AAC9C,MAAM;EAAEC;AAAA,IAAsBP,OAAA,CAAQ;AAEtC,MAAAQ,UAAA,SAAyBP,eAAA,CAAgB;EACvCQ,YAAYC,SAAA,EAAW;IACrB;IACA,KAAKA,SAAA,GAAYA,SAAA;IACjB,KAAKC,iBAAA,GAAoB,IAAIT,iBAAA,CAAkB,MAAMQ,SAAA;IACrD,KAAKE,cAAA,GAAiB,IAAIR,cAAA,CAAe;MACvCS,QAAA,EAAU;MACVH;IAAA;IAEF,KAAKI,cAAA,GAAiB,IAAIP,iBAAA,CAAkBG,SAAA,EAAW,KAAKE,cAAA;EAAA;AAAA;AAIhEJ,UAAA,CAAWO,SAAA,CAAUC,QAAA,GAAWjB,CAAA,CAAEkB,KAAA,CAAMlB,CAAA,CAAEmB,SAAA,CAAUjB,eAAA,CAAgBc,SAAA,CAAUC,QAAA,GAAW;EACvF,WAAW;EACX,kBAAkB;EAClB,aAAa;EACb,mBAAmB;EACnB,eAAe;EACfG,IAAA,EAAM;EACNC,YAAA,EAAc;EACdC,UAAA,EAAY;EACZC,YAAA,EAAc;EACdC,OAAA,EAAS;EACTC,UAAA,EAAY;EACZC,aAAA,EAAe;IACbC,cAAA,EAAgB;IAChBC,YAAA,EAAc;IACdC,MAAA,EAAQ;EAAA;EAEVC,WAAA,EAAa;IACXC,QAAA,EAAU;IACVC,OAAA,EAAS;EAAA;EAEXC,KAAA,EAAO;IACLC,OAAA,EAAS;IACTC,MAAA,EAAQ;IACRC,MAAA,EAAQ;IACRC,IAAA,EAAM;IACNC,KAAA,EAAO;IACPC,KAAA,EAAO;EAAA;EAETC,OAAA,EAAS;EACTC,eAAA,EAAiB;AAAA;AAGnBhC,UAAA,CAAWO,SAAA,CAAU0B,cAAA,GAAiB;AACtCjC,UAAA,CAAWO,SAAA,CAAUZ,KAAA,GAAQA,KAAA;AAC7BK,UAAA,CAAWO,SAAA,CAAU2B,IAAA,GAAO;AAC5BlC,UAAA,CAAWO,SAAA,CAAU4B,SAAA,GAAY;AACjCnC,UAAA,CAAWO,SAAA,CAAU6B,cAAA,GAAiB;AACtCpC,UAAA,CAAWO,SAAA,CAAU8B,eAAA,GAAkB;AACvCrC,UAAA,CAAWO,SAAA,CAAUV,SAAA,GAAYA,SAAA;AAEjCyC,MAAA,CAAOC,OAAA,GAAUvC,UAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}