{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\nconst AbstractDialect = require(\"../abstract\");\nconst ConnectionManager = require(\"./connection-manager\");\nconst Query = require(\"./query\");\nconst QueryGenerator = require(\"./query-generator\");\nconst DataTypes = require(\"../../data-types\").sqlite;\nconst {\n  SQLiteQueryInterface\n} = require(\"./query-interface\");\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n    this.queryInterface = new SQLiteQueryInterface(sequelize, this.queryGenerator);\n  }\n}\nSqliteDialect.prototype.supports = _.merge(_.cloneDeep(AbstractDialect.prototype.supports), {\n  DEFAULT: false,\n  \"DEFAULT VALUES\": true,\n  \"UNION ALL\": false,\n  \"RIGHT JOIN\": false,\n  inserts: {\n    ignoreDuplicates: \" OR IGNORE\",\n    updateOnDuplicate: \" ON CONFLICT DO UPDATE SET\",\n    conflictFields: true,\n    onConflictWhere: true\n  },\n  index: {\n    using: false,\n    where: true,\n    functionBased: true\n  },\n  transactionOptions: {\n    type: true\n  },\n  constraints: {\n    addConstraint: false,\n    dropConstraint: false\n  },\n  groupedLimit: false,\n  JSON: true\n});\nSqliteDialect.prototype.defaultVersion = \"3.8.0\";\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = \"sqlite\";\nSqliteDialect.prototype.TICK_CHAR = \"`\";\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;","map":{"version":3,"names":["_","require","AbstractDialect","ConnectionManager","Query","QueryGenerator","DataTypes","sqlite","SQLiteQueryInterface","SqliteDialect","constructor","sequelize","connectionManager","queryGenerator","_dialect","queryInterface","prototype","supports","merge","cloneDeep","DEFAULT","inserts","ignoreDuplicates","updateOnDuplicate","conflictFields","onConflictWhere","index","using","where","functionBased","transactionOptions","type","constraints","addConstraint","dropConstraint","groupedLimit","JSON","defaultVersion","name","TICK_CHAR","TICK_CHAR_LEFT","TICK_CHAR_RIGHT","module","exports","default"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\sqlite\\index.js"],"sourcesContent":["'use strict';\n\nconst _ = require('lodash');\nconst AbstractDialect = require('../abstract');\nconst ConnectionManager = require('./connection-manager');\nconst Query = require('./query');\nconst QueryGenerator = require('./query-generator');\nconst DataTypes = require('../../data-types').sqlite;\nconst { SQLiteQueryInterface } = require('./query-interface');\n\nclass SqliteDialect extends AbstractDialect {\n  constructor(sequelize) {\n    super();\n    this.sequelize = sequelize;\n    this.connectionManager = new ConnectionManager(this, sequelize);\n    this.queryGenerator = new QueryGenerator({\n      _dialect: this,\n      sequelize\n    });\n\n    this.queryInterface = new SQLiteQueryInterface(\n      sequelize,\n      this.queryGenerator\n    );\n  }\n}\n\nSqliteDialect.prototype.supports = _.merge(\n  _.cloneDeep(AbstractDialect.prototype.supports),\n  {\n    DEFAULT: false,\n    'DEFAULT VALUES': true,\n    'UNION ALL': false,\n    'RIGHT JOIN': false,\n    inserts: {\n      ignoreDuplicates: ' OR IGNORE',\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\n      conflictFields: true,\n      onConflictWhere: true\n    },\n    index: {\n      using: false,\n      where: true,\n      functionBased: true\n    },\n    transactionOptions: {\n      type: true\n    },\n    constraints: {\n      addConstraint: false,\n      dropConstraint: false\n    },\n    groupedLimit: false,\n    JSON: true\n  }\n);\n\nSqliteDialect.prototype.defaultVersion = '3.8.0'; // minimum supported version\nSqliteDialect.prototype.Query = Query;\nSqliteDialect.prototype.DataTypes = DataTypes;\nSqliteDialect.prototype.name = 'sqlite';\nSqliteDialect.prototype.TICK_CHAR = '`';\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\n\nmodule.exports = SqliteDialect;\nmodule.exports.SqliteDialect = SqliteDialect;\nmodule.exports.default = SqliteDialect;\n"],"mappings":";;AAEA,MAAMA,CAAA,GAAIC,OAAA,CAAQ;AAClB,MAAMC,eAAA,GAAkBD,OAAA,CAAQ;AAChC,MAAME,iBAAA,GAAoBF,OAAA,CAAQ;AAClC,MAAMG,KAAA,GAAQH,OAAA,CAAQ;AACtB,MAAMI,cAAA,GAAiBJ,OAAA,CAAQ;AAC/B,MAAMK,SAAA,GAAYL,OAAA,CAAQ,oBAAoBM,MAAA;AAC9C,MAAM;EAAEC;AAAA,IAAyBP,OAAA,CAAQ;AAEzC,MAAAQ,aAAA,SAA4BP,eAAA,CAAgB;EAC1CQ,YAAYC,SAAA,EAAW;IACrB;IACA,KAAKA,SAAA,GAAYA,SAAA;IACjB,KAAKC,iBAAA,GAAoB,IAAIT,iBAAA,CAAkB,MAAMQ,SAAA;IACrD,KAAKE,cAAA,GAAiB,IAAIR,cAAA,CAAe;MACvCS,QAAA,EAAU;MACVH;IAAA;IAGF,KAAKI,cAAA,GAAiB,IAAIP,oBAAA,CACxBG,SAAA,EACA,KAAKE,cAAA;EAAA;AAAA;AAKXJ,aAAA,CAAcO,SAAA,CAAUC,QAAA,GAAWjB,CAAA,CAAEkB,KAAA,CACnClB,CAAA,CAAEmB,SAAA,CAAUjB,eAAA,CAAgBc,SAAA,CAAUC,QAAA,GACtC;EACEG,OAAA,EAAS;EACT,kBAAkB;EAClB,aAAa;EACb,cAAc;EACdC,OAAA,EAAS;IACPC,gBAAA,EAAkB;IAClBC,iBAAA,EAAmB;IACnBC,cAAA,EAAgB;IAChBC,eAAA,EAAiB;EAAA;EAEnBC,KAAA,EAAO;IACLC,KAAA,EAAO;IACPC,KAAA,EAAO;IACPC,aAAA,EAAe;EAAA;EAEjBC,kBAAA,EAAoB;IAClBC,IAAA,EAAM;EAAA;EAERC,WAAA,EAAa;IACXC,aAAA,EAAe;IACfC,cAAA,EAAgB;EAAA;EAElBC,YAAA,EAAc;EACdC,IAAA,EAAM;AAAA;AAIV3B,aAAA,CAAcO,SAAA,CAAUqB,cAAA,GAAiB;AACzC5B,aAAA,CAAcO,SAAA,CAAUZ,KAAA,GAAQA,KAAA;AAChCK,aAAA,CAAcO,SAAA,CAAUV,SAAA,GAAYA,SAAA;AACpCG,aAAA,CAAcO,SAAA,CAAUsB,IAAA,GAAO;AAC/B7B,aAAA,CAAcO,SAAA,CAAUuB,SAAA,GAAY;AACpC9B,aAAA,CAAcO,SAAA,CAAUwB,cAAA,GAAiB/B,aAAA,CAAcO,SAAA,CAAUuB,SAAA;AACjE9B,aAAA,CAAcO,SAAA,CAAUyB,eAAA,GAAkBhC,aAAA,CAAcO,SAAA,CAAUuB,SAAA;AAElEG,MAAA,CAAOC,OAAA,GAAUlC,aAAA;AACjBiC,MAAA,CAAOC,OAAA,CAAQlC,aAAA,GAAgBA,aAAA;AAC/BiC,MAAA,CAAOC,OAAA,CAAQC,OAAA,GAAUnC,aAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}