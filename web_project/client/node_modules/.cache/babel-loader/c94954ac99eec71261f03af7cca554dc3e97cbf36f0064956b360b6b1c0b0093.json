{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\n__export(exports, {\n  OracleConnectionManager: () => OracleConnectionManager\n});\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst SequelizeErrors = require(\"../../errors\");\nconst parserStore = require(\"../parserStore\")(\"oracle\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst semver = require(\"semver\");\nconst debug = logger.debugContext(\"connection:oracle\");\nconst DataTypes = require(\"../../data-types\").oracle;\nconst {\n  promisify\n} = require(\"util\");\nclass OracleConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 1521;\n    this.lib = this._loadDialectModule(\"oracledb\");\n    this.extendLib();\n    this.refreshTypeParser(DataTypes);\n  }\n  extendLib() {\n    if (this.sequelize.config && \"dialectOptions\" in this.sequelize.config) {\n      const dialectOptions = this.sequelize.config.dialectOptions;\n      if (dialectOptions && \"maxRows\" in dialectOptions) {\n        this.lib.maxRows = this.sequelize.config.dialectOptions.maxRows;\n      }\n      if (dialectOptions && \"fetchAsString\" in dialectOptions) {\n        this.lib.fetchAsString = this.sequelize.config.dialectOptions.fetchAsString;\n      } else {\n        this.lib.fetchAsString = [this.lib.CLOB];\n      }\n    }\n    this.lib.fetchAsBuffer = [this.lib.BLOB];\n  }\n  buildConnectString(config) {\n    if (!config.host || config.host.length === 0) return config.database;\n    let connectString = config.host;\n    if (config.port && config.port > 0) {\n      connectString += `:${config.port}`;\n    } else {\n      connectString += \":1521\";\n    }\n    if (config.database && config.database.length > 0) {\n      connectString += `/${config.database}`;\n    }\n    return connectString;\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async connect(config) {\n    const connectionConfig = __spreadValues({\n      user: config.username,\n      password: config.password,\n      externalAuth: config.externalAuth,\n      stmtCacheSize: 0,\n      connectString: this.buildConnectString(config)\n    }, config.dialectOptions);\n    try {\n      const connection = await this.lib.getConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.oracleServerVersionString).version;\n      debug(\"connection acquired\");\n      connection.on(\"error\", error => {\n        switch (error.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(connection);\n        }\n      });\n      return connection;\n    } catch (err) {\n      let errorCode = err.message.split(\":\");\n      errorCode = errorCode[0];\n      switch (errorCode) {\n        case \"ORA-12560\":\n        case \"ORA-12154\":\n        case \"ORA-12505\":\n        case \"ORA-12514\":\n        case \"NJS-511\":\n        case \"NJS-516\":\n        case \"NJS-517\":\n        case \"NJS-520\":\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case \"ORA-28000\":\n        case \"ORA-28040\":\n        case \"ORA-01017\":\n        case \"NJS-506\":\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case \"ORA-12541\":\n        case \"NJS-503\":\n        case \"NJS-508\":\n        case \"NJS-507\":\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case \"NJS-512\":\n        case \"NJS-515\":\n        case \"NJS-518\":\n        case \"NJS-519\":\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        case \"ORA-12170\":\n        case \"NJS-510\":\n          throw new SequelizeErrors.ConnectionTimedOutError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (!connection.isHealthy()) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n    return await promisify(callback => connection.close(callback))();\n  }\n  validate(connection) {\n    return connection && connection.isHealthy();\n  }\n}","map":{"version":3,"names":["__export","exports","OracleConnectionManager","AbstractConnectionManager","require","SequelizeErrors","parserStore","logger","semver","debug","debugContext","DataTypes","oracle","promisify","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","extendLib","refreshTypeParser","dialectOptions","maxRows","fetchAsString","CLOB","fetchAsBuffer","BLOB","buildConnectString","host","length","database","connectString","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","connect","connectionConfig","__spreadValues","user","username","password","externalAuth","stmtCacheSize","connection","getConnection","options","databaseVersion","coerce","oracleServerVersionString","version","on","error","code","pool","destroy","err","errorCode","message","split","ConnectionRefusedError","AccessDeniedError","HostNotReachableError","InvalidConnectionError","ConnectionTimedOutError","ConnectionError","disconnect","isHealthy","callback","close","validate"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\oracle\\connection-manager.js"],"sourcesContent":["// Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved\n\n'use strict';\n\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst parserStore = require('../parserStore')('oracle');\nconst { logger } = require('../../utils/logger');\nconst semver = require('semver');\nconst debug = logger.debugContext('connection:oracle');\nconst DataTypes = require('../../data-types').oracle;\nconst { promisify } = require('util');\n/**\n * Oracle Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle Oracle specific connections\n * Use github.com/oracle/node-oracledb to connect with Oracle server\n *\n * @private\n */\nexport class OracleConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    super(dialect, sequelize);\n\n    this.sequelize = sequelize;\n    this.sequelize.config.port = this.sequelize.config.port || 1521;\n    this.lib = this._loadDialectModule('oracledb');\n    this.extendLib();\n    this.refreshTypeParser(DataTypes);\n  }\n\n  /**\n   * Method for initializing the lib\n   *\n   */\n  extendLib() {\n    if (this.sequelize.config && 'dialectOptions' in this.sequelize.config) {\n      const dialectOptions = this.sequelize.config.dialectOptions;\n      if (dialectOptions && 'maxRows' in dialectOptions) {\n        this.lib.maxRows = this.sequelize.config.dialectOptions.maxRows;\n      }\n      if (dialectOptions && 'fetchAsString' in dialectOptions) {\n        this.lib.fetchAsString = this.sequelize.config.dialectOptions.fetchAsString;\n      } else {\n        this.lib.fetchAsString = [this.lib.CLOB];\n      }\n    }\n    // Retrieve BLOB always as Buffer.\n    this.lib.fetchAsBuffer = [this.lib.BLOB];\n  }\n\n  /**\n   * Method for checking the config object passed and generate the full database if not fully passed\n   * With dbName, host and port, it generates a string like this : 'host:port/dbname'\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  buildConnectString(config) {\n    if (!config.host || config.host.length === 0)\n      return config.database;\n    let connectString = config.host;\n    if (config.port && config.port > 0) {\n      connectString += `:${config.port}`;\n    } else {\n      connectString += ':1521';\n    }\n    if (config.database && config.database.length > 0) {\n      connectString += `/${config.database}`;\n    }\n    return connectString;\n  }\n\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with Oracle database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    const connectionConfig = {\n      user: config.username,\n      password: config.password,\n      externalAuth: config.externalAuth,\n      stmtCacheSize: 0,\n      connectString: this.buildConnectString(config),\n      ...config.dialectOptions\n    };\n\n    try {\n      const connection = await this.lib.getConnection(connectionConfig);\n      // Setting the sequelize database version to Oracle DB server version to remove the roundtrip for DB version query\n      this.sequelize.options.databaseVersion = semver.coerce(connection.oracleServerVersionString).version;\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n\n      return connection;\n    } catch (err) {\n      // We split to get the error number; it comes as ORA-XXXXX:\n      let errorCode = err.message.split(':');\n      errorCode = errorCode[0];\n\n      switch (errorCode) {\n        case 'ORA-12560': // ORA-12560: TNS: Protocol Adapter Error\n        case 'ORA-12154': // ORA-12154: TNS: Could not resolve the connect identifier specified\n        case 'ORA-12505': // ORA-12505: TNS: Listener does not currently know of SID given in connect descriptor\n        case 'ORA-12514': // ORA-12514: TNS: Listener does not currently know of service requested in connect descriptor\n        case 'NJS-511': // NJS-511: connection refused\n        case 'NJS-516': // NJS-516: No Config Dir\n        case 'NJS-517': // NJS-517: TNS Entry not found\n        case 'NJS-520': // NJS-520: TNS Names File missing  \n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ORA-28000': // ORA-28000: Account locked\n        case 'ORA-28040': // ORA-28040: No matching authentication protocol\n        case 'ORA-01017': // ORA-01017: invalid username/password; logon denied\n        case 'NJS-506': // NJS-506: TLS Auth Failure\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ORA-12541': // ORA-12541: TNS: No listener\n        case 'NJS-503': // NJS-503: Connection Incomplete\n        case 'NJS-508': // NJS-508: TLS HOST MATCH Failure\n        case 'NJS-507': // NJS-507: TLS DN MATCH Failure\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'NJS-512': // NJS-512: Invalid Connect String Parameters\n        case 'NJS-515': // NJS-515: Invalid EZCONNECT Syntax\n        case 'NJS-518': // NJS-518: Invald ServiceName\n        case 'NJS-519': // NJS-519: Invald SID\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        case 'ORA-12170': // ORA-12170: TNS: Connect Timeout occurred\n        case 'NJS-510': // NJS-510: Connect Timeout occurred\n\n          throw new SequelizeErrors.ConnectionTimedOutError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    if (!connection.isHealthy()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n\n    return await promisify(callback => connection.close(callback))();\n  }\n\n  /**\n   * Checking if the connection object is valid and the connection is healthy\n   *\n   * @param {object} connection\n   * @private\n   */\n  validate(connection) {\n    return connection && connection.isHealthy();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}