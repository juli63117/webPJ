{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nconst semver = require(\"semver\");\nconst AbstractConnectionManager = require(\"../abstract/connection-manager\");\nconst SequelizeErrors = require(\"../../errors\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst DataTypes = require(\"../../data-types\").mariadb;\nconst momentTz = require(\"moment-timezone\");\nconst debug = logger.debugContext(\"connection:mariadb\");\nconst parserStore = require(\"../parserStore\")(\"mariadb\");\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule(\"mariadb\");\n    this.refreshTypeParser(DataTypes);\n  }\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n  async connect(config) {\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format(\"Z\") : tzOffset;\n    const connectionConfig = __spreadValues({\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      password: config.password,\n      database: config.database,\n      timezone: tzOffset,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      foundRows: false\n    }, config.dialectOptions);\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(connectionConfig.initSql)) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n    try {\n      const connection = await this.lib.createConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion()).version;\n      debug(\"connection acquired\");\n      connection.on(\"error\", error => {\n        switch (error.code) {\n          case \"ESOCKET\":\n          case \"ECONNRESET\":\n          case \"EPIPE\":\n          case \"PROTOCOL_CONNECTION_LOST\":\n            this.pool.destroy(connection);\n        }\n      });\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case \"ECONNREFUSED\":\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case \"ER_ACCESS_DENIED_ERROR\":\n        case \"ER_ACCESS_DENIED_NO_PASSWORD_ERROR\":\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case \"ENOTFOUND\":\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case \"EHOSTUNREACH\":\n        case \"ENETUNREACH\":\n        case \"EADDRNOTAVAIL\":\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case \"EINVAL\":\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n  async disconnect(connection) {\n    if (!connection.isValid()) {\n      debug(\"connection tried to disconnect but was already at CLOSED state\");\n      return;\n    }\n    return await connection.end();\n  }\n  validate(connection) {\n    return connection && connection.isValid();\n  }\n}\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;","map":{"version":3,"names":["semver","require","AbstractConnectionManager","SequelizeErrors","logger","DataTypes","mariadb","momentTz","debug","debugContext","parserStore","ConnectionManager","constructor","dialect","sequelize","config","port","lib","_loadDialectModule","refreshTypeParser","_typecast","field","next","get","type","options","_refreshTypeParser","dataType","refresh","_clearTypeParser","clear","connect","tzOffset","timezone","test","tz","format","connectionConfig","__spreadValues","host","user","username","password","database","typeCast","bind","bigNumberStrings","supportBigNumbers","foundRows","dialectOptions","keepDefaultTimezone","initSql","Array","isArray","push","connection","createConnection","databaseVersion","coerce","serverVersion","version","on","error","code","pool","destroy","err","ConnectionRefusedError","AccessDeniedError","HostNotFoundError","HostNotReachableError","InvalidConnectionError","ConnectionError","disconnect","isValid","end","validate","module","exports","default"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\mariadb\\connection-manager.js"],"sourcesContent":["'use strict';\n\nconst semver = require('semver');\nconst AbstractConnectionManager = require('../abstract/connection-manager');\nconst SequelizeErrors = require('../../errors');\nconst { logger } = require('../../utils/logger');\nconst DataTypes = require('../../data-types').mariadb;\nconst momentTz = require('moment-timezone');\nconst debug = logger.debugContext('connection:mariadb');\nconst parserStore = require('../parserStore')('mariadb');\n\n/**\n * MariaDB Connection Manager\n *\n * Get connections, validate and disconnect them.\n * AbstractConnectionManager pooling use it to handle MariaDB specific connections\n * Use https://github.com/MariaDB/mariadb-connector-nodejs to connect with MariaDB server\n *\n * @private\n */\nclass ConnectionManager extends AbstractConnectionManager {\n  constructor(dialect, sequelize) {\n    sequelize.config.port = sequelize.config.port || 3306;\n    super(dialect, sequelize);\n    this.lib = this._loadDialectModule('mariadb');\n    this.refreshTypeParser(DataTypes);\n  }\n\n  static _typecast(field, next) {\n    if (parserStore.get(field.type)) {\n      return parserStore.get(field.type)(field, this.sequelize.options, next);\n    }\n    return next();\n  }\n\n  _refreshTypeParser(dataType) {\n    parserStore.refresh(dataType);\n  }\n\n  _clearTypeParser() {\n    parserStore.clear();\n  }\n\n  /**\n   * Connect with MariaDB database based on config, Handle any errors in connection\n   * Set the pool handlers on connection.error\n   * Also set proper timezone once connection is connected.\n   *\n   * @param {object} config\n   * @returns {Promise<Connection>}\n   * @private\n   */\n  async connect(config) {\n    // Named timezone is not supported in mariadb, convert to offset\n    let tzOffset = this.sequelize.options.timezone;\n    tzOffset = /\\//.test(tzOffset) ? momentTz.tz(tzOffset).format('Z')\n      : tzOffset;\n\n    const connectionConfig = {\n      host: config.host,\n      port: config.port,\n      user: config.username,\n      password: config.password,\n      database: config.database,\n      timezone: tzOffset,\n      typeCast: ConnectionManager._typecast.bind(this),\n      bigNumberStrings: false,\n      supportBigNumbers: true,\n      foundRows: false,\n      ...config.dialectOptions\n    };\n\n    if (!this.sequelize.config.keepDefaultTimezone) {\n      // set timezone for this connection\n      if (connectionConfig.initSql) {\n        if (!Array.isArray(\n          connectionConfig.initSql)) {\n          connectionConfig.initSql = [connectionConfig.initSql];\n        }\n        connectionConfig.initSql.push(`SET time_zone = '${tzOffset}'`);\n      } else {\n        connectionConfig.initSql = `SET time_zone = '${tzOffset}'`;\n      }\n    }\n\n    try {\n      const connection = await this.lib.createConnection(connectionConfig);\n      this.sequelize.options.databaseVersion = semver.coerce(connection.serverVersion()).version;\n\n      debug('connection acquired');\n      connection.on('error', error => {\n        switch (error.code) {\n          case 'ESOCKET':\n          case 'ECONNRESET':\n          case 'EPIPE':\n          case 'PROTOCOL_CONNECTION_LOST':\n            this.pool.destroy(connection);\n        }\n      });\n      return connection;\n    } catch (err) {\n      switch (err.code) {\n        case 'ECONNREFUSED':\n          throw new SequelizeErrors.ConnectionRefusedError(err);\n        case 'ER_ACCESS_DENIED_ERROR':\n        case 'ER_ACCESS_DENIED_NO_PASSWORD_ERROR':\n          throw new SequelizeErrors.AccessDeniedError(err);\n        case 'ENOTFOUND':\n          throw new SequelizeErrors.HostNotFoundError(err);\n        case 'EHOSTUNREACH':\n        case 'ENETUNREACH':\n        case 'EADDRNOTAVAIL':\n          throw new SequelizeErrors.HostNotReachableError(err);\n        case 'EINVAL':\n          throw new SequelizeErrors.InvalidConnectionError(err);\n        default:\n          throw new SequelizeErrors.ConnectionError(err);\n      }\n    }\n  }\n\n  async disconnect(connection) {\n    // Don't disconnect connections with CLOSED state\n    if (!connection.isValid()) {\n      debug('connection tried to disconnect but was already at CLOSED state');\n      return;\n    }\n    return await connection.end();\n  }\n\n  validate(connection) {\n    return connection && connection.isValid();\n  }\n}\n\nmodule.exports = ConnectionManager;\nmodule.exports.ConnectionManager = ConnectionManager;\nmodule.exports.default = ConnectionManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}