{"ast":null,"code":"\"use strict\";\n\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst Utils = require(\"./../utils\");\nconst Helpers = require(\"./helpers\");\nconst _ = require(\"lodash\");\nconst Association = require(\"./base\");\nconst Op = require(\"../operators\");\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n    this.associationType = \"HasOne\";\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize([Utils.singularize(this.options.as || this.source.name), this.source.primaryKeyAttribute].join(\"_\"));\n    }\n    if (this.options.sourceKey && !this.source.rawAttributes[this.options.sourceKey]) {\n      throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    }\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n    const singular = _.upperFirst(this.options.name.singular);\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: __spreadValues({\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true\n      }, this.foreignKeyAttribute)\n    };\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? \"SET NULL\" : \"CASCADE\");\n      this.options.onUpdate = this.options.onUpdate || \"CASCADE\";\n    }\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n    this.target.refreshAttributes();\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    Helpers.checkNamingCollision(this);\n    return this;\n  }\n  mixin(obj) {\n    const methods = [\"get\", \"set\", \"create\"];\n    Helpers.mixinMethods(this, obj, methods);\n  }\n  async get(instances, options) {\n    const where = {};\n    let Target = this.target;\n    let instance;\n    options = Utils.cloneDeep(options);\n    if (Object.prototype.hasOwnProperty.call(options, \"scope\")) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(options, \"schema\")) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = void 0;\n    }\n    if (instances) {\n      where[this.foreignKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.sourceKey))\n      };\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey);\n    }\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n    options.where = options.where ? {\n      [Op.and]: [where, options.where]\n    } : where;\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.sourceKey, {\n          raw: true\n        })] = null;\n      }\n      for (const _instance of results) {\n        result[_instance.get(this.foreignKey, {\n          raw: true\n        })] = _instance;\n      }\n      return result;\n    }\n    return Target.findOne(options);\n  }\n  async set(sourceInstance, associatedInstance, options) {\n    options = __spreadProps(__spreadValues({}, options), {\n      scope: false\n    });\n    const oldInstance = await sourceInstance[this.accessors.get](options);\n    const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every(attribute => oldInstance.get(attribute, {\n      raw: true\n    }) === (associatedInstance.get ? associatedInstance.get(attribute, {\n      raw: true\n    }) : associatedInstance));\n    if (oldInstance && !alreadyAssociated) {\n      oldInstance[this.foreignKey] = null;\n      await oldInstance.save(__spreadProps(__spreadValues({}, options), {\n        fields: [this.foreignKey],\n        allowNull: [this.foreignKey],\n        association: true\n      }));\n    }\n    if (associatedInstance && !alreadyAssociated) {\n      if (!(associatedInstance instanceof this.target)) {\n        const tmpInstance = {};\n        tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n        associatedInstance = this.target.build(tmpInstance, {\n          isNewRecord: false\n        });\n      }\n      Object.assign(associatedInstance, this.scope);\n      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n      return associatedInstance.save(options);\n    }\n    return null;\n  }\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n    return await this.target.create(values, options);\n  }\n  verifyAssociationAlias(alias) {\n    if (typeof alias === \"string\") {\n      return this.as === alias;\n    }\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n    return !this.isAliased;\n  }\n}\nmodule.exports = HasOne;","map":{"version":3,"names":["Utils","require","Helpers","_","Association","Op","HasOne","constructor","source","target","options","associationType","isSingleAssociation","foreignKeyAttribute","as","isAliased","name","singular","isObject","foreignKey","fieldName","camelize","singularize","primaryKeyAttribute","join","sourceKey","rawAttributes","Error","sourceKeyAttribute","sourceKeyField","field","sourceKeyIsPrimary","associationAccessor","useHooks","identifierField","upperFirst","accessors","get","set","create","_injectAttributes","newAttributes","__spreadValues","type","keyType","allowNull","constraints","onDelete","onUpdate","addForeignKeyConstraints","mergeDefaults","refreshAttributes","checkNamingCollision","mixin","obj","methods","mixinMethods","instances","where","Target","instance","cloneDeep","Object","prototype","hasOwnProperty","call","scope","unscoped","schema","schemaDelimiter","Array","isArray","in","map","_instance","assign","and","results","findAll","result","raw","findOne","sourceInstance","associatedInstance","__spreadProps","oldInstance","alreadyAssociated","primaryKeyAttributes","every","attribute","save","fields","association","tmpInstance","build","isNewRecord","values","keys","push","verifyAssociationAlias","alias","module","exports"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\associations\\has-one.js"],"sourcesContent":["'use strict';\n\nconst Utils = require('./../utils');\nconst Helpers = require('./helpers');\nconst _ = require('lodash');\nconst Association = require('./base');\nconst Op = require('../operators');\n\n/**\n * One-to-one association\n *\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasOne(Project)` the getter will be `user.getProject()`.\n * This is almost the same as `belongsTo` with one exception - The foreign key will be defined on the target model.\n *\n * @see {@link Model.hasOne}\n */\nclass HasOne extends Association {\n  constructor(source, target, options) {\n    super(source, target, options);\n\n    this.associationType = 'HasOne';\n    this.isSingleAssociation = true;\n    this.foreignKeyAttribute = {};\n\n    if (this.as) {\n      this.isAliased = true;\n      this.options.name = {\n        singular: this.as\n      };\n    } else {\n      this.as = this.target.options.name.singular;\n      this.options.name = this.target.options.name;\n    }\n\n    if (_.isObject(this.options.foreignKey)) {\n      this.foreignKeyAttribute = this.options.foreignKey;\n      this.foreignKey = this.foreignKeyAttribute.name || this.foreignKeyAttribute.fieldName;\n    } else if (this.options.foreignKey) {\n      this.foreignKey = this.options.foreignKey;\n    }\n\n    if (!this.foreignKey) {\n      this.foreignKey = Utils.camelize(\n        [\n          Utils.singularize(this.options.as || this.source.name),\n          this.source.primaryKeyAttribute\n        ].join('_')\n      );\n    }\n\n    if (\n      this.options.sourceKey\n      && !this.source.rawAttributes[this.options.sourceKey]\n    ) {\n      throw new Error(`Unknown attribute \"${this.options.sourceKey}\" passed as sourceKey, define this attribute on model \"${this.source.name}\" first`);\n    }\n\n    this.sourceKey = this.sourceKeyAttribute = this.options.sourceKey || this.source.primaryKeyAttribute;\n    this.sourceKeyField = this.source.rawAttributes[this.sourceKey].field || this.sourceKey;\n    this.sourceKeyIsPrimary = this.sourceKey === this.source.primaryKeyAttribute;\n\n    this.associationAccessor = this.as;\n    this.options.useHooks = options.useHooks;\n\n    if (this.target.rawAttributes[this.foreignKey]) {\n      this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n    }\n\n    // Get singular name, trying to uppercase the first letter, unless the model forbids it\n    const singular = _.upperFirst(this.options.name.singular);\n\n    this.accessors = {\n      get: `get${singular}`,\n      set: `set${singular}`,\n      create: `create${singular}`\n    };\n  }\n\n  // the id is in the target table\n  _injectAttributes() {\n    const newAttributes = {\n      [this.foreignKey]: {\n        type: this.options.keyType || this.source.rawAttributes[this.sourceKey].type,\n        allowNull: true,\n        ...this.foreignKeyAttribute\n      }\n    };\n\n    if (this.options.constraints !== false) {\n      const target = this.target.rawAttributes[this.foreignKey] || newAttributes[this.foreignKey];\n      this.options.onDelete = this.options.onDelete || (target.allowNull ? 'SET NULL' : 'CASCADE');\n      this.options.onUpdate = this.options.onUpdate || 'CASCADE';\n    }\n\n    Helpers.addForeignKeyConstraints(newAttributes[this.foreignKey], this.source, this.target, this.options, this.sourceKeyField);\n    Utils.mergeDefaults(this.target.rawAttributes, newAttributes);\n\n    this.target.refreshAttributes();\n\n    this.identifierField = this.target.rawAttributes[this.foreignKey].field || this.foreignKey;\n\n    Helpers.checkNamingCollision(this);\n\n    return this;\n  }\n\n  mixin(obj) {\n    const methods = ['get', 'set', 'create'];\n\n    Helpers.mixinMethods(this, obj, methods);\n  }\n\n  /**\n   * Get the associated instance.\n   *\n   * @param {Model|Array<Model>} instances source instances\n   * @param {object}         [options] find options\n   * @param {string|boolean} [options.scope] Apply a scope on the related model, or remove its default scope by passing false\n   * @param {string} [options.schema] Apply a schema on the related model\n   *\n   * @see\n   * {@link Model.findOne} for a full explanation of options\n   *\n   * @returns {Promise<Model>}\n   */\n  async get(instances, options) {\n    const where = {};\n\n    let Target = this.target;\n    let instance;\n\n    options = Utils.cloneDeep(options);\n\n    if (Object.prototype.hasOwnProperty.call(options, 'scope')) {\n      if (!options.scope) {\n        Target = Target.unscoped();\n      } else {\n        Target = Target.scope(options.scope);\n      }\n    }\n\n    if (Object.prototype.hasOwnProperty.call(options, 'schema')) {\n      Target = Target.schema(options.schema, options.schemaDelimiter);\n    }\n\n    if (!Array.isArray(instances)) {\n      instance = instances;\n      instances = undefined;\n    }\n\n    if (instances) {\n      where[this.foreignKey] = {\n        [Op.in]: instances.map(_instance => _instance.get(this.sourceKey))\n      };\n    } else {\n      where[this.foreignKey] = instance.get(this.sourceKey);\n    }\n\n    if (this.scope) {\n      Object.assign(where, this.scope);\n    }\n\n    options.where = options.where ?\n      { [Op.and]: [where, options.where] } :\n      where;\n\n    if (instances) {\n      const results = await Target.findAll(options);\n      const result = {};\n      for (const _instance of instances) {\n        result[_instance.get(this.sourceKey, { raw: true })] = null;\n      }\n\n      for (const _instance of results) {\n        result[_instance.get(this.foreignKey, { raw: true })] = _instance;\n      }\n\n      return result;\n    }\n\n    return Target.findOne(options);\n  }\n\n  /**\n   * Set the associated model.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {?Model|string|number} [associatedInstance] An persisted instance or the primary key of an instance to associate with this. Pass `null` or `undefined` to remove the association.\n   * @param {object} [options] Options passed to getAssociation and `target.save`\n   *\n   * @returns {Promise}\n   */\n  async set(sourceInstance, associatedInstance, options) {\n    options = { ...options, scope: false };\n\n    const oldInstance = await sourceInstance[this.accessors.get](options);\n    // TODO Use equals method once #5605 is resolved\n    const alreadyAssociated = oldInstance && associatedInstance && this.target.primaryKeyAttributes.every(attribute =>\n      oldInstance.get(attribute, { raw: true }) === (associatedInstance.get ? associatedInstance.get(attribute, { raw: true }) : associatedInstance)\n    );\n\n    if (oldInstance && !alreadyAssociated) {\n      oldInstance[this.foreignKey] = null;\n\n      await oldInstance.save({\n        ...options,\n        fields: [this.foreignKey],\n        allowNull: [this.foreignKey],\n        association: true\n      });\n    }\n    if (associatedInstance && !alreadyAssociated) {\n      if (!(associatedInstance instanceof this.target)) {\n        const tmpInstance = {};\n        tmpInstance[this.target.primaryKeyAttribute] = associatedInstance;\n        associatedInstance = this.target.build(tmpInstance, {\n          isNewRecord: false\n        });\n      }\n\n      Object.assign(associatedInstance, this.scope);\n      associatedInstance.set(this.foreignKey, sourceInstance.get(this.sourceKeyAttribute));\n\n      return associatedInstance.save(options);\n    }\n\n    return null;\n  }\n\n  /**\n   * Create a new instance of the associated model and associate it with this.\n   *\n   * @param {Model} sourceInstance the source instance\n   * @param {object} [values={}] values to create associated model instance with\n   * @param {object} [options] Options passed to `target.create` and setAssociation.\n   *\n   * @see\n   * {@link Model#create} for a full explanation of options\n   *\n   * @returns {Promise<Model>} The created target model\n   */\n  async create(sourceInstance, values, options) {\n    values = values || {};\n    options = options || {};\n\n    if (this.scope) {\n      for (const attribute of Object.keys(this.scope)) {\n        values[attribute] = this.scope[attribute];\n        if (options.fields) {\n          options.fields.push(attribute);\n        }\n      }\n    }\n\n    values[this.foreignKey] = sourceInstance.get(this.sourceKeyAttribute);\n    if (options.fields) {\n      options.fields.push(this.foreignKey);\n    }\n\n    return await this.target.create(values, options);\n  }\n\n  verifyAssociationAlias(alias) {\n    if (typeof alias === 'string') {\n      return this.as === alias;\n    }\n\n    if (alias && alias.singular) {\n      return this.as === alias.singular;\n    }\n\n    return !this.isAliased;\n  }\n}\n\nmodule.exports = HasOne;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}