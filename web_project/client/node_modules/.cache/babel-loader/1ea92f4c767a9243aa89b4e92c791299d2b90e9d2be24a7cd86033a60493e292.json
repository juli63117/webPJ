{"ast":null,"code":"\"use strict\";\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(void 0, \"https://www.sqlite.org/datatype3.html\");\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = void 0;\n      dataType._zerofill = void 0;\n    }\n  }\n  BaseTypes.DATE.types.sqlite = [\"DATETIME\"];\n  BaseTypes.STRING.types.sqlite = [\"VARCHAR\", \"VARCHAR BINARY\"];\n  BaseTypes.CHAR.types.sqlite = [\"CHAR\", \"CHAR BINARY\"];\n  BaseTypes.TEXT.types.sqlite = [\"TEXT\"];\n  BaseTypes.TINYINT.types.sqlite = [\"TINYINT\"];\n  BaseTypes.SMALLINT.types.sqlite = [\"SMALLINT\"];\n  BaseTypes.MEDIUMINT.types.sqlite = [\"MEDIUMINT\"];\n  BaseTypes.INTEGER.types.sqlite = [\"INTEGER\"];\n  BaseTypes.BIGINT.types.sqlite = [\"BIGINT\"];\n  BaseTypes.FLOAT.types.sqlite = [\"FLOAT\"];\n  BaseTypes.TIME.types.sqlite = [\"TIME\"];\n  BaseTypes.DATEONLY.types.sqlite = [\"DATE\"];\n  BaseTypes.BOOLEAN.types.sqlite = [\"TINYINT\"];\n  BaseTypes.BLOB.types.sqlite = [\"TINYBLOB\", \"BLOB\", \"LONGBLOB\"];\n  BaseTypes.DECIMAL.types.sqlite = [\"DECIMAL\"];\n  BaseTypes.UUID.types.sqlite = [\"UUID\"];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = [\"REAL\"];\n  BaseTypes.DOUBLE.types.sqlite = [\"DOUBLE PRECISION\"];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = [\"JSON\", \"JSONB\"];\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes(\"+\")) {\n        return new Date(date + options.timezone);\n      }\n      return new Date(date);\n    }\n  }\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn(\"SQLite does not support TEXT with options. Plain `TEXT` will be used instead.\");\n        this._length = void 0;\n      }\n      return \"TEXT\";\n    }\n  }\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return \"TEXT COLLATE NOCASE\";\n    }\n  }\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += \" UNSIGNED\";\n      }\n      if (this._zerofill) {\n        result += \" ZEROFILL\";\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === \"number\") {\n          result += `,${this._decimals}`;\n        }\n        result += \")\";\n      }\n      return result;\n    }\n  }\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n  class FLOAT extends BaseTypes.FLOAT {}\n  class DOUBLE extends BaseTypes.DOUBLE {}\n  class REAL extends BaseTypes.REAL {}\n  function parseFloating(value) {\n    if (typeof value !== \"string\") {\n      return value;\n    }\n    if (value === \"NaN\") {\n      return NaN;\n    }\n    if (value === \"Infinity\") {\n      return Infinity;\n    }\n    if (value === \"-Infinity\") {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return \"TEXT\";\n    }\n  }\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    \"DOUBLE PRECISION\": DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};","map":{"version":3,"names":["module","exports","BaseTypes","warn","ABSTRACT","bind","removeUnsupportedIntegerOptions","dataType","_zerofill","_unsigned","key","DATE","types","sqlite","STRING","CHAR","TEXT","TINYINT","SMALLINT","MEDIUMINT","INTEGER","BIGINT","FLOAT","TIME","DATEONLY","BOOLEAN","BLOB","DECIMAL","UUID","ENUM","REAL","DOUBLE","GEOMETRY","JSON","JSONTYPE","parse","data","date","options","includes","Date","timezone","toSql","_binary","_length","CITEXT","NUMBER","result","_decimals","constructor","length","parseFloating","value","NaN","Infinity","floating","num","prototype"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\sqlite\\data-types.js"],"sourcesContent":["'use strict';\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\n\n  /**\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._zerofill || dataType._unsigned) {\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * @see https://sqlite.org/datatype3.html\n   */\n\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\n  BaseTypes.TIME.types.sqlite = ['TIME'];\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\n  BaseTypes.UUID.types.sqlite = ['UUID'];\n  BaseTypes.ENUM.types.sqlite = false;\n  BaseTypes.REAL.types.sqlite = ['REAL'];\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\n  BaseTypes.GEOMETRY.types.sqlite = false;\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\n\n  class JSONTYPE extends BaseTypes.JSON {\n    static parse(data) {\n      return JSON.parse(data);\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    static parse(date, options) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        return new Date(date + options.timezone);\n      }\n      return new Date(date); // We already have a timezone stored in the string\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `VARCHAR BINARY(${this._length})`;\n      }\n      return super.toSql(this);\n    }\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      if (this._length) {\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\n        this._length = undefined;\n      }\n      return 'TEXT';\n    }\n  }\n\n  class CITEXT extends BaseTypes.CITEXT {\n    toSql() {\n      return 'TEXT COLLATE NOCASE';\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CHAR BINARY(${this._length})`;\n      }\n      return super.toSql();\n    }\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._unsigned) {\n        result += ' UNSIGNED';\n      }\n      if (this._zerofill) {\n        result += ' ZEROFILL';\n      }\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n        result += ')';\n      }\n      return result;\n    }\n  }\n\n  class TINYINT extends BaseTypes.TINYINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n  }\n\n  class DOUBLE extends BaseTypes.DOUBLE {\n  }\n\n  class REAL extends BaseTypes.REAL { }\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n    if (value === 'NaN') {\n      return NaN;\n    }\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'TEXT';\n    }\n  }\n\n  return {\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    REAL,\n    'DOUBLE PRECISION': DOUBLE,\n    TINYINT,\n    SMALLINT,\n    MEDIUMINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    ENUM,\n    JSON: JSONTYPE,\n    CITEXT\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}