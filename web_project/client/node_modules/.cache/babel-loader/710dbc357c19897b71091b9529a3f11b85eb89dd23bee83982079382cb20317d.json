{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __markAsModule = target => __defProp(target, \"__esModule\", {\n  value: true\n});\nvar __export = (target, all) => {\n  __markAsModule(target);\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __reExport = (target, module2, desc) => {\n  if (module2 && typeof module2 === \"object\" || typeof module2 === \"function\") {\n    for (let key of __getOwnPropNames(module2)) if (!__hasOwnProp.call(target, key) && key !== \"default\") __defProp(target, key, {\n      get: () => module2[key],\n      enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable\n    });\n  }\n  return target;\n};\nvar __toModule = module2 => {\n  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, \"default\", module2 && module2.__esModule && \"default\" in module2 ? {\n    get: () => module2.default,\n    enumerable: true\n  } : {\n    value: module2,\n    enumerable: true\n  })), module2);\n};\n__export(exports, {\n  default: () => host_not_found_error_default\n});\nvar import_connection_error = __toModule(require(\"../connection-error\"));\nclass HostNotFoundError extends import_connection_error.default {\n  constructor(parent) {\n    super(parent);\n    this.name = \"SequelizeHostNotFoundError\";\n  }\n}\nvar host_not_found_error_default = HostNotFoundError;","map":{"version":3,"names":["__export","exports","default","host_not_found_error_default","import_connection_error","__toModule","require","HostNotFoundError","constructor","parent","name"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\errors\\connection\\host-not-found-error.ts"],"sourcesContent":["import ConnectionError from '../connection-error';\n\n/**\n * Thrown when a connection to a database has a hostname that was not found\n */\nclass HostNotFoundError extends ConnectionError {\n  constructor(parent: Error) {\n    super(parent);\n    this.name = 'SequelizeHostNotFoundError';\n  }\n}\n\nexport default HostNotFoundError;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,QAAA,CAAAC,OAAA;EAAAC,OAAA,EAAAA,CAAA,KAAAC;AAAA;AAAA,IAAAC,uBAAA,GAA4BC,UAAA,CAAAC,OAAA;AAK5B,MAAAC,iBAAA,SAAgCH,uBAAA,CAAAF,OAAA,CAAgB;EAC9CM,YAAYC,MAAA,EAAe;IACzB,MAAMA,MAAA;IACN,KAAKC,IAAA,GAAO;EAAA;AAAA;AAIhB,IAAOP,4BAAA,GAAQI,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}