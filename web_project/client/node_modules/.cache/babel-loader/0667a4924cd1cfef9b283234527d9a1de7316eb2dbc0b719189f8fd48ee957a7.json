{"ast":null,"code":"\"use strict\";\n\nconst AbstractQuery = require(\"../abstract/query\");\nconst QueryTypes = require(\"../../query-types\");\nconst sequelizeErrors = require(\"../../errors\");\nconst _ = require(\"lodash\");\nconst {\n  logger\n} = require(\"../../utils/logger\");\nconst debug = logger.debugContext(\"sql:pg\");\nclass Query extends AbstractQuery {\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === \"string\" ? value.replace(/\\0/g, \"\\\\0\") : value;\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, {\n        skipValueReplace: true\n      })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values2) => {\n        if (seen[key] !== void 0) {\n          return seen[key];\n        }\n        if (values2[key] !== void 0) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values2[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return void 0;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n  async run(sql, parameters) {\n    const {\n      connection\n    } = this;\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases).sort((a, b) => b[1].length - a[1].length).forEach(([alias, original]) => {\n        const reg = new RegExp(_.escapeRegExp(original), \"g\");\n        sql = sql.replace(reg, alias);\n      });\n    }\n    this.sql = sql;\n    const query = parameters && parameters.length ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result))) : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n    const complete = this._logQuery(sql, debug, parameters);\n    let queryResult;\n    const errForStack = new Error();\n    try {\n      queryResult = await query;\n    } catch (error) {\n      if (error.code === \"ECONNRESET\" || /Unable to set non-blocking to true/i.test(error) || /SSL SYSCALL error: EOF detected/i.test(error) || /Local: Authentication failure/i.test(error) || error.message === \"Query read timeout\") {\n        connection._invalid = true;\n      }\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    }\n    complete();\n    let rows = Array.isArray(queryResult) ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), []) : queryResult.rows;\n    const rowCount = Array.isArray(queryResult) ? queryResult.reduce((count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count, 0) : queryResult.rowCount || 0;\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows.map(row => _.toPairs(row).reduce((acc, [key, value]) => {\n        const mapping = this.options.aliasesMapping.get(key);\n        acc[mapping || key] = value;\n        return acc;\n      }, {}));\n    }\n    const isTableNameQuery = sql.startsWith(\"SELECT table_name FROM information_schema.tables\");\n    const isRelNameQuery = sql.startsWith(\"SELECT relname FROM pg_class WHERE oid IN\");\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split(\"_\")[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n    if (rows[0] && rows[0].sequelize_caught_exception !== void 0) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: \"23505\",\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(\",\");\n        const columns = _.zipObject(row.column_indexes, this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names));\n        delete row.column_indexes;\n        delete row.column_names;\n        let field;\n        let attribute;\n        row.fields = row.indkey.split(\" \").map((indKey, index) => {\n          field = columns[indKey];\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : void 0,\n            order: attribute.includes(\"DESC\") ? \"DESC\" : attribute.includes(\"ASC\") ? \"ASC\" : void 0,\n            length: void 0\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== void 0 && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === \"string\" && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === \"YES\",\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === \"PRIMARY KEY\"\n        };\n        if (result[row.Field].type === \"BOOLEAN\") {\n          result[row.Field].defaultValue = {\n            \"false\": false,\n            \"true\": true\n          }[result[row.Field].defaultValue];\n          if (result[row.Field].defaultValue === void 0) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n        if (typeof result[row.Field].defaultValue === \"string\") {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, \"\");\n          if (result[row.Field].defaultValue.includes(\"::\")) {\n            const split = result[row.Field].defaultValue.split(\"::\");\n            if (split[1].toLowerCase() !== \"regclass)\") {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n      if (this.isUpsertQuery()) {\n        return [this.instance, null];\n      }\n      return [this.instance || rows && (this.options.plain && rows[0] || rows) || void 0, rowCount];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n    switch (code) {\n      case \"23503\":\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : void 0;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : void 0;\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case \"23505\":\n        if (errDetail && (match = errDetail.replace(/\"/g, \"\").match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n          errors = [];\n          message = \"Validation error\";\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(this.getUniqueConstraintErrorMessage(field), \"unique violation\", field, value, this.instance, \"not_unique\"));\n          });\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n          return new sequelizeErrors.UniqueConstraintError({\n            message,\n            errors,\n            parent: err,\n            fields,\n            stack: errStack\n          });\n        }\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n      case \"23P01\":\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n        if (match) {\n          fields = _.zipObject(match[1].split(\", \"), match[2].split(\", \"));\n        }\n        message = \"Exclusion constraint error\";\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n      case \"42704\":\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = \"Unknown constraint error\";\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : void 0;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : void 0;\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      default:\n        return new sequelizeErrors.DatabaseError(err, {\n          stack: errStack\n        });\n    }\n  }\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n  getInsertIdField() {\n    return \"id\";\n  }\n}\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;","map":{"version":3,"names":["AbstractQuery","require","QueryTypes","sequelizeErrors","_","logger","debug","debugContext","Query","formatBindParameters","sql","values","dialect","stringReplaceFunc","value","replace","bindParam","Array","isArray","map","skipValueReplace","i","seen","replacementFunc","match","key","values2","push","run","parameters","connection","isEmpty","options","searchPath","sequelize","getQueryInterface","queryGenerator","setSearchPath","minifyAliases","includeAliases","toPairs","sort","a","b","length","forEach","alias","original","reg","RegExp","escapeRegExp","query","Promise","resolve","reject","error","result","complete","_logQuery","queryResult","errForStack","Error","code","test","message","_invalid","formatError","stack","rows","reduce","allRows","r","concat","rowCount","count","Number","isFinite","aliasesMapping","row","acc","mapping","get","isTableNameQuery","startsWith","isRelNameQuery","name","relname","tableName","split","Object","sequelize_caught_exception","detail","isShowIndexesQuery","attributes","exec","definition","columns","zipObject","column_indexes","fromArray","column_names","field","attribute","fields","indkey","indKey","index","collate","order","includes","filter","n","isForeignKeysQuery","defParts","condef","id","constraint_name","table","from","to","toLowerCase","isSelectQuery","raw","quoteIdentifiers","attrsMap","model","rawAttributes","m","v","k","mapKeys","targetAttr","handleSelectQuery","DESCRIBE","type","Field","Type","toUpperCase","allowNull","Null","defaultValue","Default","comment","Comment","special","primaryKey","Constraint","isVersionQuery","server_version","isShowOrDescribeQuery","BULKUPDATE","returning","parseInt","BULKDELETE","isInsertQuery","isUpdateQuery","isUpsertQuery","instance","dataValues","EmptyResultError","prototype","hasOwnProperty","call","record","attr","find","fieldName","plain","isRawQuery","err","errStack","errors","sqlState","errMessage","messagePrimary","errDetail","messageDetail","ForeignKeyConstraintError","parent","forOwn","ValidationErrorItem","getUniqueConstraintErrorMessage","uniqueKeys","constraint","isEqual","keys","msg","UniqueConstraintError","ExclusionConstraintError","UnknownConstraintError","DatabaseError","getInsertIdField","module","exports","default"],"sources":["C:\\Users\\teply\\OneDrive\\Рабочий стол\\web_project\\client\\node_modules\\sequelize\\src\\dialects\\postgres\\query.js"],"sourcesContent":["'use strict';\n\nconst AbstractQuery = require('../abstract/query');\nconst QueryTypes = require('../../query-types');\nconst sequelizeErrors = require('../../errors');\nconst _ = require('lodash');\nconst { logger } = require('../../utils/logger');\n\nconst debug = logger.debugContext('sql:pg');\n\n\nclass Query extends AbstractQuery {\n  /**\n   * Rewrite query with parameters.\n   *\n   * @param {string} sql\n   * @param {Array|object} values\n   * @param {string} dialect\n   * @private\n   */\n  static formatBindParameters(sql, values, dialect) {\n    const stringReplaceFunc = value => typeof value === 'string' ? value.replace(/\\0/g, '\\\\0') : value;\n\n    let bindParam;\n    if (Array.isArray(values)) {\n      bindParam = values.map(stringReplaceFunc);\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, { skipValueReplace: true })[0];\n    } else {\n      bindParam = [];\n      let i = 0;\n      const seen = {};\n      const replacementFunc = (match, key, values) => {\n        if (seen[key] !== undefined) {\n          return seen[key];\n        }\n        if (values[key] !== undefined) {\n          i = i + 1;\n          bindParam.push(stringReplaceFunc(values[key]));\n          seen[key] = `$${i}`;\n          return `$${i}`;\n        }\n        return undefined;\n      };\n      sql = AbstractQuery.formatBindParameters(sql, values, dialect, replacementFunc)[0];\n    }\n    return [sql, bindParam];\n  }\n\n  async run(sql, parameters) {\n    const { connection } = this;\n\n    if (!_.isEmpty(this.options.searchPath)) {\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\n    }\n\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\n      _.toPairs(this.options.includeAliases)\n        // Sorting to replace the longest aliases first to prevent alias collision\n        .sort((a, b) => b[1].length - a[1].length)\n        .forEach(([alias, original]) => {\n          const reg = new RegExp(_.escapeRegExp(original), 'g');\n\n          sql = sql.replace(reg, alias);\n        });\n    }\n\n    this.sql = sql;\n\n    const query = parameters && parameters.length\n      ? new Promise((resolve, reject) => connection.query(sql, parameters, (error, result) => error ? reject(error) : resolve(result)))\n      : new Promise((resolve, reject) => connection.query(sql, (error, result) => error ? reject(error) : resolve(result)));\n\n    const complete = this._logQuery(sql, debug, parameters);\n\n    let queryResult;\n    const errForStack = new Error();\n\n    try {\n      queryResult = await query;\n    } catch (error) {\n      // set the client so that it will be reaped if the connection resets while executing\n      if (error.code === 'ECONNRESET'\n        // https://github.com/sequelize/sequelize/pull/14090\n        // pg-native throws custom exception or libpq formatted errors\n        || /Unable to set non-blocking to true/i.test(error)\n        || /SSL SYSCALL error: EOF detected/i.test(error)\n        || /Local: Authentication failure/i.test(error)\n        // https://github.com/sequelize/sequelize/pull/15144\n        || error.message === 'Query read timeout'\n      ) {\n        connection._invalid = true;\n      }\n\n      error.sql = sql;\n      error.parameters = parameters;\n      throw this.formatError(error, errForStack.stack);\n    }\n\n    complete();\n\n    let rows = Array.isArray(queryResult)\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\n      : queryResult.rows;\n    const rowCount = Array.isArray(queryResult)\n      ? queryResult.reduce(\n        (count, r) => Number.isFinite(r.rowCount) ? count + r.rowCount : count,\n        0\n      )\n      : queryResult.rowCount || 0;\n\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\n      rows = rows\n        .map(row => _.toPairs(row)\n          .reduce((acc, [key, value]) => {\n            const mapping = this.options.aliasesMapping.get(key);\n            acc[mapping || key] = value;\n            return acc;\n          }, {})\n        );\n    }\n\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\n\n    if (isRelNameQuery) {\n      return rows.map(row => ({\n        name: row.relname,\n        tableName: row.relname.split('_')[0]\n      }));\n    }\n    if (isTableNameQuery) {\n      return rows.map(row => Object.values(row));\n    }\n\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\n      if (rows[0].sequelize_caught_exception !== null) {\n        throw this.formatError({\n          sql,\n          parameters,\n          code: '23505',\n          detail: rows[0].sequelize_caught_exception\n        });\n      }\n      for (const row of rows) {\n        delete row.sequelize_caught_exception;\n      }\n    }\n\n    if (this.isShowIndexesQuery()) {\n      for (const row of rows) {\n        const attributes = /ON .*? (?:USING .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\n\n        // Map column index in table to column name\n        const columns = _.zipObject(\n          row.column_indexes,\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names)\n        );\n        delete row.column_indexes;\n        delete row.column_names;\n\n        let field;\n        let attribute;\n\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\n          field = columns[indKey];\n          // for functional indices indKey = 0\n          if (!field) {\n            return null;\n          }\n          attribute = attributes[index];\n          return {\n            attribute: field,\n            collate: attribute.match(/COLLATE \"(.*?)\"/) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\n            length: undefined\n          };\n        }).filter(n => n !== null);\n        delete row.columns;\n      }\n      return rows;\n    }\n    if (this.isForeignKeysQuery()) {\n      const result = [];\n      for (const row of rows) {\n        let defParts;\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\n          row.id = row.constraint_name;\n          row.table = defParts[2];\n          row.from = defParts[1];\n          row.to = defParts[3];\n          let i;\n          for (i = 5; i <= 8; i += 3) {\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\n            }\n          }\n        }\n        result.push(row);\n      }\n      return result;\n    }\n    if (this.isSelectQuery()) {\n      let result = rows;\n      // Postgres will treat tables as case-insensitive, so fix the case\n      // of the returned values to match attributes\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\n          m[k.toLowerCase()] = k;\n          return m;\n        }, {});\n        result = rows.map(row => {\n          return _.mapKeys(row, (value, key) => {\n            const targetAttr = attrsMap[key];\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\n              return targetAttr;\n            }\n            return key;\n          });\n        });\n      }\n      return this.handleSelectQuery(result);\n    }\n    if (QueryTypes.DESCRIBE === this.options.type) {\n      const result = {};\n\n      for (const row of rows) {\n        result[row.Field] = {\n          type: row.Type.toUpperCase(),\n          allowNull: row.Null === 'YES',\n          defaultValue: row.Default,\n          comment: row.Comment,\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\n          primaryKey: row.Constraint === 'PRIMARY KEY'\n        };\n\n        if (result[row.Field].type === 'BOOLEAN') {\n          result[row.Field].defaultValue = { 'false': false, 'true': true }[result[row.Field].defaultValue];\n\n          if (result[row.Field].defaultValue === undefined) {\n            result[row.Field].defaultValue = null;\n          }\n        }\n\n        if (typeof result[row.Field].defaultValue === 'string') {\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\n\n          if (result[row.Field].defaultValue.includes('::')) {\n            const split = result[row.Field].defaultValue.split('::');\n            if (split[1].toLowerCase() !== 'regclass)') {\n              result[row.Field].defaultValue = split[0];\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n    if (this.isVersionQuery()) {\n      return rows[0].server_version;\n    }\n    if (this.isShowOrDescribeQuery()) {\n      return rows;\n    }\n    if (QueryTypes.BULKUPDATE === this.options.type) {\n      if (!this.options.returning) {\n        return parseInt(rowCount, 10);\n      }\n      return this.handleSelectQuery(rows);\n    }\n    if (QueryTypes.BULKDELETE === this.options.type) {\n      return parseInt(rowCount, 10);\n    }\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\n      if (this.instance && this.instance.dataValues) {\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\n          throw new sequelizeErrors.EmptyResultError();\n        }\n\n        for (const key in rows[0]) {\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\n            const record = rows[0][key];\n\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\n\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\n          }\n        }\n      }\n\n      if (this.isUpsertQuery()) {\n        return [\n          this.instance,\n          null\n        ];\n      }\n\n      return [\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\n        rowCount\n      ];\n    }\n    if (this.isRawQuery()) {\n      return [rows, queryResult];\n    }\n    return rows;\n  }\n\n  formatError(err, errStack) {\n    let match;\n    let table;\n    let index;\n    let fields;\n    let errors;\n    let message;\n\n    const code = err.code || err.sqlState;\n    const errMessage = err.message || err.messagePrimary;\n    const errDetail = err.detail || err.messageDetail;\n\n    switch (code) {\n      case '23503':\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\n        index = index ? index[1] : undefined;\n        table = errMessage.match(/on table \"(.+?)\"/);\n        table = table ? table[1] : undefined;\n\n        return new sequelizeErrors.ForeignKeyConstraintError({\n          message: errMessage,\n          fields: null,\n          index,\n          table,\n          parent: err,\n          stack: errStack\n        });\n      case '23505':\n        // there are multiple different formats of error messages for this error code\n        // this regex should check at least two\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n          errors = [];\n          message = 'Validation error';\n\n          _.forOwn(fields, (value, field) => {\n            errors.push(new sequelizeErrors.ValidationErrorItem(\n              this.getUniqueConstraintErrorMessage(field),\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\n              field,\n              value,\n              this.instance,\n              'not_unique'\n            ));\n          });\n\n          if (this.model && this.model.uniqueKeys) {\n            _.forOwn(this.model.uniqueKeys, constraint => {\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && !!constraint.msg) {\n                message = constraint.msg;\n                return false;\n              }\n            });\n          }\n\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, parent: err, fields, stack: errStack });\n        }\n\n        return new sequelizeErrors.UniqueConstraintError({\n          message: errMessage,\n          parent: err,\n          stack: errStack\n        });\n\n      case '23P01':\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\n\n        if (match) {\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\n        }\n        message = 'Exclusion constraint error';\n\n        return new sequelizeErrors.ExclusionConstraintError({\n          message,\n          constraint: err.constraint,\n          fields,\n          table: err.table,\n          parent: err,\n          stack: errStack\n        });\n\n      case '42704':\n        if (err.sql && /(CONSTRAINT|INDEX)/gi.test(err.sql)) {\n          message = 'Unknown constraint error';\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\n          index = index ? index[1] : undefined;\n          table = errMessage.match(/relation \"(.+?)\"/i);\n          table = table ? table[1] : undefined;\n\n          throw new sequelizeErrors.UnknownConstraintError({\n            message,\n            constraint: index,\n            fields,\n            table,\n            parent: err,\n            stack: errStack\n          });\n        }\n      // falls through\n      default:\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\n    }\n  }\n\n  isForeignKeysQuery() {\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\n  }\n\n  getInsertIdField() {\n    return 'id';\n  }\n}\n\nmodule.exports = Query;\nmodule.exports.Query = Query;\nmodule.exports.default = Query;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}